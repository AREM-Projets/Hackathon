
Robot_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08009d58  08009d58  00019d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ff0  08009ff0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08009ff0  08009ff0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ff0  08009ff0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff4  08009ff4  00019ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000080  0800a074  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800a074  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c24  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046cf  00000000  00000000  00042cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00047398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00048360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7c1  00000000  00000000  00049180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017815  00000000  00000000  00068941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095192  00000000  00000000  00080156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001152e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  00115338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d3c 	.word	0x08009d3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08009d3c 	.word	0x08009d3c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_frsub>:
 8000c80:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c84:	e002      	b.n	8000c8c <__addsf3>
 8000c86:	bf00      	nop

08000c88 <__aeabi_fsub>:
 8000c88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c8c <__addsf3>:
 8000c8c:	0042      	lsls	r2, r0, #1
 8000c8e:	bf1f      	itttt	ne
 8000c90:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c94:	ea92 0f03 	teqne	r2, r3
 8000c98:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c9c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca0:	d06a      	beq.n	8000d78 <__addsf3+0xec>
 8000ca2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ca6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000caa:	bfc1      	itttt	gt
 8000cac:	18d2      	addgt	r2, r2, r3
 8000cae:	4041      	eorgt	r1, r0
 8000cb0:	4048      	eorgt	r0, r1
 8000cb2:	4041      	eorgt	r1, r0
 8000cb4:	bfb8      	it	lt
 8000cb6:	425b      	neglt	r3, r3
 8000cb8:	2b19      	cmp	r3, #25
 8000cba:	bf88      	it	hi
 8000cbc:	4770      	bxhi	lr
 8000cbe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cca:	bf18      	it	ne
 8000ccc:	4240      	negne	r0, r0
 8000cce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cd2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cd6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4249      	negne	r1, r1
 8000cde:	ea92 0f03 	teq	r2, r3
 8000ce2:	d03f      	beq.n	8000d64 <__addsf3+0xd8>
 8000ce4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cec:	eb10 000c 	adds.w	r0, r0, ip
 8000cf0:	f1c3 0320 	rsb	r3, r3, #32
 8000cf4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__addsf3+0x78>
 8000cfe:	4249      	negs	r1, r1
 8000d00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d08:	d313      	bcc.n	8000d32 <__addsf3+0xa6>
 8000d0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d0e:	d306      	bcc.n	8000d1e <__addsf3+0x92>
 8000d10:	0840      	lsrs	r0, r0, #1
 8000d12:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d16:	f102 0201 	add.w	r2, r2, #1
 8000d1a:	2afe      	cmp	r2, #254	; 0xfe
 8000d1c:	d251      	bcs.n	8000dc2 <__addsf3+0x136>
 8000d1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d26:	bf08      	it	eq
 8000d28:	f020 0001 	biceq.w	r0, r0, #1
 8000d2c:	ea40 0003 	orr.w	r0, r0, r3
 8000d30:	4770      	bx	lr
 8000d32:	0049      	lsls	r1, r1, #1
 8000d34:	eb40 0000 	adc.w	r0, r0, r0
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	bf28      	it	cs
 8000d3c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d40:	d2ed      	bcs.n	8000d1e <__addsf3+0x92>
 8000d42:	fab0 fc80 	clz	ip, r0
 8000d46:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d4a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d4e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d52:	bfaa      	itet	ge
 8000d54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d58:	4252      	neglt	r2, r2
 8000d5a:	4318      	orrge	r0, r3
 8000d5c:	bfbc      	itt	lt
 8000d5e:	40d0      	lsrlt	r0, r2
 8000d60:	4318      	orrlt	r0, r3
 8000d62:	4770      	bx	lr
 8000d64:	f092 0f00 	teq	r2, #0
 8000d68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d6c:	bf06      	itte	eq
 8000d6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d72:	3201      	addeq	r2, #1
 8000d74:	3b01      	subne	r3, #1
 8000d76:	e7b5      	b.n	8000ce4 <__addsf3+0x58>
 8000d78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d80:	bf18      	it	ne
 8000d82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d86:	d021      	beq.n	8000dcc <__addsf3+0x140>
 8000d88:	ea92 0f03 	teq	r2, r3
 8000d8c:	d004      	beq.n	8000d98 <__addsf3+0x10c>
 8000d8e:	f092 0f00 	teq	r2, #0
 8000d92:	bf08      	it	eq
 8000d94:	4608      	moveq	r0, r1
 8000d96:	4770      	bx	lr
 8000d98:	ea90 0f01 	teq	r0, r1
 8000d9c:	bf1c      	itt	ne
 8000d9e:	2000      	movne	r0, #0
 8000da0:	4770      	bxne	lr
 8000da2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000da6:	d104      	bne.n	8000db2 <__addsf3+0x126>
 8000da8:	0040      	lsls	r0, r0, #1
 8000daa:	bf28      	it	cs
 8000dac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000db0:	4770      	bx	lr
 8000db2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000db6:	bf3c      	itt	cc
 8000db8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dbc:	4770      	bxcc	lr
 8000dbe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dc2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dca:	4770      	bx	lr
 8000dcc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dd0:	bf16      	itet	ne
 8000dd2:	4608      	movne	r0, r1
 8000dd4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd8:	4601      	movne	r1, r0
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	bf06      	itte	eq
 8000dde:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000de2:	ea90 0f01 	teqeq	r0, r1
 8000de6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dea:	4770      	bx	lr

08000dec <__aeabi_ui2f>:
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e004      	b.n	8000dfc <__aeabi_i2f+0x8>
 8000df2:	bf00      	nop

08000df4 <__aeabi_i2f>:
 8000df4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df8:	bf48      	it	mi
 8000dfa:	4240      	negmi	r0, r0
 8000dfc:	ea5f 0c00 	movs.w	ip, r0
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e08:	4601      	mov	r1, r0
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	e01c      	b.n	8000e4a <__aeabi_l2f+0x2a>

08000e10 <__aeabi_ul2f>:
 8000e10:	ea50 0201 	orrs.w	r2, r0, r1
 8000e14:	bf08      	it	eq
 8000e16:	4770      	bxeq	lr
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e00a      	b.n	8000e34 <__aeabi_l2f+0x14>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_l2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e2c:	d502      	bpl.n	8000e34 <__aeabi_l2f+0x14>
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	ea5f 0c01 	movs.w	ip, r1
 8000e38:	bf02      	ittt	eq
 8000e3a:	4684      	moveq	ip, r0
 8000e3c:	4601      	moveq	r1, r0
 8000e3e:	2000      	moveq	r0, #0
 8000e40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e44:	bf08      	it	eq
 8000e46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e4e:	fabc f28c 	clz	r2, ip
 8000e52:	3a08      	subs	r2, #8
 8000e54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e58:	db10      	blt.n	8000e7c <__aeabi_l2f+0x5c>
 8000e5a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5e:	4463      	add	r3, ip
 8000e60:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e64:	f1c2 0220 	rsb	r2, r2, #32
 8000e68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e70:	eb43 0002 	adc.w	r0, r3, r2
 8000e74:	bf08      	it	eq
 8000e76:	f020 0001 	biceq.w	r0, r0, #1
 8000e7a:	4770      	bx	lr
 8000e7c:	f102 0220 	add.w	r2, r2, #32
 8000e80:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e84:	f1c2 0220 	rsb	r2, r2, #32
 8000e88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e8c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e90:	eb43 0002 	adc.w	r0, r3, r2
 8000e94:	bf08      	it	eq
 8000e96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e9a:	4770      	bx	lr

08000e9c <__gesf2>:
 8000e9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000ea0:	e006      	b.n	8000eb0 <__cmpsf2+0x4>
 8000ea2:	bf00      	nop

08000ea4 <__lesf2>:
 8000ea4:	f04f 0c01 	mov.w	ip, #1
 8000ea8:	e002      	b.n	8000eb0 <__cmpsf2+0x4>
 8000eaa:	bf00      	nop

08000eac <__cmpsf2>:
 8000eac:	f04f 0c01 	mov.w	ip, #1
 8000eb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	bf18      	it	ne
 8000ec2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec6:	d011      	beq.n	8000eec <__cmpsf2+0x40>
 8000ec8:	b001      	add	sp, #4
 8000eca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ece:	bf18      	it	ne
 8000ed0:	ea90 0f01 	teqne	r0, r1
 8000ed4:	bf58      	it	pl
 8000ed6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eda:	bf88      	it	hi
 8000edc:	17c8      	asrhi	r0, r1, #31
 8000ede:	bf38      	it	cc
 8000ee0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee4:	bf18      	it	ne
 8000ee6:	f040 0001 	orrne.w	r0, r0, #1
 8000eea:	4770      	bx	lr
 8000eec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ef0:	d102      	bne.n	8000ef8 <__cmpsf2+0x4c>
 8000ef2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef6:	d105      	bne.n	8000f04 <__cmpsf2+0x58>
 8000ef8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000efc:	d1e4      	bne.n	8000ec8 <__cmpsf2+0x1c>
 8000efe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f02:	d0e1      	beq.n	8000ec8 <__cmpsf2+0x1c>
 8000f04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__aeabi_cfrcmple>:
 8000f0c:	4684      	mov	ip, r0
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4661      	mov	r1, ip
 8000f12:	e7ff      	b.n	8000f14 <__aeabi_cfcmpeq>

08000f14 <__aeabi_cfcmpeq>:
 8000f14:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f16:	f7ff ffc9 	bl	8000eac <__cmpsf2>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	bf48      	it	mi
 8000f1e:	f110 0f00 	cmnmi.w	r0, #0
 8000f22:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f24 <__aeabi_fcmpeq>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff fff4 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f2c:	bf0c      	ite	eq
 8000f2e:	2001      	moveq	r0, #1
 8000f30:	2000      	movne	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmplt>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffea 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f40:	bf34      	ite	cc
 8000f42:	2001      	movcc	r0, #1
 8000f44:	2000      	movcs	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmple>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffe0 	bl	8000f14 <__aeabi_cfcmpeq>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpge>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffd2 	bl	8000f0c <__aeabi_cfrcmple>
 8000f68:	bf94      	ite	ls
 8000f6a:	2001      	movls	r0, #1
 8000f6c:	2000      	movhi	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpgt>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff ffc8 	bl	8000f0c <__aeabi_cfrcmple>
 8000f7c:	bf34      	ite	cc
 8000f7e:	2001      	movcc	r0, #1
 8000f80:	2000      	movcs	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_f2iz>:
 8000f88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f8c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f90:	d30f      	bcc.n	8000fb2 <__aeabi_f2iz+0x2a>
 8000f92:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f96:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f9a:	d90d      	bls.n	8000fb8 <__aeabi_f2iz+0x30>
 8000f9c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fac:	bf18      	it	ne
 8000fae:	4240      	negne	r0, r0
 8000fb0:	4770      	bx	lr
 8000fb2:	f04f 0000 	mov.w	r0, #0
 8000fb6:	4770      	bx	lr
 8000fb8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fbc:	d101      	bne.n	8000fc2 <__aeabi_f2iz+0x3a>
 8000fbe:	0242      	lsls	r2, r0, #9
 8000fc0:	d105      	bne.n	8000fce <__aeabi_f2iz+0x46>
 8000fc2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc6:	bf08      	it	eq
 8000fc8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr

08000fd4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <_ZSt4fmaxff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f006 fc8f 	bl	800791c <fmaxf>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f006 fc93 	bl	8007940 <fminf>
 800101a:	4603      	mov	r3, r0
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN11BlocMoteursC1Ev>:
#include "BlocMoteurs.h"

extern float COEF2D;
extern float COEF2G;

BlocMoteurs::BlocMoteurs()
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
{
    moteurs_arret = 1;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
    // Initializing Motor
    //TODO
    //Initializing Motor


    pourcentMaxSpeed = 1.0;
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <_ZN11BlocMoteursC1Ev+0x28>)
 800103a:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	3ff00000 	.word	0x3ff00000

08001050 <_ZN11BlocMoteurs17commande_vitessesEff>:
{

}

void BlocMoteurs::commande_vitesses(float vitesse_normalisee_G, float vitesse_normalisee_D)
{ 
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    /////////////////////////////////////////////////////////////
    // Assurance que les parametres sont entre -1 et 1 ////////////////
    vitesse_normalisee_G = fmin(1.0f, vitesse_normalisee_G);
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001062:	f7ff ffd1 	bl	8001008 <_ZSt4fminff>
 8001066:	60b8      	str	r0, [r7, #8]
    vitesse_normalisee_G = fmax(-1.0f, vitesse_normalisee_G);
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	4845      	ldr	r0, [pc, #276]	; (8001180 <_ZN11BlocMoteurs17commande_vitessesEff+0x130>)
 800106c:	f7ff ffbe 	bl	8000fec <_ZSt4fmaxff>
 8001070:	60b8      	str	r0, [r7, #8]

    vitesse_normalisee_D = fmin(1.0f, vitesse_normalisee_D);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001078:	f7ff ffc6 	bl	8001008 <_ZSt4fminff>
 800107c:	6078      	str	r0, [r7, #4]
    vitesse_normalisee_D = fmax(-1.0f, vitesse_normalisee_D);
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	483f      	ldr	r0, [pc, #252]	; (8001180 <_ZN11BlocMoteurs17commande_vitessesEff+0x130>)
 8001082:	f7ff ffb3 	bl	8000fec <_ZSt4fmaxff>
 8001086:	6078      	str	r0, [r7, #4]
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////

    // Détermination du signe des vitesses (logique inversée entre les deux moteurs car placés symétriquement sur le robot et branchement identique)
    int sens_G = avant;
 8001088:	2301      	movs	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
    if(vitesse_normalisee_G < 0)
 800108c:	f04f 0100 	mov.w	r1, #0
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f7ff ff51 	bl	8000f38 <__aeabi_fcmplt>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <_ZN11BlocMoteurs17commande_vitessesEff+0x50>
    {
    	sens_G = arriere;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    }
    int sens_D = avant;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
    if(vitesse_normalisee_D < 0)
 80010a4:	f04f 0100 	mov.w	r1, #0
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff45 	bl	8000f38 <__aeabi_fcmplt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <_ZN11BlocMoteurs17commande_vitessesEff+0x68>
    {
    	sens_D = arriere;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    }

    // Détermination des valeurs de vitesses réelles à envoyer au shield + Recalage de la normalisation (le moteur ne fait avancer les chemilles qu'à partir de 0.2*MAX_VITESSE en statique et posé sur le sol)
    //

    int vitesse_G = COEF2G*MAX_VITESSE*(abs(vitesse_normalisee_G)*(1-COEF_G) + COEF_G);
 80010b8:	4b32      	ldr	r3, [pc, #200]	; (8001184 <_ZN11BlocMoteurs17commande_vitessesEff+0x134>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4932      	ldr	r1, [pc, #200]	; (8001188 <_ZN11BlocMoteurs17commande_vitessesEff+0x138>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f846 	bl	8000150 <__aeabi_fmul>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461c      	mov	r4, r3
 80010c8:	68b8      	ldr	r0, [r7, #8]
 80010ca:	f7ff ff83 	bl	8000fd4 <_ZSt3absf>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f04f 0100 	mov.w	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fdd9 	bl	8000c8c <__addsf3>
 80010da:	4603      	mov	r3, r0
 80010dc:	4619      	mov	r1, r3
 80010de:	4620      	mov	r0, r4
 80010e0:	f7ff f836 	bl	8000150 <__aeabi_fmul>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff4e 	bl	8000f88 <__aeabi_f2iz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	617b      	str	r3, [r7, #20]
    int vitesse_D = COEF2D*MAX_VITESSE*(abs(vitesse_normalisee_D)*(1-COEF_D) + COEF_D);
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <_ZN11BlocMoteurs17commande_vitessesEff+0x13c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4924      	ldr	r1, [pc, #144]	; (8001188 <_ZN11BlocMoteurs17commande_vitessesEff+0x138>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f82a 	bl	8000150 <__aeabi_fmul>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461c      	mov	r4, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ff67 	bl	8000fd4 <_ZSt3absf>
 8001106:	4603      	mov	r3, r0
 8001108:	f04f 0100 	mov.w	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fdbd 	bl	8000c8c <__addsf3>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff f81a 	bl	8000150 <__aeabi_fmul>
 800111c:	4603      	mov	r3, r0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff32 	bl	8000f88 <__aeabi_f2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	613b      	str	r3, [r7, #16]
    //vitesse_G = max(vitesse_G, 10);
    //vitesse_D = max(vitesse_D, 10);
    /////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////
    
    set_vitesse_moteur_G(vitesse_G * pourcentMaxSpeed, sens_G);
 8001128:	6978      	ldr	r0, [r7, #20]
 800112a:	f7ff fa17 	bl	800055c <__aeabi_i2d>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001134:	f7ff fa7c 	bl	8000630 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fd26 	bl	8000b90 <__aeabi_d2iz>
 8001144:	4603      	mov	r3, r0
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 f83a 	bl	80011c4 <_ZN11BlocMoteurs20set_vitesse_moteur_GEii>
    set_vitesse_moteur_D(vitesse_D * pourcentMaxSpeed, sens_D);
 8001150:	6938      	ldr	r0, [r7, #16]
 8001152:	f7ff fa03 	bl	800055c <__aeabi_i2d>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115c:	f7ff fa68 	bl	8000630 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd12 	bl	8000b90 <__aeabi_d2iz>
 800116c:	4603      	mov	r3, r0
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4619      	mov	r1, r3
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 f85a 	bl	800122c <_ZN11BlocMoteurs20set_vitesse_moteur_DEii>
}
 8001178:	bf00      	nop
 800117a:	3724      	adds	r7, #36	; 0x24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	bf800000 	.word	0xbf800000
 8001184:	20000004 	.word	0x20000004
 8001188:	477a0000 	.word	0x477a0000
 800118c:	20000000 	.word	0x20000000

08001190 <_ZSt4fminIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff f9de 	bl	800055c <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f7ff f9d9 	bl	800055c <__aeabi_i2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f006 fb2b 	bl	800780c <fmin>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
    }
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}

080011c4 <_ZN11BlocMoteurs20set_vitesse_moteur_GEii>:

void BlocMoteurs::set_vitesse_moteur_G(int vitesse, int dir)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
    // verification de la validité de la vitesse a envoyer
    vitesse = abs(vitesse);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bfb8      	it	lt
 80011d6:	425b      	neglt	r3, r3
 80011d8:	60bb      	str	r3, [r7, #8]
    vitesse = fmin(vitesse, (int)MAX_VITESSE);
 80011da:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 80011de:	68b8      	ldr	r0, [r7, #8]
 80011e0:	f7ff ffd6 	bl	8001190 <_ZSt4fminIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fcd0 	bl	8000b90 <__aeabi_d2iz>
 80011f0:	4603      	mov	r3, r0
 80011f2:	60bb      	str	r3, [r7, #8]
    //vitesse = vitesse > 10 ? vitesse : 0;

    if (!moteurs_arret)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <_ZN11BlocMoteurs20set_vitesse_moteur_GEii+0x56>
    {
    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (uint16_t ) vitesse);
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <_ZN11BlocMoteurs20set_vitesse_moteur_GEii+0x60>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
    	HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, (GPIO_PinState) dir );
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	461a      	mov	r2, r3
 8001212:	2104      	movs	r1, #4
 8001214:	4804      	ldr	r0, [pc, #16]	; (8001228 <_ZN11BlocMoteurs20set_vitesse_moteur_GEii+0x64>)
 8001216:	f004 f897 	bl	8005348 <HAL_GPIO_WritePin>

    }


}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200001c0 	.word	0x200001c0
 8001228:	40010c00 	.word	0x40010c00

0800122c <_ZN11BlocMoteurs20set_vitesse_moteur_DEii>:

void BlocMoteurs::set_vitesse_moteur_D(int vitesse, int dir)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
    // verification de la validité de la vitesse a envoyer
    vitesse = abs(vitesse);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	bfb8      	it	lt
 800123e:	425b      	neglt	r3, r3
 8001240:	60bb      	str	r3, [r7, #8]
    vitesse = fmin(vitesse, (int)MAX_VITESSE);
 8001242:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
 8001246:	68b8      	ldr	r0, [r7, #8]
 8001248:	f7ff ffa2 	bl	8001190 <_ZSt4fminIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc9c 	bl	8000b90 <__aeabi_d2iz>
 8001258:	4603      	mov	r3, r0
 800125a:	60bb      	str	r3, [r7, #8]
    //vitesse = vitesse > 10 ? vitesse : 0;

    if (!moteurs_arret)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00c      	beq.n	8001284 <_ZN11BlocMoteurs20set_vitesse_moteur_DEii+0x58>
    {
    	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, (uint16_t ) vitesse);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <_ZN11BlocMoteurs20set_vitesse_moteur_DEii+0x60>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
    	HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, (GPIO_PinState) dir );
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <_ZN11BlocMoteurs20set_vitesse_moteur_DEii+0x64>)
 8001280:	f004 f862 	bl	8005348 <HAL_GPIO_WritePin>

    }


}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001c0 	.word	0x200001c0
 8001290:	40011000 	.word	0x40011000

08001294 <_ZN11BlocMoteurs9motors_onEv>:


void BlocMoteurs::motors_on() // il faut activer les moteurs pour qu'il puisse recevoir des commandes vitesse.
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    moteurs_arret = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <_ZN11BlocMoteurs11motors_stopEv>:

void BlocMoteurs::motors_stop() // coupe les moteurs
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <_ZN11BlocMoteurs11motors_stopEv+0x38>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <_ZN11BlocMoteurs11motors_stopEv+0x38>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80012c4:	210c      	movs	r1, #12
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <_ZN11BlocMoteurs11motors_stopEv+0x38>)
 80012c8:	f004 fe50 	bl	8005f6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <_ZN11BlocMoteurs11motors_stopEv+0x38>)
 80012d0:	f004 fe4c 	bl	8005f6c <HAL_TIM_PWM_Start>
    moteurs_arret = 1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001c0 	.word	0x200001c0

080012e8 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	e9c7 0100 	strd	r0, r1, [r7]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
	...

08001308 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie>:
extern float CG;
extern float CD;
extern float CorAngle;
extern float CorDist;

ControleurPID::ControleurPID(BlocMoteurs *p_moteurs, Odometrie* p_odometrie) : objectif(0, 0, 0), start(INIT_X, INIT_Y, INIT_THETA)
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af04      	add	r7, sp, #16
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	e9cd 2300 	strd	r2, r3, [sp]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	4608      	mov	r0, r1
 800133c:	f000 ffac 	bl	8002298 <_ZN18EtatDynamiqueRobotC1Eddd>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f503 7146 	add.w	r1, r3, #792	; 0x318
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	f04f 0300 	mov.w	r3, #0
 800134e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	e9cd 2300 	strd	r2, r3, [sp]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	f04f 0300 	mov.w	r3, #0
 8001366:	4608      	mov	r0, r1
 8001368:	f000 ff96 	bl	8002298 <_ZN18EtatDynamiqueRobotC1Eddd>
{
    _min_update_period = 10000;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001372:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    // On a choisi de contenir ces éléments dans cette classe puisque le reste du code ne doit pas 
    // y avoir accès sans passer par le controleur
    moteurs = p_moteurs;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	601a      	str	r2, [r3, #0]

    odometrie = p_odometrie;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	605a      	str	r2, [r3, #4]




    _date_start = Time;
 8001382:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie+0x1a8>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580

    // Initialisation des dates.
    // Il s'agit de quelque chose d'important pour que la première consigne ne soit
    // pas bizarre à cause d'une initialisation à 0, et donc d'un premier delta t absurde.
    uint32_t date = 1000*Time;
 800138c:	4b48      	ldr	r3, [pc, #288]	; (80014b0 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie+0x1a8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	617b      	str	r3, [r7, #20]
    _last_update_consigne = date;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588

    objectif_atteint = true;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    objectif_is_rotation = false;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    PauseLineForRotation = false;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae

    // Les coefficients de l'asservissement polaire
    Pdist = 0.0065;
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	a338      	add	r3, pc, #224	; (adr r3, 80014a0 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie+0x198>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Idist = 0.000055;//4;
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	a337      	add	r3, pc, #220	; (adr r3, 80014a8 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie+0x1a0>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Ddist = 0;
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c1 2306 	strd	r2, r3, [r1, #24]



    Pcap = 15 ;
 80013e0:	68f9      	ldr	r1, [r7, #12]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie+0x1ac>)
 80013e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    Icap = 0.0;//2;//4;
 80013ec:	68f9      	ldr	r1, [r7, #12]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	f04f 0300 	mov.w	r3, #0
 80013f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Dcap = 0;
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    Pangle = 15 ;
 8001408:	68f9      	ldr	r1, [r7, #12]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie+0x1ac>)
 8001410:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Iangle = 0.0;//2;//4;
 8001414:	68f9      	ldr	r1, [r7, #12]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    Dangle = 0;
 8001422:	68f9      	ldr	r1, [r7, #12]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    Pcap = 0.07;
    Icap = 0.0002;//2;//4;
    Dcap = 0.05;
    */

    sum_erreur_polaire.dist = 0.0;
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    sum_erreur_polaire.cap = 0.0;
 800143e:	68f9      	ldr	r1, [r7, #12]
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    sum_erreur_polaire.terr = 0.0;
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    _OscCounter=0;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    lastx = odometrie->getX();
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fe2c 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	f501 61b2 	add.w	r1, r1, #1424	; 0x590
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
    lasty = odometrie->getY();
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fe30 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	68f9      	ldr	r1, [r7, #12]
 800148a:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 800148e:	e941 2302 	strd	r2, r3, [r1, #-8]

}
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	f3af 8000 	nop.w
 80014a0:	76c8b439 	.word	0x76c8b439
 80014a4:	3f7a9fbe 	.word	0x3f7a9fbe
 80014a8:	9c38b04b 	.word	0x9c38b04b
 80014ac:	3f0cd5f9 	.word	0x3f0cd5f9
 80014b0:	200000cc 	.word	0x200000cc
 80014b4:	402e0000 	.word	0x402e0000

080014b8 <_ZN13ControleurPID6updateEv>:
/**
 * @brief A appeler le plus souvent possible. C'est la fonction elle-même qui tient compte de l'horloge système pour mettre à jour
 *          ou non l'odométrie et les consignes asservies des moteurs.
 */
bool ControleurPID::update()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    uint32_t date = 1000*Time;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <_ZN13ControleurPID6updateEv+0x78>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	60fb      	str	r3, [r7, #12]

    // l'actualisation de la position doit être effectué le plus souvent possible
    odometrie->update();
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 fbd4 	bl	8002c80 <_ZN9Odometrie6updateEv>

    // l'actualisation des vitesses moteurs se font à intervalles de temps réguliers
    // (actualiser le plus souvent possible n'est pas nécessaire, voir pas forcément désirable)
    if(date - _last_update_consigne >= DELTA_T_ASSER_us)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d915      	bls.n	8001516 <_ZN13ControleurPID6updateEv+0x5e>
    {
        // Détermination des erreurs par rapport à l'objectif
        _processErreursPolaires();
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f824 	bl	8001538 <_ZN13ControleurPID23_processErreursPolairesEv>

        // Application des coefficients pour obtenir les consignes de vitesse
        // + Fin de l'objectif si suffisament proche
        if(objectif_is_rotation)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <_ZN13ControleurPID6updateEv+0x4a>
            _processPIDRotation();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fbe8 	bl	8001cd0 <_ZN13ControleurPID19_processPIDRotationEv>
 8001500:	e002      	b.n	8001508 <_ZN13ControleurPID6updateEv+0x50>
        else
            _processPID();
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 faa0 	bl	8001a48 <_ZN13ControleurPID11_processPIDEv>
        /*Serial.print("x:");
        Serial.println(odometrie->getX());*/

        // Envoie des vitesses aux moteurs
        // + Arret des moteurs si objectif atteint
        _applyConsignes();
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fd31 	bl	8001f70 <_ZN13ControleurPID15_applyConsignesEv>

        _last_update_consigne = date;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
    }



    if(objectif_atteint)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <_ZN13ControleurPID6updateEv+0x6c>
        return true;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <_ZN13ControleurPID6updateEv+0x6e>
    else
        return false;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000cc 	.word	0x200000cc
 8001534:	00000000 	.word	0x00000000

08001538 <_ZN13ControleurPID23_processErreursPolairesEv>:
/**
 * @brief Détermine les erreurs polaires entre la position et l'orientation du robot et l'objectif fixé. Si l'objectif est derrière le robot (+/- 90°), alors l'erreur de distance 
 *          devient négative (comme si on échangeait l'avant et l'arrière du robot).
 */
void ControleurPID::_processErreursPolaires()
{
 8001538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800153c:	b099      	sub	sp, #100	; 0x64
 800153e:	af02      	add	r7, sp, #8
 8001540:	60f8      	str	r0, [r7, #12]
    // La position et l'orientation actuelle du robot
    double x = odometrie->getX();
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fdbc 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 800154c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
    double y = odometrie->getY();
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fdc5 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 800155a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    double theta = odometrie->getThetaRadian();
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fd9e 	bl	80030a4 <_ZNK9Odometrie14getThetaRadianEv>
 8001568:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    xglob=x;
 800156c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001570:	f7ff fb36 	bl	8000be0 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	4aac      	ldr	r2, [pc, #688]	; (8001828 <_ZN13ControleurPID23_processErreursPolairesEv+0x2f0>)
 8001578:	6013      	str	r3, [r2, #0]
    yglob=y;
 800157a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800157e:	f7ff fb2f 	bl	8000be0 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4aa9      	ldr	r2, [pc, #676]	; (800182c <_ZN13ControleurPID23_processErreursPolairesEv+0x2f4>)
 8001586:	6013      	str	r3, [r2, #0]
    thetaglob=theta;
 8001588:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800158c:	f7ff fb28 	bl	8000be0 <__aeabi_d2f>
 8001590:	4603      	mov	r3, r0
 8001592:	4aa7      	ldr	r2, [pc, #668]	; (8001830 <_ZN13ControleurPID23_processErreursPolairesEv+0x2f8>)
 8001594:	6013      	str	r3, [r2, #0]



    // La position et l'orientation de l'objectif
    double c_x = objectif.getX();
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	33b0      	adds	r3, #176	; 0xb0
 800159a:	4618      	mov	r0, r3
 800159c:	f001 f975 	bl	800288a <_ZNK18EtatDynamiqueRobot4getXEv>
 80015a0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    double c_y = objectif.getY();
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	33b0      	adds	r3, #176	; 0xb0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f97b 	bl	80028a4 <_ZNK18EtatDynamiqueRobot4getYEv>
 80015ae:	e9c7 0108 	strd	r0, r1, [r7, #32]
    double c_theta = objectif.getThetaRadian();
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	33b0      	adds	r3, #176	; 0xb0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 f95a 	bl	8002870 <_ZNK18EtatDynamiqueRobot14getThetaRadianEv>
 80015bc:	e9c7 0106 	strd	r0, r1, [r7, #24]
    targetangleglob=c_theta;
 80015c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015c4:	f7ff fb0c 	bl	8000be0 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a9a      	ldr	r2, [pc, #616]	; (8001834 <_ZN13ControleurPID23_processErreursPolairesEv+0x2fc>)
 80015cc:	6013      	str	r3, [r2, #0]

    // dist en mm
    // cap en radians
    // terr en radians
    double dist = sqrt(pow(c_x - x, 2) + pow(c_y - y, 2));
 80015ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80015d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015d6:	f7fe fe73 	bl	80002c0 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	2202      	movs	r2, #2
 80015e4:	f000 fcf6 	bl	8001fd4 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015e8:	4680      	mov	r8, r0
 80015ea:	4689      	mov	r9, r1
 80015ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015f4:	f7fe fe64 	bl	80002c0 <__aeabi_dsub>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	2202      	movs	r2, #2
 8001602:	f000 fce7 	bl	8001fd4 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4640      	mov	r0, r8
 800160c:	4649      	mov	r1, r9
 800160e:	f7fe fe59 	bl	80002c4 <__adddf3>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f006 fa27 	bl	8007a6c <sqrt>
 800161e:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50


    if(dist > 300)
 8001622:	a375      	add	r3, pc, #468	; (adr r3, 80017f8 <_ZN13ControleurPID23_processErreursPolairesEv+0x2c0>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800162c:	f7ff fa90 	bl	8000b50 <__aeabi_dcmpgt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <_ZN13ControleurPID23_processErreursPolairesEv+0x108>
    {
        dist = 300;
 8001636:	a370      	add	r3, pc, #448	; (adr r3, 80017f8 <_ZN13ControleurPID23_processErreursPolairesEv+0x2c0>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    }
    if(dist > 100)
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	4b7c      	ldr	r3, [pc, #496]	; (8001838 <_ZN13ControleurPID23_processErreursPolairesEv+0x300>)
 8001646:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800164a:	f7ff fa81 	bl	8000b50 <__aeabi_dcmpgt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <_ZN13ControleurPID23_processErreursPolairesEv+0x12a>
    {
    	sum_erreur_polaire.dist = 0;
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    	Pcap = 10;
    }
    */


    distglob=dist;
 8001662:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001666:	f7ff fabb 	bl	8000be0 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	4a73      	ldr	r2, [pc, #460]	; (800183c <_ZN13ControleurPID23_processErreursPolairesEv+0x304>)
 800166e:	6013      	str	r3, [r2, #0]


    double terr = -odometrie->deltaAngleTo(theta, c_theta);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001678:	e9cd 2300 	strd	r2, r3, [sp]
 800167c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001680:	4608      	mov	r0, r1
 8001682:	f001 fd5f 	bl	8003144 <_ZNK9Odometrie12deltaAngleToEdd>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4611      	mov	r1, r2
 800168c:	6139      	str	r1, [r7, #16]
 800168e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001692:	617b      	str	r3, [r7, #20]
    double cap = -odometrie->deltaAngleTo(theta, atan2(c_y - y, c_x - x));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685e      	ldr	r6, [r3, #4]
 8001698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800169c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016a0:	f7fe fe0e 	bl	80002c0 <__aeabi_dsub>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4690      	mov	r8, r2
 80016aa:	4699      	mov	r9, r3
 80016ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016b4:	f7fe fe04 	bl	80002c0 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4640      	mov	r0, r8
 80016be:	4649      	mov	r1, r9
 80016c0:	f006 f96a 	bl	8007998 <atan2>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	e9cd 2300 	strd	r2, r3, [sp]
 80016cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016d0:	4630      	mov	r0, r6
 80016d2:	f001 fd37 	bl	8003144 <_ZNK9Odometrie12deltaAngleToEdd>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80016de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(objectif_is_rotation)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d033      	beq.n	8001756 <_ZN13ControleurPID23_processErreursPolairesEv+0x21e>
    {
        if(PauseLineForRotation)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d017      	beq.n	8001728 <_ZN13ControleurPID23_processErreursPolairesEv+0x1f0>
        {
            if(abs(cap) < ANGLE_MIN_ROTATION_SEULE) // ecriture pas opti mais plus lisible
 80016f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016fc:	f7ff fdf4 	bl	80012e8 <_ZSt3absd>
 8001700:	2301      	movs	r3, #1
 8001702:	461e      	mov	r6, r3
 8001704:	a33e      	add	r3, pc, #248	; (adr r3, 8001800 <_ZN13ControleurPID23_processErreursPolairesEv+0x2c8>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7ff fa03 	bl	8000b14 <__aeabi_dcmplt>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <_ZN13ControleurPID23_processErreursPolairesEv+0x1e0>
 8001714:	2300      	movs	r3, #0
 8001716:	461e      	mov	r6, r3
 8001718:	b2f3      	uxtb	r3, r6
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01b      	beq.n	8001756 <_ZN13ControleurPID23_processErreursPolairesEv+0x21e>
                PauseLineForRotation = false;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 8001726:	e016      	b.n	8001756 <_ZN13ControleurPID23_processErreursPolairesEv+0x21e>
        }
        else
        {
            if(abs(cap) > ANGLE_MAX_ROTATION_SEULE)
 8001728:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800172c:	f7ff fddc 	bl	80012e8 <_ZSt3absd>
 8001730:	2301      	movs	r3, #1
 8001732:	461e      	mov	r6, r3
 8001734:	a334      	add	r3, pc, #208	; (adr r3, 8001808 <_ZN13ControleurPID23_processErreursPolairesEv+0x2d0>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7ff fa09 	bl	8000b50 <__aeabi_dcmpgt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <_ZN13ControleurPID23_processErreursPolairesEv+0x210>
 8001744:	2300      	movs	r3, #0
 8001746:	461e      	mov	r6, r3
 8001748:	b2f3      	uxtb	r3, r6
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <_ZN13ControleurPID23_processErreursPolairesEv+0x21e>
                PauseLineForRotation = true;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        }
    }

    // Pour éviter que le robot cherche à se retourner lorsqu'une marche arrière est plus adaptée
    if(cap < - PI/2.0)
 8001756:	a32e      	add	r3, pc, #184	; (adr r3, 8001810 <_ZN13ControleurPID23_processErreursPolairesEv+0x2d8>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001760:	f7ff f9d8 	bl	8000b14 <__aeabi_dcmplt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d015      	beq.n	8001796 <_ZN13ControleurPID23_processErreursPolairesEv+0x25e>
    {
        cap += PI;
 800176a:	a32b      	add	r3, pc, #172	; (adr r3, 8001818 <_ZN13ControleurPID23_processErreursPolairesEv+0x2e0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001774:	f7fe fda6 	bl	80002c4 <__adddf3>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        dist *= -1.0;
 8001780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001786:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001790:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001794:	e01a      	b.n	80017cc <_ZN13ControleurPID23_processErreursPolairesEv+0x294>
    }
    else if(PI/2.0 < cap)
 8001796:	a322      	add	r3, pc, #136	; (adr r3, 8001820 <_ZN13ControleurPID23_processErreursPolairesEv+0x2e8>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017a0:	f7ff f9d6 	bl	8000b50 <__aeabi_dcmpgt>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d010      	beq.n	80017cc <_ZN13ControleurPID23_processErreursPolairesEv+0x294>
    {
        cap -= PI;
 80017aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001818 <_ZN13ControleurPID23_processErreursPolairesEv+0x2e0>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80017b4:	f7fe fd84 	bl	80002c0 <__aeabi_dsub>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        dist *= -1.0;
 80017c0:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 80017c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017c8:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
    }

    // Sauvegarde des erreurs calculées
    erreur_polaire.dist = dist;
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    erreur_polaire.cap = cap;
 80017d6:	68f9      	ldr	r1, [r7, #12]
 80017d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017dc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    erreur_polaire.terr = terr;
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017e6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 80017ea:	bf00      	nop
 80017ec:	375c      	adds	r7, #92	; 0x5c
 80017ee:	46bd      	mov	sp, r7
 80017f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017f4:	f3af 8000 	nop.w
 80017f8:	00000000 	.word	0x00000000
 80017fc:	4072c000 	.word	0x4072c000
 8001800:	f37bebd5 	.word	0xf37bebd5
 8001804:	3f9acee9 	.word	0x3f9acee9
 8001808:	382d7365 	.word	0x382d7365
 800180c:	3fd0c152 	.word	0x3fd0c152
 8001810:	54442d18 	.word	0x54442d18
 8001814:	bff921fb 	.word	0xbff921fb
 8001818:	54442d18 	.word	0x54442d18
 800181c:	400921fb 	.word	0x400921fb
 8001820:	54442d18 	.word	0x54442d18
 8001824:	3ff921fb 	.word	0x3ff921fb
 8001828:	200000d4 	.word	0x200000d4
 800182c:	200000d8 	.word	0x200000d8
 8001830:	200000dc 	.word	0x200000dc
 8001834:	200000e4 	.word	0x200000e4
 8001838:	40590000 	.word	0x40590000
 800183c:	200000e8 	.word	0x200000e8

08001840 <_ZN13ControleurPID16setObjectifLigneEdd>:

/**
 * @brief Ajoute un nouvel objectif qui écrase l'ancien. La méthode _processPID sera appelé pour corriger la distance et l'orientation vers l'objectif.
 */
void ControleurPID::setObjectifLigne(double x, double y)
{
 8001840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001844:	b089      	sub	sp, #36	; 0x24
 8001846:	af04      	add	r7, sp, #16
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	e9c7 2300 	strd	r2, r3, [r7]
    // Il ne s'agit pas d'une rotation seule
    objectif_is_rotation = false;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

    // Mise à jour de la nouvelle position de départ et du nouvel objectif
    objectif.setPosition(x, y, odometrie->getThetaRadian());
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f001 fc1f 	bl	80030a4 <_ZNK9Odometrie14getThetaRadianEv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800186e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001872:	e9cd 2300 	strd	r2, r3, [sp]
 8001876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187a:	4620      	mov	r0, r4
 800187c:	f000 fe50 	bl	8002520 <_ZN18EtatDynamiqueRobot11setPositionEddd>
    start.setPosition(odometrie->getX(), odometrie->getY(), odometrie->getThetaRadian());
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f503 7646 	add.w	r6, r3, #792	; 0x318
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fc1a 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 8001890:	4680      	mov	r8, r0
 8001892:	4689      	mov	r9, r1
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fc23 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 800189e:	4604      	mov	r4, r0
 80018a0:	460d      	mov	r5, r1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fbfc 	bl	80030a4 <_ZNK9Odometrie14getThetaRadianEv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b4:	e9cd 4500 	strd	r4, r5, [sp]
 80018b8:	4642      	mov	r2, r8
 80018ba:	464b      	mov	r3, r9
 80018bc:	4630      	mov	r0, r6
 80018be:	f000 fe2f 	bl	8002520 <_ZN18EtatDynamiqueRobot11setPositionEddd>
    
    targetdistglob = x;
 80018c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018c6:	f7ff f98b 	bl	8000be0 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <_ZN13ControleurPID16setObjectifLigneEdd+0x100>)
 80018ce:	6013      	str	r3, [r2, #0]


    objectif_atteint = false;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

    // Remise à zéro des valeurs qui dépendent des coups précédents de l'asser
    last_erreur_polaire.dist = 0;
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    last_erreur_polaire.cap = 0;
 80018e6:	68f9      	ldr	r1, [r7, #12]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    last_erreur_polaire.terr = 0;
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    sum_erreur_polaire.dist = 0;
 8001902:	68f9      	ldr	r1, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    sum_erreur_polaire.cap = 0;
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    sum_erreur_polaire.terr = 0;
 800191e:	68f9      	ldr	r1, [r7, #12]
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

    _OscCounter=0;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800193e:	bf00      	nop
 8001940:	200000e0 	.word	0x200000e0

08001944 <_ZN13ControleurPID19setObjectifRotationEd>:

/**
 * @brief Ajoute un nouvel objectif qui écrase l'ancien. La méthode _processPIDRotation sera appelé pour corriger la différence avec l'angle visé.
 */
void ControleurPID::setObjectifRotation(double theta)
{
 8001944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001948:	b089      	sub	sp, #36	; 0x24
 800194a:	af04      	add	r7, sp, #16
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	e9c7 2300 	strd	r2, r3, [r7]
    // Il s'agit d'une rotation seule
    objectif_is_rotation = true;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad

    // Mise à jour de la nouvelle position de départ et du nouvel objectif
    objectif.setPosition(odometrie->getX(), odometrie->getY(), theta);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f103 06b0 	add.w	r6, r3, #176	; 0xb0
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4618      	mov	r0, r3
 8001966:	f001 fbad 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 800196a:	4604      	mov	r4, r0
 800196c:	460d      	mov	r5, r1
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fbb6 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 8001978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800197c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001980:	e9cd 0100 	strd	r0, r1, [sp]
 8001984:	4622      	mov	r2, r4
 8001986:	462b      	mov	r3, r5
 8001988:	4630      	mov	r0, r6
 800198a:	f000 fdc9 	bl	8002520 <_ZN18EtatDynamiqueRobot11setPositionEddd>
    start.setPosition(odometrie->getX(), odometrie->getY(), odometrie->getThetaRadian());
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f503 7646 	add.w	r6, r3, #792	; 0x318
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f001 fb93 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 800199e:	4680      	mov	r8, r0
 80019a0:	4689      	mov	r9, r1
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f001 fb9c 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 80019ac:	4604      	mov	r4, r0
 80019ae:	460d      	mov	r5, r1
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fb75 	bl	80030a4 <_ZNK9Odometrie14getThetaRadianEv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019c2:	e9cd 4500 	strd	r4, r5, [sp]
 80019c6:	4642      	mov	r2, r8
 80019c8:	464b      	mov	r3, r9
 80019ca:	4630      	mov	r0, r6
 80019cc:	f000 fda8 	bl	8002520 <_ZN18EtatDynamiqueRobot11setPositionEddd>



    objectif_atteint = false;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

    // Remise à zéro des valeurs qui dépendent des coups précédents de l'asser
    last_erreur_polaire.dist = 0;
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    last_erreur_polaire.cap = 0;
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
    last_erreur_polaire.terr = 0;
 80019f4:	68f9      	ldr	r1, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    sum_erreur_polaire.dist = 0;
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    sum_erreur_polaire.cap = 0;
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    sum_erreur_polaire.terr = 0;
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

    PauseLineForRotation=0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae

    _OscCounter=0;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001a48 <_ZN13ControleurPID11_processPIDEv>:

/**
 * @brief Doit être appelé après la mise à jour de l'erreur polaire. Applique la correction P(ID) et en tire une consigne pour chaque moteur. Se charge également de vérifier les condition de réussite de l'objectif défini.
 */
void ControleurPID::_processPID()
{
 8001a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4c:	b08a      	sub	sp, #40	; 0x28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
    double target_dist = 0;
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double target_cap = 0;
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double dist = erreur_polaire.dist;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001a70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    distglob=dist;
 8001a74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a78:	f7ff f8b2 	bl	8000be0 <__aeabi_d2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a8c      	ldr	r2, [pc, #560]	; (8001cb0 <_ZN13ControleurPID11_processPIDEv+0x268>)
 8001a80:	6013      	str	r3, [r2, #0]
    
    double cap = erreur_polaire.cap;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001a88:	e9c7 2302 	strd	r2, r3, [r7, #8]
    angleglob=cap;
 8001a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a90:	f7ff f8a6 	bl	8000be0 <__aeabi_d2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <_ZN13ControleurPID11_processPIDEv+0x26c>)
 8001a98:	6013      	str	r3, [r2, #0]



    sum_erreur_polaire.dist += dist;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa4:	f7fe fc0e 	bl	80002c4 <__adddf3>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
    sum_erreur_polaire.cap += cap;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 8001ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001abc:	f7fe fc02 	bl	80002c4 <__adddf3>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

    /////////////////////////////////////////////////////////////
    // Application des coefficients
    target_dist = Pdist * dist 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ad0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ad4:	f7fe fdac 	bl	8000630 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	461d      	mov	r5, r3
                + Idist * sum_erreur_polaire.dist
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8001aec:	f7fe fda0 	bl	8000630 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7fe fbe4 	bl	80002c4 <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4690      	mov	r8, r2
 8001b02:	4699      	mov	r9, r3
                - Ddist * odometrie->getV();
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 faf8 	bl	8003104 <_ZNK9Odometrie4getVEv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fd88 	bl	8000630 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
    target_dist = Pdist * dist 
 8001b24:	4640      	mov	r0, r8
 8001b26:	4649      	mov	r1, r9
 8001b28:	f7fe fbca 	bl	80002c0 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	e9c7 2308 	strd	r2, r3, [r7, #32]
    
    target_cap = Pcap * cap 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b3e:	f7fe fd77 	bl	8000630 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
                + Icap * sum_erreur_polaire.cap
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001b56:	f7fe fd6b 	bl	8000630 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fbaf 	bl	80002c4 <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	4699      	mov	r9, r3
                - Dcap * odometrie->getVTheta();
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fad3 	bl	8003124 <_ZNK9Odometrie9getVThetaEv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fd53 	bl	8000630 <__aeabi_dmul>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
    target_cap = Pcap * cap 
 8001b8e:	4640      	mov	r0, r8
 8001b90:	4649      	mov	r1, r9
 8001b92:	f7fe fb95 	bl	80002c0 <__aeabi_dsub>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9c7 2306 	strd	r2, r3, [r7, #24]



    // Si le robot se trouve suffisament proche de l'objectif, 
    // il considère l'objectif comme atteint.
    if(abs(dist) < ERROR_MIN_DIST && abs(cap)< ERROR_MIN_ANGLE)
 8001b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba2:	f7ff fba1 	bl	80012e8 <_ZSt3absd>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <_ZN13ControleurPID11_processPIDEv+0x270>)
 8001bac:	f7fe ffb2 	bl	8000b14 <__aeabi_dcmplt>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <_ZN13ControleurPID11_processPIDEv+0x18a>
 8001bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bba:	f7ff fb95 	bl	80012e8 <_ZSt3absd>
 8001bbe:	a33a      	add	r3, pc, #232	; (adr r3, 8001ca8 <_ZN13ControleurPID11_processPIDEv+0x260>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe ffa6 	bl	8000b14 <__aeabi_dcmplt>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <_ZN13ControleurPID11_processPIDEv+0x18a>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <_ZN13ControleurPID11_processPIDEv+0x18c>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <_ZN13ControleurPID11_processPIDEv+0x198>
    {
        objectif_atteint = true;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

    */
    


    lastx = odometrie->getX();
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 fa6d 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f501 61b2 	add.w	r1, r1, #1424	; 0x590
 8001bf4:	e9c1 2300 	strd	r2, r3, [r1]
    lasty = odometrie->getY();
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f001 fa71 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 8001c0c:	e941 2302 	strd	r2, r3, [r1, #-8]
    

    /////////////////////////////////////////////////////////////
    // Mise à jour des consignes de vitesse pour les moteurs
    consigneG = target_dist + target_cap;
 8001c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c18:	f7fe fb54 	bl	80002c4 <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    consigneD = target_dist - target_cap;
 8001c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c2e:	f7fe fb47 	bl	80002c0 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    CorDist=target_dist;
 8001c3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c40:	f7fe ffce 	bl	8000be0 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <_ZN13ControleurPID11_processPIDEv+0x274>)
 8001c48:	6013      	str	r3, [r2, #0]
    CorAngle=target_cap;
 8001c4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c4e:	f7fe ffc7 	bl	8000be0 <__aeabi_d2f>
 8001c52:	4603      	mov	r3, r0
 8001c54:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <_ZN13ControleurPID11_processPIDEv+0x278>)
 8001c56:	6013      	str	r3, [r2, #0]

    CG=consigneG;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7fe ffbd 	bl	8000be0 <__aeabi_d2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <_ZN13ControleurPID11_processPIDEv+0x27c>)
 8001c6a:	6013      	str	r3, [r2, #0]
    CD=consigneD;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ffb3 	bl	8000be0 <__aeabi_d2f>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <_ZN13ControleurPID11_processPIDEv+0x280>)
 8001c7e:	6013      	str	r3, [r2, #0]

    



    _normalizeConsignes();
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8c9 	bl	8001e18 <_ZN13ControleurPID19_normalizeConsignesEv>

    /////////////////////////////////////////////////////////////
    // Sauvegarde de l'erreur polaire calculée pour le coup suivant
    last_erreur_polaire.dist = dist;
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c8c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    last_erreur_polaire.cap = cap;
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c96:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	; 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	47ae147b 	.word	0x47ae147b
 8001cac:	3f847ae1 	.word	0x3f847ae1
 8001cb0:	200000e8 	.word	0x200000e8
 8001cb4:	200000ec 	.word	0x200000ec
 8001cb8:	40100000 	.word	0x40100000
 8001cbc:	20000104 	.word	0x20000104
 8001cc0:	20000100 	.word	0x20000100
 8001cc4:	200000f0 	.word	0x200000f0
 8001cc8:	200000f4 	.word	0x200000f4
 8001ccc:	00000000 	.word	0x00000000

08001cd0 <_ZN13ControleurPID19_processPIDRotationEv>:
/**
 * @brief Doit être appelé après la mise à jour de l'erreur polaire. Applique la correction P(ID) et en tire une consigne pour chaque moteur. Se charge également de vérifier les condition de réussite de l'objectif défini.
 *         Ne tient compte que de l'erreur par rapport à l'angle visé (le robot reste donc plus ou moins sur place).
 */
void ControleurPID::_processPIDRotation()
{
 8001cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd4:	b087      	sub	sp, #28
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
    double target_cap = 0.0;
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    double terr = erreur_polaire.terr;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001cec:	e9c7 2302 	strd	r2, r3, [r7, #8]


    sum_erreur_polaire.terr += terr;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8001cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cfa:	f7fe fae3 	bl	80002c4 <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

    /////////////////////////////////////////////////////////////
    // Application des coefficients
    target_cap = Pangle * erreur_polaire.terr
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d14:	f7fe fc8c 	bl	8000630 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4690      	mov	r8, r2
 8001d1e:	4699      	mov	r9, r3
            + Iangle * sum_erreur_polaire.terr
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001d2c:	f7fe fc80 	bl	8000630 <__aeabi_dmul>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4640      	mov	r0, r8
 8001d36:	4649      	mov	r1, r9
 8001d38:	f7fe fac4 	bl	80002c4 <__adddf3>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4692      	mov	sl, r2
 8001d42:	469b      	mov	fp, r3
            - Dangle * odometrie->getVTheta();
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 f9e8 	bl	8003124 <_ZNK9Odometrie9getVThetaEv>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	f7fe fc68 	bl	8000630 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
    target_cap = Pangle * erreur_polaire.terr
 8001d64:	4650      	mov	r0, sl
 8001d66:	4659      	mov	r1, fp
 8001d68:	f7fe faaa 	bl	80002c0 <__aeabi_dsub>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /////////////////////////////////////////////////////////////
    // Si l'angle du robot est suffisament proche de l'angle visé, l'objectif est considéré comme étant atteint.
    if(abs(erreur_polaire.terr) < ERROR_MIN_ANGLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7ff fab3 	bl	80012e8 <_ZSt3absd>
 8001d82:	2301      	movs	r3, #1
 8001d84:	461e      	mov	r6, r3
 8001d86:	a320      	add	r3, pc, #128	; (adr r3, 8001e08 <_ZN13ControleurPID19_processPIDRotationEv+0x138>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fec2 	bl	8000b14 <__aeabi_dcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <_ZN13ControleurPID19_processPIDRotationEv+0xca>
 8001d96:	2300      	movs	r3, #0
 8001d98:	461e      	mov	r6, r3
 8001d9a:	b2f3      	uxtb	r3, r6
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <_ZN13ControleurPID19_processPIDRotationEv+0xd8>
    {
        objectif_atteint = true;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    }

    /////////////////////////////////////////////////////////////
    // Mise à jour des consignes de vitesse pour les moteurs
    consigneG = target_cap;
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dae:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    consigneD = - target_cap;
 8001db2:	693c      	ldr	r4, [r7, #16]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0





    CG=consigneG;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe ff09 	bl	8000be0 <__aeabi_d2f>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <_ZN13ControleurPID19_processPIDRotationEv+0x140>)
 8001dd2:	6013      	str	r3, [r2, #0]
    CD=consigneD;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe feff 	bl	8000be0 <__aeabi_d2f>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <_ZN13ControleurPID19_processPIDRotationEv+0x144>)
 8001de6:	6013      	str	r3, [r2, #0]


    _normalizeConsignes();
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f815 	bl	8001e18 <_ZN13ControleurPID19_normalizeConsignesEv>

    /////////////////////////////////////////////////////////////
    // Sauvegarde de l'erreur polaire calculée pour le coup suivant
    last_erreur_polaire.terr = terr;
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df4:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	47ae147b 	.word	0x47ae147b
 8001e0c:	3f847ae1 	.word	0x3f847ae1
 8001e10:	200000f0 	.word	0x200000f0
 8001e14:	200000f4 	.word	0x200000f4

08001e18 <_ZN13ControleurPID19_normalizeConsignesEv>:
/**
 * @brief S'assure de normaliser les consignes en fonction de la plus grande si elle dépasse 1. Le but est d'éviter de couper une
 *          partie de la différence entre les deux consignes si l'une au moins dépasse 1 (on parle ici des valeurs absolues).
 */
void ControleurPID::_normalizeConsignes()
{
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    if(abs(consigneG) > abs(consigneD))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7ff fa5d 	bl	80012e8 <_ZSt3absd>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	460d      	mov	r5, r1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7ff fa54 	bl	80012e8 <_ZSt3absd>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	2101      	movs	r1, #1
 8001e46:	460e      	mov	r6, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe fe80 	bl	8000b50 <__aeabi_dcmpgt>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <_ZN13ControleurPID19_normalizeConsignesEv+0x42>
 8001e56:	2300      	movs	r3, #0
 8001e58:	461e      	mov	r6, r3
 8001e5a:	b2f3      	uxtb	r3, r6
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d040      	beq.n	8001ee2 <_ZN13ControleurPID19_normalizeConsignesEv+0xca>
    {
        if(abs(consigneG) > 1.0)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7ff fa3d 	bl	80012e8 <_ZSt3absd>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	461c      	mov	r4, r3
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <_ZN13ControleurPID19_normalizeConsignesEv+0x154>)
 8001e78:	f7fe fe6a 	bl	8000b50 <__aeabi_dcmpgt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <_ZN13ControleurPID19_normalizeConsignesEv+0x6e>
 8001e82:	2300      	movs	r3, #0
 8001e84:	461c      	mov	r4, r3
 8001e86:	b2e3      	uxtb	r3, r4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d06a      	beq.n	8001f62 <_ZN13ControleurPID19_normalizeConsignesEv+0x14a>
        {
            consigneD = consigneD / abs(consigneG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7ff fa24 	bl	80012e8 <_ZSt3absd>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f7fe fcec 	bl	8000884 <__aeabi_ddiv>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
            consigneG = consigneG / abs(consigneG);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7ff fa0f 	bl	80012e8 <_ZSt3absd>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4620      	mov	r0, r4
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	f7fe fcd7 	bl	8000884 <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
        {
            consigneG = consigneG / abs(consigneD);
            consigneD = consigneD / abs(consigneD);
        }
    }
}
 8001ee0:	e03f      	b.n	8001f62 <_ZN13ControleurPID19_normalizeConsignesEv+0x14a>
        if(abs(consigneD) > 1.0)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7ff f9fc 	bl	80012e8 <_ZSt3absd>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	461c      	mov	r4, r3
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <_ZN13ControleurPID19_normalizeConsignesEv+0x154>)
 8001efa:	f7fe fe29 	bl	8000b50 <__aeabi_dcmpgt>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <_ZN13ControleurPID19_normalizeConsignesEv+0xf0>
 8001f04:	2300      	movs	r3, #0
 8001f06:	461c      	mov	r4, r3
 8001f08:	b2e3      	uxtb	r3, r4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d029      	beq.n	8001f62 <_ZN13ControleurPID19_normalizeConsignesEv+0x14a>
            consigneG = consigneG / abs(consigneD);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7ff f9e3 	bl	80012e8 <_ZSt3absd>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4620      	mov	r0, r4
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f7fe fcab 	bl	8000884 <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
            consigneD = consigneD / abs(consigneD);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7ff f9ce 	bl	80012e8 <_ZSt3absd>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe fc96 	bl	8000884 <__aeabi_ddiv>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	3ff00000 	.word	0x3ff00000

08001f70 <_ZN13ControleurPID15_applyConsignesEv>:
/**
 * @brief Doit être appelé après le calcul des consignes moteur. Envoi ces consignes au shield moteurs si l'objectif n'a pas été 
 *          marqué comme atteint.
 */
void ControleurPID::_applyConsignes()
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
    if(!objectif_atteint)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001f7e:	f083 0301 	eor.w	r3, r3, #1
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01c      	beq.n	8001fc2 <_ZN13ControleurPID15_applyConsignesEv+0x52>
    {
        // Au cas où les moteurs avait été arrêté avant
        moteurs->motors_on();
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff f981 	bl	8001294 <_ZN11BlocMoteurs9motors_onEv>
        // Les consignes en paramètre doivent êtres normalisées, autrement elles seront simplement coupées par la fonction
        moteurs->commande_vitesses(consigneG, consigneD);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681c      	ldr	r4, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe fe1e 	bl	8000be0 <__aeabi_d2f>
 8001fa4:	4605      	mov	r5, r0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7fe fe16 	bl	8000be0 <__aeabi_d2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4629      	mov	r1, r5
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f7ff f848 	bl	8001050 <_ZN11BlocMoteurs17commande_vitessesEff>
    else
    {

        moteurs->motors_stop();
    }
}
 8001fc0:	e004      	b.n	8001fcc <_ZN13ControleurPID15_applyConsignesEv+0x5c>
        moteurs->motors_stop();
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f970 	bl	80012ac <_ZN11BlocMoteurs11motors_stopEv>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}

08001fd4 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
      return pow(__type(__x), __type(__y));
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fabb 	bl	800055c <__aeabi_i2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fee:	f005 fcd5 	bl	800799c <pow>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
    }
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_ZN14DefileurTachesC1EP10FileTachesP13ControleurPIDP5Sonar>:
#include "DefileurTaches.h"



DefileurTaches::DefileurTaches(FileTaches *file_taches,  ControleurPID *controleur, Sonar* sonar)
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
{
    _file_taches = file_taches;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	601a      	str	r2, [r3, #0]
    _controleur = controleur;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	60da      	str	r2, [r3, #12]
    _sonar = sonar;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	605a      	str	r2, [r3, #4]
    sonarbool = false;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	721a      	strb	r2, [r3, #8]




    _current_tache.type = TacheType::VIDE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2204      	movs	r2, #4
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <_ZN14DefileurTaches6updateEv>:


bool DefileurTaches::update()
{
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b0be      	sub	sp, #248	; 0xf8
 800203c:	af08      	add	r7, sp, #32
 800203e:	6078      	str	r0, [r7, #4]
    switch(_current_tache.type)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
 8002044:	2b03      	cmp	r3, #3
 8002046:	f200 809a 	bhi.w	800217e <_ZN14DefileurTaches6updateEv+0x146>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <_ZN14DefileurTaches6updateEv+0x18>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	080020bf 	.word	0x080020bf
 8002054:	080020ff 	.word	0x080020ff
 8002058:	08002061 	.word	0x08002061
 800205c:	0800213f 	.word	0x0800213f
    {
        case(TacheType::WAIT):
            // update
            _current_tache.timer = max(_current_tache.timer - 1, 0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	3b01      	subs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	f107 020c 	add.w	r2, r7, #12
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f8f8 	bl	800226c <_ZSt3maxIiERKT_S2_S2_>
 800207c:	4603      	mov	r3, r0
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
            // transition
            if(_current_tache.timer <= 0)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	2b00      	cmp	r3, #0
 800208a:	f300 8090 	bgt.w	80021ae <_ZN14DefileurTaches6updateEv+0x176>
                transition(_file_taches->popTache());
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fc3c 	bl	8002916 <_ZN10FileTaches8popTacheEv>
 800209e:	466d      	mov	r5, sp
 80020a0:	f107 0418 	add.w	r4, r7, #24
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	cb0c      	ldmia	r3, {r2, r3}
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f892 	bl	80021e0 <_ZN14DefileurTaches10transitionE5Tache>
            break;
 80020bc:	e077      	b.n	80021ae <_ZN14DefileurTaches6updateEv+0x176>
        
        case(TacheType::LIGNE):
            if(_controleur->update()) // update
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f9f8 	bl	80014b8 <_ZN13ControleurPID6updateEv>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d071      	beq.n	80021b2 <_ZN14DefileurTaches6updateEv+0x17a>
            {
                // transition
                transition(_file_taches->popTache());
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fc1c 	bl	8002916 <_ZN10FileTaches8popTacheEv>
 80020de:	466d      	mov	r5, sp
 80020e0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80020f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f4:	cb0c      	ldmia	r3, {r2, r3}
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f872 	bl	80021e0 <_ZN14DefileurTaches10transitionE5Tache>
            }
            break;
 80020fc:	e059      	b.n	80021b2 <_ZN14DefileurTaches6updateEv+0x17a>
        case(TacheType::ROTATION):
            if(_controleur->update()) // update
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f9d8 	bl	80014b8 <_ZN13ControleurPID6updateEv>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d053      	beq.n	80021b6 <_ZN14DefileurTaches6updateEv+0x17e>
            {
                // transition
                transition(_file_taches->popTache());
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fbfc 	bl	8002916 <_ZN10FileTaches8popTacheEv>
 800211e:	466d      	mov	r5, sp
 8002120:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002128:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800212c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002134:	cb0c      	ldmia	r3, {r2, r3}
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f852 	bl	80021e0 <_ZN14DefileurTaches10transitionE5Tache>
            }
            break;
 800213c:	e03b      	b.n	80021b6 <_ZN14DefileurTaches6updateEv+0x17e>
        case(TacheType::SONAR):
        	_sonar->update();
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4618      	mov	r0, r3
 8002144:	f001 fd0e 	bl	8003b64 <_ZN5Sonar6updateEv>
        	sonarbool=true;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	721a      	strb	r2, [r3, #8]
                // transition
            transition(_file_taches->popTache());
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fbdc 	bl	8002916 <_ZN10FileTaches8popTacheEv>
 800215e:	466d      	mov	r5, sp
 8002160:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002168:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800216c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002170:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002174:	cb0c      	ldmia	r3, {r2, r3}
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f832 	bl	80021e0 <_ZN14DefileurTaches10transitionE5Tache>

            break;
 800217c:	e01c      	b.n	80021b8 <_ZN14DefileurTaches6updateEv+0x180>
        default:
        	transition(_file_taches->popTache());
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fbc4 	bl	8002916 <_ZN10FileTaches8popTacheEv>
 800218e:	466d      	mov	r5, sp
 8002190:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8002194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002198:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800219c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80021a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021a4:	cb0c      	ldmia	r3, {r2, r3}
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f81a 	bl	80021e0 <_ZN14DefileurTaches10transitionE5Tache>
        	break;
 80021ac:	e004      	b.n	80021b8 <_ZN14DefileurTaches6updateEv+0x180>
            break;
 80021ae:	bf00      	nop
 80021b0:	e002      	b.n	80021b8 <_ZN14DefileurTaches6updateEv+0x180>
            break;
 80021b2:	bf00      	nop
 80021b4:	e000      	b.n	80021b8 <_ZN14DefileurTaches6updateEv+0x180>
            break;
 80021b6:	bf00      	nop

    }

    return _file_taches->isDone() && sonarbool;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fc02 	bl	80029c6 <_ZN10FileTaches6isDoneEv>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <_ZN14DefileurTaches6updateEv+0x19c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7a1b      	ldrb	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <_ZN14DefileurTaches6updateEv+0x19c>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <_ZN14DefileurTaches6updateEv+0x19e>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	37d8      	adds	r7, #216	; 0xd8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	bf00      	nop

080021e0 <_ZN14DefileurTaches10transitionE5Tache>:

void DefileurTaches::transition(Tache new_tache)
{
 80021e0:	b082      	sub	sp, #8
 80021e2:	b5b0      	push	{r4, r5, r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	f107 0118 	add.w	r1, r7, #24
 80021ee:	e881 000c 	stmia.w	r1, {r2, r3}
    switch(new_tache.type)
 80021f2:	7e3b      	ldrb	r3, [r7, #24]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d824      	bhi.n	8002242 <_ZN14DefileurTaches10transitionE5Tache+0x62>
 80021f8:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <_ZN14DefileurTaches10transitionE5Tache+0x20>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002211 	.word	0x08002211
 8002204:	0800222d 	.word	0x0800222d
 8002208:	08002243 	.word	0x08002243
 800220c:	0800223d 	.word	0x0800223d
    {
        case TacheType::WAIT:
            // rien à faire
            break;
        case TacheType::LIGNE:
            _controleur->setObjectifLigne(new_tache.x, new_tache.y);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68dc      	ldr	r4, [r3, #12]
 8002214:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800221c:	e9cd 2300 	strd	r2, r3, [sp]
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fb0b 	bl	8001840 <_ZN13ControleurPID16setObjectifLigneEdd>
            break;
 800222a:	e00b      	b.n	8002244 <_ZN14DefileurTaches10transitionE5Tache+0x64>
        case TacheType::ROTATION:
            _controleur->setObjectifRotation(new_tache.theta);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68d9      	ldr	r1, [r3, #12]
 8002230:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002234:	4608      	mov	r0, r1
 8002236:	f7ff fb85 	bl	8001944 <_ZN13ControleurPID19setObjectifRotationEd>
            break;
 800223a:	e003      	b.n	8002244 <_ZN14DefileurTaches10transitionE5Tache+0x64>
        case TacheType::SONAR:
        	sonarbool=false;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	721a      	strb	r2, [r3, #8]
        default :
            break;
 8002242:	bf00      	nop

    }

    _current_tache = new_tache;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0418 	add.w	r4, r3, #24
 800224a:	f107 0518 	add.w	r5, r7, #24
 800224e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	e895 0003 	ldmia.w	r5, {r0, r1}
 800225a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002268:	b002      	add	sp, #8
 800226a:	4770      	bx	lr

0800226c <_ZSt3maxIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	da01      	bge.n	8002286 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	e000      	b.n	8002288 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8002286:	687b      	ldr	r3, [r7, #4]
    }
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	0000      	movs	r0, r0
 8002294:	0000      	movs	r0, r0
	...

08002298 <_ZN18EtatDynamiqueRobotC1Eddd>:
#include "EtatDynamiqueRobot.h"

EtatDynamiqueRobot::EtatDynamiqueRobot(double x, double y, double theta) : x(x), y(y), theta(theta)
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	e9c7 2300 	strd	r2, r3, [r7]
 80022a4:	68f9      	ldr	r1, [r7, #12]
 80022a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022aa:	e9c1 2300 	strd	r2, r3, [r1]
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80022b8:	68f9      	ldr	r1, [r7, #12]
 80022ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022be:	e9c1 2304 	strd	r2, r3, [r1, #16]
{
    // On s'assure que les angles soient bien dans ]-PI, PI]
    while(theta <= - PI) { theta += 2.0 * PI; }
 80022c2:	a339      	add	r3, pc, #228	; (adr r3, 80023a8 <_ZN18EtatDynamiqueRobotC1Eddd+0x110>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022cc:	f7fe fc2c 	bl	8000b28 <__aeabi_dcmple>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d100      	bne.n	80022d8 <_ZN18EtatDynamiqueRobotC1Eddd+0x40>
 80022d6:	e00b      	b.n	80022f0 <_ZN18EtatDynamiqueRobotC1Eddd+0x58>
 80022d8:	a335      	add	r3, pc, #212	; (adr r3, 80023b0 <_ZN18EtatDynamiqueRobotC1Eddd+0x118>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022e2:	f7fd ffef 	bl	80002c4 <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80022ee:	e7e8      	b.n	80022c2 <_ZN18EtatDynamiqueRobotC1Eddd+0x2a>
    while(theta > PI) { theta -= 2.0 * PI; }
 80022f0:	a331      	add	r3, pc, #196	; (adr r3, 80023b8 <_ZN18EtatDynamiqueRobotC1Eddd+0x120>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022fa:	f7fe fc29 	bl	8000b50 <__aeabi_dcmpgt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00b      	beq.n	800231c <_ZN18EtatDynamiqueRobotC1Eddd+0x84>
 8002304:	a32a      	add	r3, pc, #168	; (adr r3, 80023b0 <_ZN18EtatDynamiqueRobotC1Eddd+0x118>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800230e:	f7fd ffd7 	bl	80002c0 <__aeabi_dsub>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800231a:	e7e9      	b.n	80022f0 <_ZN18EtatDynamiqueRobotC1Eddd+0x58>

    v_xy = 0;
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9c1 2306 	strd	r2, r3, [r1, #24]
    v_theta = 0;
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c1 2308 	strd	r2, r3, [r1, #32]

    for(int i = 0; i < MEAN_SAMPLES; i++)
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b22      	cmp	r3, #34	; 0x22
 8002340:	dc19      	bgt.n	8002376 <_ZN18EtatDynamiqueRobotC1Eddd+0xde>
    {
        v_moteurG[i] = 0.0;
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3305      	adds	r3, #5
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	18d1      	adds	r1, r2, r3
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	e9c1 2300 	strd	r2, r3, [r1]
        v_moteurD[i] = 0.0;
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3329      	adds	r3, #41	; 0x29
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	18d1      	adds	r1, r2, r3
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
    for(int i = 0; i < MEAN_SAMPLES; i++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e7e2      	b.n	800233c <_ZN18EtatDynamiqueRobotC1Eddd+0xa4>
    }

    c_v_moteurG = 0;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    c_v_moteurD = 0;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260

    last_dt = 1000*Time;
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <_ZN18EtatDynamiqueRobotC1Eddd+0x128>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
}
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	f3af 8000 	nop.w
 80023a8:	54442d18 	.word	0x54442d18
 80023ac:	c00921fb 	.word	0xc00921fb
 80023b0:	54442d18 	.word	0x54442d18
 80023b4:	401921fb 	.word	0x401921fb
 80023b8:	54442d18 	.word	0x54442d18
 80023bc:	400921fb 	.word	0x400921fb
 80023c0:	200000cc 	.word	0x200000cc
 80023c4:	00000000 	.word	0x00000000

080023c8 <_ZN18EtatDynamiqueRobot12versPositionEdddi>:

void EtatDynamiqueRobot::versPosition(double n_x, double n_y, double n_theta, int dt)
{
 80023c8:	b5b0      	push	{r4, r5, r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	e9c7 2300 	strd	r2, r3, [r7]
    // On s'assure que les angles soient bien dans ]-PI, PI]
    while(n_theta <= - PI) { n_theta += 2.0 * PI; }
 80023d4:	a34c      	add	r3, pc, #304	; (adr r3, 8002508 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x140>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023de:	f7fe fba3 	bl	8000b28 <__aeabi_dcmple>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d100      	bne.n	80023ea <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x22>
 80023e8:	e00b      	b.n	8002402 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x3a>
 80023ea:	a349      	add	r3, pc, #292	; (adr r3, 8002510 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x148>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023f4:	f7fd ff66 	bl	80002c4 <__adddf3>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002400:	e7e8      	b.n	80023d4 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0xc>
    while(n_theta > PI) { n_theta -= 2.0 * PI; }
 8002402:	a345      	add	r3, pc, #276	; (adr r3, 8002518 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x150>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800240c:	f7fe fba0 	bl	8000b50 <__aeabi_dcmpgt>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x66>
 8002416:	a33e      	add	r3, pc, #248	; (adr r3, 8002510 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x148>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002420:	f7fd ff4e 	bl	80002c0 <__aeabi_dsub>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800242c:	e7e9      	b.n	8002402 <_ZN18EtatDynamiqueRobot12versPositionEdddi+0x3a>

    v_xy = sqrt( pow(n_x - x, 2) + pow(n_y - y, 2)) / dt;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002438:	f7fd ff42 	bl	80002c0 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	2202      	movs	r2, #2
 8002446:	f7ff fdc5 	bl	8001fd4 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800244a:	4604      	mov	r4, r0
 800244c:	460d      	mov	r5, r1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002454:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002458:	f7fd ff32 	bl	80002c0 <__aeabi_dsub>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	2202      	movs	r2, #2
 8002466:	f7ff fdb5 	bl	8001fd4 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fd ff27 	bl	80002c4 <__adddf3>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f005 faf5 	bl	8007a6c <sqrt>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002488:	f7fe f868 	bl	800055c <__aeabi_i2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f9f6 	bl	8000884 <__aeabi_ddiv>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    v_theta = (n_theta - theta) / dt;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80024a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ac:	f7fd ff08 	bl	80002c0 <__aeabi_dsub>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4614      	mov	r4, r2
 80024b6:	461d      	mov	r5, r3
 80024b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ba:	f7fe f84f 	bl	800055c <__aeabi_i2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4620      	mov	r0, r4
 80024c4:	4629      	mov	r1, r5
 80024c6:	f7fe f9dd 	bl	8000884 <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	68f9      	ldr	r1, [r7, #12]
 80024d0:	e9c1 2308 	strd	r2, r3, [r1, #32]

    x = n_x;
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024da:	e9c1 2300 	strd	r2, r3, [r1]
    y = n_y;
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    theta = n_theta;
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024ee:	e9c1 2304 	strd	r2, r3, [r1, #16]

    last_dt = dt;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdb0      	pop	{r4, r5, r7, pc}
 8002502:	bf00      	nop
 8002504:	f3af 8000 	nop.w
 8002508:	54442d18 	.word	0x54442d18
 800250c:	c00921fb 	.word	0xc00921fb
 8002510:	54442d18 	.word	0x54442d18
 8002514:	401921fb 	.word	0x401921fb
 8002518:	54442d18 	.word	0x54442d18
 800251c:	400921fb 	.word	0x400921fb

08002520 <_ZN18EtatDynamiqueRobot11setPositionEddd>:

void EtatDynamiqueRobot::setPosition(double n_x, double n_y, double n_theta)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	e9c7 2300 	strd	r2, r3, [r7]
    // On s'assure que les angles soient bien dans ]-PI, PI]
    while(n_theta <= - PI) { n_theta += 2.0 * PI; }
 800252c:	a348      	add	r3, pc, #288	; (adr r3, 8002650 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x130>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002536:	f7fe faf7 	bl	8000b28 <__aeabi_dcmple>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d100      	bne.n	8002542 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x22>
 8002540:	e00b      	b.n	800255a <_ZN18EtatDynamiqueRobot11setPositionEddd+0x3a>
 8002542:	a345      	add	r3, pc, #276	; (adr r3, 8002658 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x138>)
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800254c:	f7fd feba 	bl	80002c4 <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002558:	e7e8      	b.n	800252c <_ZN18EtatDynamiqueRobot11setPositionEddd+0xc>
    while(n_theta > PI) { n_theta -= 2.0 * PI; }
 800255a:	a341      	add	r3, pc, #260	; (adr r3, 8002660 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x140>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002564:	f7fe faf4 	bl	8000b50 <__aeabi_dcmpgt>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x66>
 800256e:	a33a      	add	r3, pc, #232	; (adr r3, 8002658 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x138>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002578:	f7fd fea2 	bl	80002c0 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002584:	e7e9      	b.n	800255a <_ZN18EtatDynamiqueRobot11setPositionEddd+0x3a>

    x = n_x;
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800258c:	e9c1 2300 	strd	r2, r3, [r1]
    y = n_y;
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002596:	e9c1 2302 	strd	r2, r3, [r1, #8]
    theta = n_theta;
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025a0:	e9c1 2304 	strd	r2, r3, [r1, #16]

    v_xy = 0;
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
    v_theta = 0;
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9c1 2308 	strd	r2, r3, [r1, #32]

    v_moteurG[c_v_moteurG] = 0;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	3305      	adds	r3, #5
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	18d1      	adds	r1, r2, r3
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9c1 2300 	strd	r2, r3, [r1]
    v_moteurD[c_v_moteurD] = 0;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	3329      	adds	r3, #41	; 0x29
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	18d1      	adds	r1, r2, r3
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 2300 	strd	r2, r3, [r1]
    c_v_moteurG = (c_v_moteurG + 1) % MEAN_SAMPLES;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x148>)
 80025fe:	fb83 1302 	smull	r1, r3, r3, r2
 8002602:	4413      	add	r3, r2
 8002604:	1159      	asrs	r1, r3, #5
 8002606:	17d3      	asrs	r3, r2, #31
 8002608:	1ac9      	subs	r1, r1, r3
 800260a:	460b      	mov	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	00d9      	lsls	r1, r3, #3
 8002612:	1ac9      	subs	r1, r1, r3
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
    c_v_moteurD = (c_v_moteurD + 1) % MEAN_SAMPLES;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_ZN18EtatDynamiqueRobot11setPositionEddd+0x148>)
 8002626:	fb83 1302 	smull	r1, r3, r3, r2
 800262a:	4413      	add	r3, r2
 800262c:	1159      	asrs	r1, r3, #5
 800262e:	17d3      	asrs	r3, r2, #31
 8002630:	1ac9      	subs	r1, r1, r3
 8002632:	460b      	mov	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	00d9      	lsls	r1, r3, #3
 800263a:	1ac9      	subs	r1, r1, r3
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f3af 8000 	nop.w
 8002650:	54442d18 	.word	0x54442d18
 8002654:	c00921fb 	.word	0xc00921fb
 8002658:	54442d18 	.word	0x54442d18
 800265c:	401921fb 	.word	0x401921fb
 8002660:	54442d18 	.word	0x54442d18
 8002664:	400921fb 	.word	0x400921fb
 8002668:	ea0ea0eb 	.word	0xea0ea0eb

0800266c <_ZN18EtatDynamiqueRobot6setVMGEd>:
    y = n_y;
    theta = n_theta;
}

void EtatDynamiqueRobot::setVMG(double vm)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	e9c7 2300 	strd	r2, r3, [r7]
    v_moteurG[c_v_moteurG] = vm;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	3305      	adds	r3, #5
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	18d1      	adds	r1, r2, r3
 8002686:	e9d7 2300 	ldrd	r2, r3, [r7]
 800268a:	e9c1 2300 	strd	r2, r3, [r1]
    c_v_moteurG = (c_v_moteurG + 1) % MEAN_SAMPLES;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <_ZN18EtatDynamiqueRobot6setVMGEd+0x54>)
 8002698:	fb83 1302 	smull	r1, r3, r3, r2
 800269c:	4413      	add	r3, r2
 800269e:	1159      	asrs	r1, r3, #5
 80026a0:	17d3      	asrs	r3, r2, #31
 80026a2:	1ac9      	subs	r1, r1, r3
 80026a4:	460b      	mov	r3, r1
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	00d9      	lsls	r1, r3, #3
 80026ac:	1ac9      	subs	r1, r1, r3
 80026ae:	1a51      	subs	r1, r2, r1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	ea0ea0eb 	.word	0xea0ea0eb

080026c4 <_ZN18EtatDynamiqueRobot6setVMDEd>:

void EtatDynamiqueRobot::setVMD(double vm)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	e9c7 2300 	strd	r2, r3, [r7]
    v_moteurD[c_v_moteurD] = vm;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	3329      	adds	r3, #41	; 0x29
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	18d1      	adds	r1, r2, r3
 80026de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026e2:	e9c1 2300 	strd	r2, r3, [r1]
    c_v_moteurD = (c_v_moteurD + 1) % MEAN_SAMPLES;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <_ZN18EtatDynamiqueRobot6setVMDEd+0x54>)
 80026f0:	fb83 1302 	smull	r1, r3, r3, r2
 80026f4:	4413      	add	r3, r2
 80026f6:	1159      	asrs	r1, r3, #5
 80026f8:	17d3      	asrs	r3, r2, #31
 80026fa:	1ac9      	subs	r1, r1, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	00d9      	lsls	r1, r3, #3
 8002704:	1ac9      	subs	r1, r1, r3
 8002706:	1a51      	subs	r1, r2, r1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	ea0ea0eb 	.word	0xea0ea0eb
 800271c:	00000000 	.word	0x00000000

08002720 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd>:

/**
 * @brief Calcul l'angle le plus petit pour atteindre la cible depuis l'angle initial. Le résultat est garanti dans ]-PI, PI].
 */
double EtatDynamiqueRobot::deltaAngleTo(double initial, double target) const
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	e9c7 2300 	strd	r2, r3, [r7]
    // On s'assure que les angles soient bien dans ]-PI, PI]
    while(initial <= - PI) { initial += 2.0 * PI; }
 800272c:	a34a      	add	r3, pc, #296	; (adr r3, 8002858 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x138>)
 800272e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002732:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002736:	f7fe f9f7 	bl	8000b28 <__aeabi_dcmple>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d100      	bne.n	8002742 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x22>
 8002740:	e00b      	b.n	800275a <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x3a>
 8002742:	a347      	add	r3, pc, #284	; (adr r3, 8002860 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x140>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800274c:	f7fd fdba 	bl	80002c4 <__adddf3>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	e9c7 2300 	strd	r2, r3, [r7]
 8002758:	e7e8      	b.n	800272c <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0xc>
    while(initial > PI) { initial -= 2.0 * PI; }
 800275a:	a343      	add	r3, pc, #268	; (adr r3, 8002868 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x148>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002764:	f7fe f9f4 	bl	8000b50 <__aeabi_dcmpgt>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d100      	bne.n	8002770 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x50>
 800276e:	e00b      	b.n	8002788 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x68>
 8002770:	a33b      	add	r3, pc, #236	; (adr r3, 8002860 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x140>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	e9d7 0100 	ldrd	r0, r1, [r7]
 800277a:	f7fd fda1 	bl	80002c0 <__aeabi_dsub>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	e9c7 2300 	strd	r2, r3, [r7]
 8002786:	e7e8      	b.n	800275a <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x3a>

    while(target <= - PI) { target += 2.0 * PI; }
 8002788:	a333      	add	r3, pc, #204	; (adr r3, 8002858 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x138>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002792:	f7fe f9c9 	bl	8000b28 <__aeabi_dcmple>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d100      	bne.n	800279e <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x7e>
 800279c:	e00b      	b.n	80027b6 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x96>
 800279e:	a330      	add	r3, pc, #192	; (adr r3, 8002860 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x140>)
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027a8:	f7fd fd8c 	bl	80002c4 <__adddf3>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80027b4:	e7e8      	b.n	8002788 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x68>
    while(target > PI) { target -= 2.0 * PI; }
 80027b6:	a32c      	add	r3, pc, #176	; (adr r3, 8002868 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x148>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027c0:	f7fe f9c6 	bl	8000b50 <__aeabi_dcmpgt>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0xc2>
 80027ca:	a325      	add	r3, pc, #148	; (adr r3, 8002860 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x140>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027d4:	f7fd fd74 	bl	80002c0 <__aeabi_dsub>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80027e0:	e7e9      	b.n	80027b6 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x96>

    // Chemin naïf vers l'objectif
    double delta = (target - initial);
 80027e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027ea:	f7fd fd69 	bl	80002c0 <__aeabi_dsub>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    // Dans le cas ou il serait plus simple de partir dans l'autre sens
    if(delta <= -PI)
 80027f6:	a318      	add	r3, pc, #96	; (adr r3, 8002858 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x138>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002800:	f7fe f992 	bl	8000b28 <__aeabi_dcmple>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x100>
        delta += 2.0 * PI;
 800280a:	a315      	add	r3, pc, #84	; (adr r3, 8002860 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x140>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002814:	f7fd fd56 	bl	80002c4 <__adddf3>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(delta > PI)
 8002820:	a311      	add	r3, pc, #68	; (adr r3, 8002868 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x148>)
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800282a:	f7fe f991 	bl	8000b50 <__aeabi_dcmpgt>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x12a>
        delta -= 2.0 * PI;
 8002834:	a30a      	add	r3, pc, #40	; (adr r3, 8002860 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd+0x140>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800283e:	f7fd fd3f 	bl	80002c0 <__aeabi_dsub>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return delta;
 800284a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    
}
 800284e:	4610      	mov	r0, r2
 8002850:	4619      	mov	r1, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	54442d18 	.word	0x54442d18
 800285c:	c00921fb 	.word	0xc00921fb
 8002860:	54442d18 	.word	0x54442d18
 8002864:	401921fb 	.word	0x401921fb
 8002868:	54442d18 	.word	0x54442d18
 800286c:	400921fb 	.word	0x400921fb

08002870 <_ZNK18EtatDynamiqueRobot14getThetaRadianEv>:

double EtatDynamiqueRobot::getThetaRadian() const
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    return theta;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
}
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <_ZNK18EtatDynamiqueRobot4getXEv>:

double EtatDynamiqueRobot::getX() const
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
    return x;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <_ZNK18EtatDynamiqueRobot4getYEv>:

double EtatDynamiqueRobot::getY() const
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
    return y;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
}
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <_ZNK18EtatDynamiqueRobot4getVEv>:

double EtatDynamiqueRobot::getV() const
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
    return v_xy;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <_ZNK18EtatDynamiqueRobot9getVThetaEv>:

double EtatDynamiqueRobot::getVTheta() const
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    return v_theta;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
}
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <_ZN10FileTachesC1Ev>:
#include "FileTaches.h"

FileTaches::FileTaches()
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
{
    curseur_taches = 0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80
    nb_taches = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
}
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <_ZN10FileTaches8popTacheEv>:
        nb_taches = min(nb_taches + 1, MAX_TACHES);
    }
}

Tache FileTaches::popTache()
{
 8002916:	b5b0      	push	{r4, r5, r7, lr}
 8002918:	b08e      	sub	sp, #56	; 0x38
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
    if(nb_taches > 0 && curseur_taches < nb_taches) // S'il y a au moins une tache
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
 8002926:	2b00      	cmp	r3, #0
 8002928:	dd3b      	ble.n	80029a2 <_ZN10FileTaches8popTacheEv+0x8c>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	f8d3 2c80 	ldr.w	r2, [r3, #3200]	; 0xc80
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
 8002936:	429a      	cmp	r2, r3
 8002938:	da33      	bge.n	80029a2 <_ZN10FileTaches8popTacheEv+0x8c>
    {
        Tache tache = taches[curseur_taches];
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f8d3 2c80 	ldr.w	r2, [r3, #3200]	; 0xc80
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	f107 0408 	add.w	r4, r7, #8
 8002950:	461d      	mov	r5, r3
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800295a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800295e:	e884 0003 	stmia.w	r4, {r0, r1}

        curseur_taches = min(curseur_taches + 1, nb_taches);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f8d3 3c80 	ldr.w	r3, [r3, #3200]	; 0xc80
 8002968:	3301      	adds	r3, #1
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f603 4284 	addw	r2, r3, #3204	; 0xc84
 8002972:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f838 	bl	80029ee <_ZSt3minIiERKT_S2_S2_>
 800297e:	4603      	mov	r3, r0
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f8c3 2c80 	str.w	r2, [r3, #3200]	; 0xc80

        return tache;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	461d      	mov	r5, r3
 800298c:	f107 0408 	add.w	r4, r7, #8
 8002990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002998:	e894 0003 	ldmia.w	r4, {r0, r1}
 800299c:	e885 0003 	stmia.w	r5, {r0, r1}
    {
        Tache tache_vide;
        tache_vide.type = TacheType::VIDE;
        return tache_vide;
    }
}
 80029a0:	e00d      	b.n	80029be <_ZN10FileTaches8popTacheEv+0xa8>
        tache_vide.type = TacheType::VIDE;
 80029a2:	2304      	movs	r3, #4
 80029a4:	723b      	strb	r3, [r7, #8]
        return tache_vide;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	461d      	mov	r5, r3
 80029aa:	f107 0408 	add.w	r4, r7, #8
 80029ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	3738      	adds	r7, #56	; 0x38
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}

080029c6 <_ZN10FileTaches6isDoneEv>:
{
    curseur_taches = 0;
}

bool FileTaches::isDone()
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
    return curseur_taches == nb_taches;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 2c80 	ldr.w	r2, [r3, #3200]	; 0xc80
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	da01      	bge.n	8002a08 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	e000      	b.n	8002a0a <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 8002a08:	687b      	ldr	r3, [r7, #4]
    }
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <_ZN13HardEncodeursC1Ev>:

extern int TICKG;
extern int TICKD;


HardEncodeurs::HardEncodeurs()
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
{
    _lastTicksG = 0;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    _lastTicksD = 0;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]

    _sumTicksG = 0;
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9c1 2302 	strd	r2, r3, [r1, #8]
    _sumTicksD = 0;
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9c1 2304 	strd	r2, r3, [r1, #16]



    // Pour activer les channels 1 et 2 de chaque timer (chacune reliée à un pin du signal de l'encodeur)

}
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <_ZN13HardEncodeurs19_processDeltaTicksGEv>:

int64_t HardEncodeurs::_processDeltaTicksG()
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    uint32_t ticksG = __HAL_TIM_GET_COUNTER(&htim4); // obtention du compteur (registre CNT) du timer
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <_ZN13HardEncodeurs19_processDeltaTicksGEv+0x58>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	617b      	str	r3, [r7, #20]
    TICKG=ticksG;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <_ZN13HardEncodeurs19_processDeltaTicksGEv+0x5c>)
 8002a64:	6013      	str	r3, [r2, #0]
    // (comme les timers sont configurés comme des encodeurs, ce compteur est tenu à jour indépendamment du CPU de la stm32)
    
    // calcul du delta en prenant en compte au mieux les overflow du timer
    int64_t delta = _processDelta(ticksG, _lastTicksG);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f84c 	bl	8002b10 <_ZN13HardEncodeurs13_processDeltaEtt>
 8002a78:	e9c7 0102 	strd	r0, r1, [r7, #8]

    _lastTicksG = ticksG;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	601a      	str	r2, [r3, #0]
    _sumTicksG += delta;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8c:	1884      	adds	r4, r0, r2
 8002a8e:	eb41 0503 	adc.w	r5, r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	e9c3 4502 	strd	r4, r5, [r3, #8]

    return delta;
 8002a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000250 	.word	0x20000250
 8002aac:	200000f8 	.word	0x200000f8

08002ab0 <_ZN13HardEncodeurs19_processDeltaTicksDEv>:

int64_t HardEncodeurs::_processDeltaTicksD()
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    uint32_t ticksD = __HAL_TIM_GET_COUNTER(&htim3); // obtention du compteur (registre CNT) du timer
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <_ZN13HardEncodeurs19_processDeltaTicksDEv+0x58>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	617b      	str	r3, [r7, #20]
    TICKD=ticksD;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <_ZN13HardEncodeurs19_processDeltaTicksDEv+0x5c>)
 8002ac4:	6013      	str	r3, [r2, #0]
    // (comme les timers sont configurés comme des encodeurs, ce compteur est tenu à jour indépendamment du CPU de la stm32)
    
    // calcul du delta en prenant en compte au mieux les overflow du timer
    int64_t delta = _processDelta(ticksD, _lastTicksD);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	b299      	uxth	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f81c 	bl	8002b10 <_ZN13HardEncodeurs13_processDeltaEtt>
 8002ad8:	e9c7 0102 	strd	r0, r1, [r7, #8]

    _lastTicksD = ticksD;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	605a      	str	r2, [r3, #4]
    _sumTicksD += delta;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	1884      	adds	r4, r0, r2
 8002aee:	eb41 0503 	adc.w	r5, r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	e9c3 4504 	strd	r4, r5, [r3, #16]

    return delta;
 8002af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000208 	.word	0x20000208
 8002b0c:	200000fc 	.word	0x200000fc

08002b10 <_ZN13HardEncodeurs13_processDeltaEtt>:

int64_t HardEncodeurs::_processDelta(uint16_t ticks, uint16_t lastTicks)
{
 8002b10:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b14:	b08b      	sub	sp, #44	; 0x2c
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	61f8      	str	r0, [r7, #28]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	837b      	strh	r3, [r7, #26]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	833b      	strh	r3, [r7, #24]
    int64_t delta = 0;
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    
    // On détecte du mieux que l'on peut les problèmes d'overflow du compteur CNT
    if(ticks < 0x0FFF && lastTicks > 0x8FFF) // CNT a surement overflow à droite
 8002b2e:	8b7b      	ldrh	r3, [r7, #26]
 8002b30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d812      	bhi.n	8002b5e <_ZN13HardEncodeurs13_processDeltaEtt+0x4e>
 8002b38:	8b3b      	ldrh	r3, [r7, #24]
 8002b3a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002b3e:	d30e      	bcc.n	8002b5e <_ZN13HardEncodeurs13_processDeltaEtt+0x4e>
    {
        delta = (int64_t) ( (0xFFFF - lastTicks) + ticks + 1);
 8002b40:	8b3b      	ldrh	r3, [r7, #24]
 8002b42:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002b46:	33ff      	adds	r3, #255	; 0xff
 8002b48:	8b7a      	ldrh	r2, [r7, #26]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	17da      	asrs	r2, r3, #31
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	617a      	str	r2, [r7, #20]
 8002b54:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b58:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002b5c:	e030      	b.n	8002bc0 <_ZN13HardEncodeurs13_processDeltaEtt+0xb0>
    }
    else if(ticks > 0x8FFF && lastTicks < 0x0FFF) // CNT a surement overflow à gauche
 8002b5e:	8b7b      	ldrh	r3, [r7, #26]
 8002b60:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002b64:	d31a      	bcc.n	8002b9c <_ZN13HardEncodeurs13_processDeltaEtt+0x8c>
 8002b66:	8b3b      	ldrh	r3, [r7, #24]
 8002b68:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d815      	bhi.n	8002b9c <_ZN13HardEncodeurs13_processDeltaEtt+0x8c>
    {
        delta = - (int64_t) ( (0xFFFF - ticks) + lastTicks + 1);
 8002b70:	8b7b      	ldrh	r3, [r7, #26]
 8002b72:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002b76:	33ff      	adds	r3, #255	; 0xff
 8002b78:	8b3a      	ldrh	r2, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	17da      	asrs	r2, r3, #31
 8002b80:	469a      	mov	sl, r3
 8002b82:	4693      	mov	fp, r2
 8002b84:	2300      	movs	r3, #0
 8002b86:	f1da 0200 	rsbs	r2, sl, #0
 8002b8a:	60ba      	str	r2, [r7, #8]
 8002b8c:	eb63 030b 	sbc.w	r3, r3, fp
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b96:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8002b9a:	e011      	b.n	8002bc0 <_ZN13HardEncodeurs13_processDeltaEtt+0xb0>
    }
    else
    {
        delta = ((int64_t) ticks) - ((int64_t) lastTicks);
 8002b9c:	8b7b      	ldrh	r3, [r7, #26]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4698      	mov	r8, r3
 8002ba2:	4691      	mov	r9, r2
 8002ba4:	8b3b      	ldrh	r3, [r7, #24]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	461c      	mov	r4, r3
 8002baa:	4615      	mov	r5, r2
 8002bac:	ebb8 0304 	subs.w	r3, r8, r4
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	eb69 0305 	sbc.w	r3, r9, r5
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002bbc:	e9c7 3408 	strd	r3, r4, [r7, #32]
    }

    return delta;
 8002bc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	372c      	adds	r7, #44	; 0x2c
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bd0:	4770      	bx	lr

08002bd2 <_ZN13HardEncodeurs14getDeltaTicksGEv>:

int64_t HardEncodeurs::getDeltaTicksG()
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
    return _processDeltaTicksG();
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ff38 	bl	8002a50 <_ZN13HardEncodeurs19_processDeltaTicksGEv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
}
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_ZN13HardEncodeurs14getDeltaTicksDEv>:

int64_t HardEncodeurs::getDeltaTicksD()
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
    return _processDeltaTicksD();
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff5a 	bl	8002ab0 <_ZN13HardEncodeurs19_processDeltaTicksDEv>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
}
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <_ZN9OdometrieC1Em>:
#include "Odometrie.h"


Odometrie::Odometrie(uint32_t min_update_period) : _min_update_period(min_update_period), etat(INIT_X, INIT_Y, INIT_THETA)
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af04      	add	r7, sp, #16
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0108 	add.w	r1, r3, #8
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9cd 2300 	strd	r2, r3, [sp]
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	f7ff fb2b 	bl	8002298 <_ZN18EtatDynamiqueRobotC1Eddd>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
{
    encodeurs = new HardEncodeurs();
 8002c4a:	2018      	movs	r0, #24
 8002c4c:	f004 fd7f 	bl	800774e <_Znwj>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461c      	mov	r4, r3
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fedd 	bl	8002a14 <_ZN13HardEncodeursC1Ev>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601c      	str	r4, [r3, #0]

    _last_update_etat = 1000*Time;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <_ZN9OdometrieC1Em+0x70>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c66:	fb03 f202 	mul.w	r2, r3, r2
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
}
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200000cc 	.word	0x200000cc

08002c80 <_ZN9Odometrie6updateEv>:
{
    delete encodeurs;
}

void Odometrie::update()
{
 8002c80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c84:	b0a2      	sub	sp, #136	; 0x88
 8002c86:	af06      	add	r7, sp, #24
 8002c88:	6078      	str	r0, [r7, #4]
    uint32_t date = 1000*Time;
 8002c8a:	4b7f      	ldr	r3, [pc, #508]	; (8002e88 <_ZN9Odometrie6updateEv+0x208>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
    // Limitation de la fréquence d'update de l'odométrie (pas de limite si _min_update_period = 0)
    if(date - _last_update_etat > _min_update_period)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8002c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca0:	1ad2      	subs	r2, r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	f240 81eb 	bls.w	8003084 <_ZN9Odometrie6updateEv+0x404>
    {
        // (On suppose les vitesses constantes pendant t, la trajectoire decrite par le robot est alors un cercle)
        // on manipule des entiers le plus possible, c'est pourquoi l'unité est le micrometre

        uint32_t date = 1000*Time;
 8002cae:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <_ZN9Odometrie6updateEv+0x208>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	64bb      	str	r3, [r7, #72]	; 0x48

        // position et orientation actuelle du robot
        double x = etat.getX();
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fde2 	bl	800288a <_ZNK18EtatDynamiqueRobot4getXEv>
 8002cc6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        double y = etat.getY();
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fde8 	bl	80028a4 <_ZNK18EtatDynamiqueRobot4getYEv>
 8002cd4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
        double theta = etat.getThetaRadian();
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3308      	adds	r3, #8
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fdc7 	bl	8002870 <_ZNK18EtatDynamiqueRobot14getThetaRadianEv>
 8002ce2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        // nouvelle position et orientation du robot
        double n_x = 0;
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
        double n_y = 0;
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
        double n_theta = 0;
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

        // recuperation de la distance parcourue par chaque roue encodeur
        int64_t deltaTicksG = encodeurs->getDeltaTicksG();
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff5f 	bl	8002bd2 <_ZN13HardEncodeurs14getDeltaTicksGEv>
 8002d14:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
        int64_t deltaTicksD = encodeurs->getDeltaTicksD();
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff66 	bl	8002bee <_ZN13HardEncodeurs14getDeltaTicksDEv>
 8002d22:	e9c7 0108 	strd	r0, r1, [r7, #32]

        double deltaRoueG = deltaTicksG * DISTANCE_PAR_TICK_G; // en mm
 8002d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d2a:	f7fd fc53 	bl	80005d4 <__aeabi_l2d>
 8002d2e:	a350      	add	r3, pc, #320	; (adr r3, 8002e70 <_ZN9Odometrie6updateEv+0x1f0>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fc7c 	bl	8000630 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b51      	ldr	r3, [pc, #324]	; (8002e8c <_ZN9Odometrie6updateEv+0x20c>)
 8002d46:	f7fd fd9d 	bl	8000884 <__aeabi_ddiv>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        double deltaRoueD = deltaTicksD * DISTANCE_PAR_TICK_D; // en mm
 8002d52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d56:	f7fd fc3d 	bl	80005d4 <__aeabi_l2d>
 8002d5a:	a347      	add	r3, pc, #284	; (adr r3, 8002e78 <_ZN9Odometrie6updateEv+0x1f8>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fc66 	bl	8000630 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <_ZN9Odometrie6updateEv+0x20c>)
 8002d72:	f7fd fd87 	bl	8000884 <__aeabi_ddiv>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

        //////////////////////////////////////////////////////////////////////////////////////////
        // calcul de la nouvelle position en ligne droite ou en parcourant un arc ////////////////

        if(deltaRoueG == deltaRoueD)
 8002d7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d86:	f7fd febb 	bl	8000b00 <__aeabi_dcmpeq>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d028      	beq.n	8002de2 <_ZN9Odometrie6updateEv+0x162>
        {
            // dans le cas très particulier où les deux encodeurs ont retourné le même déplacement 
            // (ligne droite parfaite, R serait infini)
            n_x = x + deltaRoueG * cos(theta);
 8002d90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d94:	f004 fcf4 	bl	8007780 <cos>
 8002d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9c:	f7fd fc48 	bl	8000630 <__aeabi_dmul>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002da8:	f7fd fa8c 	bl	80002c4 <__adddf3>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            n_y = y + deltaRoueD * sin(theta);
 8002db4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002db8:	f004 fd6a 	bl	8007890 <sin>
 8002dbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dc0:	f7fd fc36 	bl	8000630 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002dcc:	f7fd fa7a 	bl	80002c4 <__adddf3>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

            n_theta = theta;
 8002dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ddc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002de0:	e0ee      	b.n	8002fc0 <_ZN9Odometrie6updateEv+0x340>
        }
        else // determination du cercle décrit par la trajectoire et de la vitesse du robot sur ce cercle
        {
            double R = 0;  // rayon du cercle decrit par la trajectoire
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9c7 2302 	strd	r2, r3, [r7, #8]
            double delta_theta = 0; // angle parcouru
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

            R = (ECART_ROUES / 2.0) * ((deltaRoueD + deltaRoueG) / (deltaRoueD - deltaRoueG)); // rayon de l'arc parcouru
 8002dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e02:	f7fd fa5f 	bl	80002c4 <__adddf3>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4690      	mov	r8, r2
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e16:	f7fd fa53 	bl	80002c0 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fd2f 	bl	8000884 <__aeabi_ddiv>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	a314      	add	r3, pc, #80	; (adr r3, 8002e80 <_ZN9Odometrie6updateEv+0x200>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f7fd fbfc 	bl	8000630 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	e9c7 2302 	strd	r2, r3, [r7, #8]

            if(deltaTicksD == -deltaTicksG)
 8002e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e44:	2100      	movs	r1, #0
 8002e46:	4254      	negs	r4, r2
 8002e48:	eb61 0503 	sbc.w	r5, r1, r3
 8002e4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e50:	42ab      	cmp	r3, r5
 8002e52:	bf08      	it	eq
 8002e54:	42a2      	cmpeq	r2, r4
 8002e56:	d11b      	bne.n	8002e90 <_ZN9Odometrie6updateEv+0x210>
                delta_theta = deltaRoueD / (ECART_ROUES / 2.0);
 8002e58:	a309      	add	r3, pc, #36	; (adr r3, 8002e80 <_ZN9Odometrie6updateEv+0x200>)
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e62:	f7fd fd0f 	bl	8000884 <__aeabi_ddiv>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8002e6e:	e022      	b.n	8002eb6 <_ZN9Odometrie6updateEv+0x236>
 8002e70:	be48623c 	.word	0xbe48623c
 8002e74:	40813d56 	.word	0x40813d56
 8002e78:	55410a00 	.word	0x55410a00
 8002e7c:	4081eddf 	.word	0x4081eddf
 8002e80:	00000000 	.word	0x00000000
 8002e84:	406719c0 	.word	0x406719c0
 8002e88:	200000cc 	.word	0x200000cc
 8002e8c:	408f4000 	.word	0x408f4000
            else
                delta_theta = (deltaRoueD - deltaRoueG) / (ECART_ROUES);//(deltaRoueD + deltaRoueG) / (2.0 * R);
 8002e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e98:	f7fd fa12 	bl	80002c0 <__aeabi_dsub>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	a37a      	add	r3, pc, #488	; (adr r3, 8003090 <_ZN9Odometrie6updateEv+0x410>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fceb 	bl	8000884 <__aeabi_ddiv>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

            ////////////////////////////////////////////////////////////////////////////////////////////
            // Pour éviter les changements rapides et grands incoherents avec les encodeurs magnetiques
            if(abs(delta_theta) > 0.1)
 8002eb6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002eba:	f7fe fa15 	bl	80012e8 <_ZSt3absd>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	461c      	mov	r4, r3
 8002ec2:	a375      	add	r3, pc, #468	; (adr r3, 8003098 <_ZN9Odometrie6updateEv+0x418>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fe42 	bl	8000b50 <__aeabi_dcmpgt>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <_ZN9Odometrie6updateEv+0x256>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	461c      	mov	r4, r3
 8002ed6:	b2e3      	uxtb	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <_ZN9Odometrie6updateEv+0x268>
                delta_theta = 0.0;
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
            ////////////////////////////////////////////////////////////////////////////////////////////

            n_x = etat.getX() + R * (- sin(theta) + sin(theta + delta_theta));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3308      	adds	r3, #8
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fccc 	bl	800288a <_ZNK18EtatDynamiqueRobot4getXEv>
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	460d      	mov	r5, r1
 8002ef6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002efa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002efe:	f7fd f9e1 	bl	80002c4 <__adddf3>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f004 fcc1 	bl	8007890 <sin>
 8002f0e:	4680      	mov	r8, r0
 8002f10:	4689      	mov	r9, r1
 8002f12:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f16:	f004 fcbb 	bl	8007890 <sin>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4640      	mov	r0, r8
 8002f20:	4649      	mov	r1, r9
 8002f22:	f7fd f9cd 	bl	80002c0 <__aeabi_dsub>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f32:	f7fd fb7d 	bl	8000630 <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	f7fd f9c1 	bl	80002c4 <__adddf3>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            n_y = etat.getY() + R * (cos(theta) - cos(theta + delta_theta));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fca8 	bl	80028a4 <_ZNK18EtatDynamiqueRobot4getYEv>
 8002f54:	4604      	mov	r4, r0
 8002f56:	460d      	mov	r5, r1
 8002f58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f5c:	f004 fc10 	bl	8007780 <cos>
 8002f60:	4680      	mov	r8, r0
 8002f62:	4689      	mov	r9, r1
 8002f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f6c:	f7fd f9aa 	bl	80002c4 <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f004 fc02 	bl	8007780 <cos>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4640      	mov	r0, r8
 8002f82:	4649      	mov	r1, r9
 8002f84:	f7fd f99c 	bl	80002c0 <__aeabi_dsub>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f94:	f7fd fb4c 	bl	8000630 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7fd f990 	bl	80002c4 <__adddf3>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

            n_theta = theta + delta_theta;
 8002fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fb0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002fb4:	f7fd f986 	bl	80002c4 <__adddf3>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

        //////////////////////////////////////////////////////////////////////////////////////////
        //////////////////////////////////////////////////////////////////////////////////////////

        // determination et mise à jour des vitesses indépendantes des moteurs (vitesses en mm/s)
        etat.setVMG(deltaRoueG / ((double)(date - _last_update_etat) / 1000.0 / 1000.0));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f103 0408 	add.w	r4, r3, #8
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8002fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd fab3 	bl	800053c <__aeabi_ui2d>
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	4b31      	ldr	r3, [pc, #196]	; (80030a0 <_ZN9Odometrie6updateEv+0x420>)
 8002fdc:	f7fd fc52 	bl	8000884 <__aeabi_ddiv>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	4b2c      	ldr	r3, [pc, #176]	; (80030a0 <_ZN9Odometrie6updateEv+0x420>)
 8002fee:	f7fd fc49 	bl	8000884 <__aeabi_ddiv>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ffa:	f7fd fc43 	bl	8000884 <__aeabi_ddiv>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4620      	mov	r0, r4
 8003004:	f7ff fb32 	bl	800266c <_ZN18EtatDynamiqueRobot6setVMGEd>
        etat.setVMD(deltaRoueD / ((double)(date - _last_update_etat) / 1000.0 / 1000.0));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f103 0408 	add.w	r4, r3, #8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa8f 	bl	800053c <__aeabi_ui2d>
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <_ZN9Odometrie6updateEv+0x420>)
 8003024:	f7fd fc2e 	bl	8000884 <__aeabi_ddiv>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <_ZN9Odometrie6updateEv+0x420>)
 8003036:	f7fd fc25 	bl	8000884 <__aeabi_ddiv>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003042:	f7fd fc1f 	bl	8000884 <__aeabi_ddiv>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4620      	mov	r0, r4
 800304c:	f7ff fb3a 	bl	80026c4 <_ZN18EtatDynamiqueRobot6setVMDEd>

        // application de la nouvelle position calculée et mise à jour des vitesses
        etat.versPosition(n_x, n_y, n_theta, date - _last_update_etat);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f103 0108 	add.w	r1, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 800305c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	9304      	str	r3, [sp, #16]
 8003062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800306a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800306e:	e9cd 2300 	strd	r2, r3, [sp]
 8003072:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003076:	4608      	mov	r0, r1
 8003078:	f7ff f9a6 	bl	80023c8 <_ZN18EtatDynamiqueRobot12versPositionEdddi>
        _last_update_etat = date;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003080:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
    
    }
}
 8003084:	bf00      	nop
 8003086:	3770      	adds	r7, #112	; 0x70
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800308e:	bf00      	nop
 8003090:	00000000 	.word	0x00000000
 8003094:	407719c0 	.word	0x407719c0
 8003098:	9999999a 	.word	0x9999999a
 800309c:	3fb99999 	.word	0x3fb99999
 80030a0:	408f4000 	.word	0x408f4000

080030a4 <_ZNK9Odometrie14getThetaRadianEv>:

double Odometrie::getThetaRadian() const
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    return etat.getThetaRadian();
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3308      	adds	r3, #8
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fbdd 	bl	8002870 <_ZNK18EtatDynamiqueRobot14getThetaRadianEv>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
}
 80030ba:	4610      	mov	r0, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZNK9Odometrie4getXEv>:

double Odometrie::getX() const
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
    return etat.getX();
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3308      	adds	r3, #8
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fbda 	bl	800288a <_ZNK18EtatDynamiqueRobot4getXEv>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
}
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZNK9Odometrie4getYEv>:

double Odometrie::getY() const
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    return etat.getY();
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3308      	adds	r3, #8
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fbd7 	bl	80028a4 <_ZNK18EtatDynamiqueRobot4getYEv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
}
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <_ZNK9Odometrie4getVEv>:

double Odometrie::getV() const
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    return etat.getV();
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3308      	adds	r3, #8
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fbd4 	bl	80028be <_ZNK18EtatDynamiqueRobot4getVEv>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
}
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_ZNK9Odometrie9getVThetaEv>:

double Odometrie::getVTheta() const
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    return etat.getVTheta();
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3308      	adds	r3, #8
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fbd1 	bl	80028d8 <_ZNK18EtatDynamiqueRobot9getVThetaEv>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
}
 800313a:	4610      	mov	r0, r2
 800313c:	4619      	mov	r1, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_ZNK9Odometrie12deltaAngleToEdd>:
{
    return etat.getVMD();
}

double Odometrie::deltaAngleTo(double initial, double target) const
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	e9c7 2300 	strd	r2, r3, [r7]
    return etat.deltaAngleTo(initial, target);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f103 0108 	add.w	r1, r3, #8
 8003156:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800315a:	e9cd 2300 	strd	r2, r3, [sp]
 800315e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003162:	4608      	mov	r0, r1
 8003164:	f7ff fadc 	bl	8002720 <_ZNK18EtatDynamiqueRobot12deltaAngleToEdd>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
}
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	611a      	str	r2, [r3, #16]
 800318e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <MX_ADC1_Init+0xb4>)
 800319c:	4a24      	ldr	r2, [pc, #144]	; (8003230 <MX_ADC1_Init+0xb8>)
 800319e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <MX_ADC1_Init+0xb4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <MX_ADC1_Init+0xb4>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <MX_ADC1_Init+0xb4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <MX_ADC1_Init+0xb4>)
 80031b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80031b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <MX_ADC1_Init+0xb4>)
 80031bc:	2200      	movs	r2, #0
 80031be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <MX_ADC1_Init+0xb4>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031c6:	4819      	ldr	r0, [pc, #100]	; (800322c <MX_ADC1_Init+0xb4>)
 80031c8:	f001 f9e0 	bl	800458c <HAL_ADC_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80031d2:	f000 fc27 	bl	8003a24 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_ADC1_Init+0xbc>)
 80031d8:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 4095;
 80031da:	f640 73ff 	movw	r3, #4095	; 0xfff
 80031de:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 3720;
 80031e0:	f640 6388 	movw	r3, #3720	; 0xe88
 80031e4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_15;
 80031e6:	230f      	movs	r3, #15
 80031e8:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 80031ea:	2301      	movs	r3, #1
 80031ec:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80031ee:	f107 0310 	add.w	r3, r7, #16
 80031f2:	4619      	mov	r1, r3
 80031f4:	480d      	ldr	r0, [pc, #52]	; (800322c <MX_ADC1_Init+0xb4>)
 80031f6:	f001 fd1b 	bl	8004c30 <HAL_ADC_AnalogWDGConfig>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003200:	f000 fc10 	bl	8003a24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003204:	230f      	movs	r3, #15
 8003206:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003208:	2301      	movs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4805      	ldr	r0, [pc, #20]	; (800322c <MX_ADC1_Init+0xb4>)
 8003216:	f001 fc13 	bl	8004a40 <HAL_ADC_ConfigChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003220:	f000 fc00 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003224:	bf00      	nop
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	2000009c 	.word	0x2000009c
 8003230:	40012400 	.word	0x40012400
 8003234:	00800200 	.word	0x00800200

08003238 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 0310 	add.w	r3, r7, #16
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_ADC_MspInit+0x7c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d129      	bne.n	80032ac <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_ADC_MspInit+0x80>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_ADC_MspInit+0x80>)
 800325e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_ADC_MspInit+0x80>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_ADC_MspInit+0x80>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4a10      	ldr	r2, [pc, #64]	; (80032b8 <HAL_ADC_MspInit+0x80>)
 8003276:	f043 0310 	orr.w	r3, r3, #16
 800327a:	6193      	str	r3, [r2, #24]
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_ADC_MspInit+0x80>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003288:	2320      	movs	r3, #32
 800328a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800328c:	2303      	movs	r3, #3
 800328e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4619      	mov	r1, r3
 8003296:	4809      	ldr	r0, [pc, #36]	; (80032bc <HAL_ADC_MspInit+0x84>)
 8003298:	f001 fed2 	bl	8005040 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	2012      	movs	r0, #18
 80032a2:	f001 fe96 	bl	8004fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80032a6:	2012      	movs	r0, #18
 80032a8:	f001 feaf 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032ac:	bf00      	nop
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012400 	.word	0x40012400
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40011000 	.word	0x40011000

080032c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c6:	f107 0310 	add.w	r3, r7, #16
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d4:	4b55      	ldr	r3, [pc, #340]	; (800342c <MX_GPIO_Init+0x16c>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <MX_GPIO_Init+0x16c>)
 80032da:	f043 0310 	orr.w	r3, r3, #16
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b52      	ldr	r3, [pc, #328]	; (800342c <MX_GPIO_Init+0x16c>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ec:	4b4f      	ldr	r3, [pc, #316]	; (800342c <MX_GPIO_Init+0x16c>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a4e      	ldr	r2, [pc, #312]	; (800342c <MX_GPIO_Init+0x16c>)
 80032f2:	f043 0320 	orr.w	r3, r3, #32
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b4c      	ldr	r3, [pc, #304]	; (800342c <MX_GPIO_Init+0x16c>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003304:	4b49      	ldr	r3, [pc, #292]	; (800342c <MX_GPIO_Init+0x16c>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <MX_GPIO_Init+0x16c>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	6193      	str	r3, [r2, #24]
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <MX_GPIO_Init+0x16c>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	4b43      	ldr	r3, [pc, #268]	; (800342c <MX_GPIO_Init+0x16c>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a42      	ldr	r2, [pc, #264]	; (800342c <MX_GPIO_Init+0x16c>)
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <MX_GPIO_Init+0x16c>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ledBL_Pin, GPIO_PIN_RESET);
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800333a:	483d      	ldr	r0, [pc, #244]	; (8003430 <MX_GPIO_Init+0x170>)
 800333c:	f002 f804 	bl	8005348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR2_Pin|Trig_sonar_Pin|ledFR_Pin|ledBR_Pin
 8003340:	2200      	movs	r2, #0
 8003342:	f24d 4104 	movw	r1, #54276	; 0xd404
 8003346:	483b      	ldr	r0, [pc, #236]	; (8003434 <MX_GPIO_Init+0x174>)
 8003348:	f001 fffe 	bl	8005348 <HAL_GPIO_WritePin>
                          |ledFL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800334c:	2200      	movs	r2, #0
 800334e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003352:	4839      	ldr	r0, [pc, #228]	; (8003438 <MX_GPIO_Init+0x178>)
 8003354:	f001 fff8 	bl	8005348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800335c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <MX_GPIO_Init+0x17c>)
 8003360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 0310 	add.w	r3, r7, #16
 800336a:	4619      	mov	r1, r3
 800336c:	4832      	ldr	r0, [pc, #200]	; (8003438 <MX_GPIO_Init+0x178>)
 800336e:	f001 fe67 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC6 PC7 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003372:	f641 63df 	movw	r3, #7903	; 0x1edf
 8003376:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003378:	2303      	movs	r3, #3
 800337a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	4619      	mov	r1, r3
 8003382:	482d      	ldr	r0, [pc, #180]	; (8003438 <MX_GPIO_Init+0x178>)
 8003384:	f001 fe5c 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003388:	f240 63df 	movw	r3, #1759	; 0x6df
 800338c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800338e:	2303      	movs	r3, #3
 8003390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	4619      	mov	r1, r3
 8003398:	4825      	ldr	r0, [pc, #148]	; (8003430 <MX_GPIO_Init+0x170>)
 800339a:	f001 fe51 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|ledBL_Pin;
 800339e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80033a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2302      	movs	r3, #2
 80033ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	481e      	ldr	r0, [pc, #120]	; (8003430 <MX_GPIO_Init+0x170>)
 80033b8:	f001 fe42 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB13 PB3
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_3
 80033bc:	f242 330b 	movw	r3, #8971	; 0x230b
 80033c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c2:	2303      	movs	r3, #3
 80033c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4619      	mov	r1, r3
 80033cc:	4819      	ldr	r0, [pc, #100]	; (8003434 <MX_GPIO_Init+0x174>)
 80033ce:	f001 fe37 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DIR2_Pin|Trig_sonar_Pin|ledFR_Pin|ledBR_Pin
 80033d2:	f24d 4304 	movw	r3, #54276	; 0xd404
 80033d6:	613b      	str	r3, [r7, #16]
                          |ledFL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033d8:	2301      	movs	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e0:	2302      	movs	r3, #2
 80033e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	4619      	mov	r1, r3
 80033ea:	4812      	ldr	r0, [pc, #72]	; (8003434 <MX_GPIO_Init+0x174>)
 80033ec:	f001 fe28 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR1_Pin;
 80033f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2302      	movs	r3, #2
 8003400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR1_GPIO_Port, &GPIO_InitStruct);
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4619      	mov	r1, r3
 8003408:	480b      	ldr	r0, [pc, #44]	; (8003438 <MX_GPIO_Init+0x178>)
 800340a:	f001 fe19 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800340e:	2304      	movs	r3, #4
 8003410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003412:	2303      	movs	r3, #3
 8003414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4619      	mov	r1, r3
 800341c:	4808      	ldr	r0, [pc, #32]	; (8003440 <MX_GPIO_Init+0x180>)
 800341e:	f001 fe0f 	bl	8005040 <HAL_GPIO_Init>

}
 8003422:	bf00      	nop
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000
 8003430:	40010800 	.word	0x40010800
 8003434:	40010c00 	.word	0x40010c00
 8003438:	40011000 	.word	0x40011000
 800343c:	10210000 	.word	0x10210000
 8003440:	40011400 	.word	0x40011400

08003444 <main>:
void trig_sonar(void);
void stop_sonar(void);

/* HACKATHON : FONCTION MAIN */
int main(void)
{
 8003444:	b598      	push	{r3, r4, r7, lr}
 8003446:	af00      	add	r7, sp, #0
  // IGNORER : INITIALISATIONS
  HAL_Init();
 8003448:	f001 f830 	bl	80044ac <HAL_Init>
  Dist_Obst = 0;
 800344c:	4b98      	ldr	r3, [pc, #608]	; (80036b0 <main+0x26c>)
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
  SystemClock_Config();
 8003452:	f000 f95d 	bl	8003710 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8003456:	f7ff ff33 	bl	80032c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800345a:	f7ff fe8d 	bl	8003178 <MX_ADC1_Init>
  MX_TIM2_Init();
 800345e:	f000 fd75 	bl	8003f4c <MX_TIM2_Init>
  MX_TIM1_Init();
 8003462:	f000 fc85 	bl	8003d70 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003466:	f000 fdf1 	bl	800404c <MX_TIM3_Init>
  MX_TIM4_Init();
 800346a:	f000 fe43 	bl	80040f4 <MX_TIM4_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 800346e:	f000 f9b5 	bl	80037dc <_ZL12MX_NVIC_Initv>
  /* USER CODE BEGIN 2 */
  HAL_SuspendTick(); // suppression des Ticks interrupt pour le mode sleep.
 8003472:	f001 f87d 	bl	8004570 <HAL_SuspendTick>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // Start PWM motor
 8003476:	210c      	movs	r1, #12
 8003478:	488e      	ldr	r0, [pc, #568]	; (80036b4 <main+0x270>)
 800347a:	f002 fd77 	bl	8005f6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Start PWM motor
 800347e:	2100      	movs	r1, #0
 8003480:	488c      	ldr	r0, [pc, #560]	; (80036b4 <main+0x270>)
 8003482:	f002 fd73 	bl	8005f6c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);//Start Encoder
 8003486:	213c      	movs	r1, #60	; 0x3c
 8003488:	488b      	ldr	r0, [pc, #556]	; (80036b8 <main+0x274>)
 800348a:	f003 f811 	bl	80064b0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);//Start Encoder
 800348e:	213c      	movs	r1, #60	; 0x3c
 8003490:	488a      	ldr	r0, [pc, #552]	; (80036bc <main+0x278>)
 8003492:	f003 f80d 	bl	80064b0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim2);  // Start IT sur font montant PWM
 8003496:	4887      	ldr	r0, [pc, #540]	; (80036b4 <main+0x270>)
 8003498:	f002 fcbe 	bl	8005e18 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT( &hadc1); // Active l'interruption de l'ADC (pour l'analog Watchdog)
 800349c:	4888      	ldr	r0, [pc, #544]	; (80036c0 <main+0x27c>)
 800349e:	f001 f94d 	bl	800473c <HAL_ADC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80034a2:	2104      	movs	r1, #4
 80034a4:	4887      	ldr	r0, [pc, #540]	; (80036c4 <main+0x280>)
 80034a6:	f002 fe5b 	bl	8006160 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 80034aa:	4886      	ldr	r0, [pc, #536]	; (80036c4 <main+0x280>)
 80034ac:	f002 fc6a 	bl	8005d84 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t) ANGLE_ZERO);
 80034b0:	4b84      	ldr	r3, [pc, #528]	; (80036c4 <main+0x280>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f640 0234 	movw	r2, #2100	; 0x834
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80034ba:	210c      	movs	r1, #12
 80034bc:	4881      	ldr	r0, [pc, #516]	; (80036c4 <main+0x280>)
 80034be:	f002 fd55 	bl	8005f6c <HAL_TIM_PWM_Start>
  stop_sonar();
 80034c2:	f000 f9bf 	bl	8003844 <_Z10stop_sonarv>
  moteurs = new BlocMoteurs();
 80034c6:	2010      	movs	r0, #16
 80034c8:	f004 f941 	bl	800774e <_Znwj>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461c      	mov	r4, r3
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7fd fda7 	bl	8001024 <_ZN11BlocMoteursC1Ev>
 80034d6:	4b7c      	ldr	r3, [pc, #496]	; (80036c8 <main+0x284>)
 80034d8:	601c      	str	r4, [r3, #0]
  moteurs->motors_on();
 80034da:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <main+0x284>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fed8 	bl	8001294 <_ZN11BlocMoteurs9motors_onEv>
  odometrie = new Odometrie(_min_update_period / 100);
 80034e4:	f44f 701e 	mov.w	r0, #632	; 0x278
 80034e8:	f004 f931 	bl	800774e <_Znwj>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461c      	mov	r4, r3
 80034f0:	4b76      	ldr	r3, [pc, #472]	; (80036cc <main+0x288>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a76      	ldr	r2, [pc, #472]	; (80036d0 <main+0x28c>)
 80034f6:	fb82 1203 	smull	r1, r2, r2, r3
 80034fa:	1152      	asrs	r2, r2, #5
 80034fc:	17db      	asrs	r3, r3, #31
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	4619      	mov	r1, r3
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff fb82 	bl	8002c0c <_ZN9OdometrieC1Em>
 8003508:	4b72      	ldr	r3, [pc, #456]	; (80036d4 <main+0x290>)
 800350a:	601c      	str	r4, [r3, #0]
  pid = new ControleurPID(moteurs,odometrie);
 800350c:	f44f 60b4 	mov.w	r0, #1440	; 0x5a0
 8003510:	f004 f91d 	bl	800774e <_Znwj>
 8003514:	4603      	mov	r3, r0
 8003516:	461c      	mov	r4, r3
 8003518:	4b6b      	ldr	r3, [pc, #428]	; (80036c8 <main+0x284>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6d      	ldr	r2, [pc, #436]	; (80036d4 <main+0x290>)
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	4620      	mov	r0, r4
 8003524:	f7fd fef0 	bl	8001308 <_ZN13ControleurPIDC1EP11BlocMoteursP9Odometrie>
 8003528:	4b6b      	ldr	r3, [pc, #428]	; (80036d8 <main+0x294>)
 800352a:	601c      	str	r4, [r3, #0]
  sonar = new Sonar();
 800352c:	2010      	movs	r0, #16
 800352e:	f004 f90e 	bl	800774e <_Znwj>
 8003532:	4603      	mov	r3, r0
 8003534:	461c      	mov	r4, r3
 8003536:	4620      	mov	r0, r4
 8003538:	f000 fa7a 	bl	8003a30 <_ZN5SonarC1Ev>
 800353c:	4b67      	ldr	r3, [pc, #412]	; (80036dc <main+0x298>)
 800353e:	601c      	str	r4, [r3, #0]
  //INIT DEFILEUR
  taches = new FileTaches();
 8003540:	f640 4088 	movw	r0, #3208	; 0xc88
 8003544:	f004 f903 	bl	800774e <_Znwj>
 8003548:	4603      	mov	r3, r0
 800354a:	461c      	mov	r4, r3
 800354c:	4620      	mov	r0, r4
 800354e:	f7ff f9d0 	bl	80028f2 <_ZN10FileTachesC1Ev>
 8003552:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <main+0x29c>)
 8003554:	601c      	str	r4, [r3, #0]
  TLoop=0;
 8003556:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <main+0x2a0>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
  while(CMDE!=1)
 800355c:	4b62      	ldr	r3, [pc, #392]	; (80036e8 <main+0x2a4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d023      	beq.n	80035ac <main+0x168>
  {
	  HAL_ADC_Start_IT( &hadc1);
 8003564:	4856      	ldr	r0, [pc, #344]	; (80036c0 <main+0x27c>)
 8003566:	f001 f8e9 	bl	800473c <HAL_ADC_Start_IT>
	  if(TLoop>=T_2_S)
 800356a:	4b5e      	ldr	r3, [pc, #376]	; (80036e4 <main+0x2a0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003572:	4293      	cmp	r3, r2
 8003574:	bf8c      	ite	hi
 8003576:	2301      	movhi	r3, #1
 8003578:	2300      	movls	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ed      	beq.n	800355c <main+0x118>
	  {
		  if(pinstate== GPIO_PIN_RESET)
 8003580:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <main+0x2a8>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <main+0x14c>
		  {
			  pinstate = GPIO_PIN_SET;
 8003588:	4b58      	ldr	r3, [pc, #352]	; (80036ec <main+0x2a8>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e002      	b.n	8003596 <main+0x152>
		  }
		  else
		  {
			  pinstate= GPIO_PIN_RESET;
 8003590:	4b56      	ldr	r3, [pc, #344]	; (80036ec <main+0x2a8>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
		  }

		  TLoop=0;
 8003596:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <main+0x2a0>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, pinstate);
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <main+0x2a8>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	2120      	movs	r1, #32
 80035a4:	4852      	ldr	r0, [pc, #328]	; (80036f0 <main+0x2ac>)
 80035a6:	f001 fecf 	bl	8005348 <HAL_GPIO_WritePin>
  while(CMDE!=1)
 80035aa:	e7d7      	b.n	800355c <main+0x118>
	  }
  }
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2120      	movs	r1, #32
 80035b0:	484f      	ldr	r0, [pc, #316]	; (80036f0 <main+0x2ac>)
 80035b2:	f001 fec9 	bl	8005348 <HAL_GPIO_WritePin>
  TLoop=0;
 80035b6:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <main+0x2a0>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
     odometrie->getThetaRadian();
    */


  /* HACKATHON : Routine INITIALE */
  defileur = new DefileurTaches(taches, pid,sonar);
 80035bc:	2040      	movs	r0, #64	; 0x40
 80035be:	f004 f8c6 	bl	800774e <_Znwj>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461c      	mov	r4, r3
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <main+0x29c>)
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <main+0x294>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <main+0x298>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7fe fd14 	bl	8002000 <_ZN14DefileurTachesC1EP10FileTachesP13ControleurPIDP5Sonar>
 80035d8:	4b46      	ldr	r3, [pc, #280]	; (80036f4 <main+0x2b0>)
 80035da:	601c      	str	r4, [r3, #0]
  TLoop=0;
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <main+0x2a0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]


  /* HACKATHON : Boucle principale */
  while (1)
  {
	  HAL_ADC_Start_IT( &hadc1); //sert à la surveillance batterie
 80035e2:	4837      	ldr	r0, [pc, #220]	; (80036c0 <main+0x27c>)
 80035e4:	f001 f8aa 	bl	800473c <HAL_ADC_Start_IT>
	  if(TLoop++>=T_10_MS) // On actualise la file de tache toute les 10ms
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <main+0x2a0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	493d      	ldr	r1, [pc, #244]	; (80036e4 <main+0x2a0>)
 80035f0:	600a      	str	r2, [r1, #0]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf8c      	ite	hi
 80035f6:	2301      	movhi	r3, #1
 80035f8:	2300      	movls	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <main+0x19e>
	  {
		  TLoop=0;
 8003600:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <main+0x2a0>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
		  if(defileur->update()) //on updtate et  si on arrive à la fin de la file de tache, on agit.
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <main+0x2b0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fd14 	bl	8002038 <_ZN14DefileurTaches6updateEv>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0e5      	beq.n	80035e2 <main+0x19e>
		  {
			  leftsonar = sonar->getValue(left); //dernières valeures mesurées du sonar
 8003616:	4b31      	ldr	r3, [pc, #196]	; (80036dc <main+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa7f 	bl	8003b20 <_ZN5Sonar8getValueEi>
 8003622:	4603      	mov	r3, r0
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ffab 	bl	8000580 <__aeabi_f2d>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4932      	ldr	r1, [pc, #200]	; (80036f8 <main+0x2b4>)
 8003630:	e9c1 2300 	strd	r2, r3, [r1]
			  rightsonar = sonar->getValue(right);
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <main+0x298>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2102      	movs	r1, #2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fa70 	bl	8003b20 <_ZN5Sonar8getValueEi>
 8003640:	4603      	mov	r3, r0
 8003642:	4618      	mov	r0, r3
 8003644:	f7fc ff9c 	bl	8000580 <__aeabi_f2d>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	492b      	ldr	r1, [pc, #172]	; (80036fc <main+0x2b8>)
 800364e:	e9c1 2300 	strd	r2, r3, [r1]
			  frontsonar = sonar->getValue(front);
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <main+0x298>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fa61 	bl	8003b20 <_ZN5Sonar8getValueEi>
 800365e:	4603      	mov	r3, r0
 8003660:	4618      	mov	r0, r3
 8003662:	f7fc ff8d 	bl	8000580 <__aeabi_f2d>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4925      	ldr	r1, [pc, #148]	; (8003700 <main+0x2bc>)
 800366c:	e9c1 2300 	strd	r2, r3, [r1]
			  xpos = odometrie->getX();
 8003670:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <main+0x290>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fd25 	bl	80030c4 <_ZNK9Odometrie4getXEv>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4921      	ldr	r1, [pc, #132]	; (8003704 <main+0x2c0>)
 8003680:	e9c1 2300 	strd	r2, r3, [r1]
			  ypos = odometrie->getY();
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <main+0x290>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fd2b 	bl	80030e4 <_ZNK9Odometrie4getYEv>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	491d      	ldr	r1, [pc, #116]	; (8003708 <main+0x2c4>)
 8003694:	e9c1 2300 	strd	r2, r3, [r1]
			  theta = odometrie->getThetaRadian();
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <main+0x290>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fd01 	bl	80030a4 <_ZNK9Odometrie14getThetaRadianEv>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4919      	ldr	r1, [pc, #100]	; (800370c <main+0x2c8>)
 80036a8:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_ADC_Start_IT( &hadc1); //sert à la surveillance batterie
 80036ac:	e799      	b.n	80035e2 <main+0x19e>
 80036ae:	bf00      	nop
 80036b0:	20000148 	.word	0x20000148
 80036b4:	200001c0 	.word	0x200001c0
 80036b8:	20000250 	.word	0x20000250
 80036bc:	20000208 	.word	0x20000208
 80036c0:	2000009c 	.word	0x2000009c
 80036c4:	20000178 	.word	0x20000178
 80036c8:	20000110 	.word	0x20000110
 80036cc:	20000008 	.word	0x20000008
 80036d0:	51eb851f 	.word	0x51eb851f
 80036d4:	20000124 	.word	0x20000124
 80036d8:	20000114 	.word	0x20000114
 80036dc:	20000120 	.word	0x20000120
 80036e0:	20000118 	.word	0x20000118
 80036e4:	200000d0 	.word	0x200000d0
 80036e8:	2000010c 	.word	0x2000010c
 80036ec:	2000015c 	.word	0x2000015c
 80036f0:	40010800 	.word	0x40010800
 80036f4:	2000011c 	.word	0x2000011c
 80036f8:	20000130 	.word	0x20000130
 80036fc:	20000138 	.word	0x20000138
 8003700:	20000140 	.word	0x20000140
 8003704:	20000160 	.word	0x20000160
 8003708:	20000168 	.word	0x20000168
 800370c:	20000128 	.word	0x20000128

08003710 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b094      	sub	sp, #80	; 0x50
 8003714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800371a:	2228      	movs	r2, #40	; 0x28
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f006 fa0e 	bl	8009b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003734:	1d3b      	adds	r3, r7, #4
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003740:	2302      	movs	r3, #2
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003744:	2301      	movs	r3, #1
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003748:	2310      	movs	r3, #16
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374c:	2302      	movs	r3, #2
 800374e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003750:	2300      	movs	r3, #0
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003754:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800375a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fe22 	bl	80053a8 <HAL_RCC_OscConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <_Z18SystemClock_Configv+0x68>
  {
    Error_Handler();
 8003774:	f000 f956 	bl	8003a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003778:	230f      	movs	r3, #15
 800377a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800377c:	2302      	movs	r3, #2
 800377e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003788:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800378e:	f107 0314 	add.w	r3, r7, #20
 8003792:	2102      	movs	r1, #2
 8003794:	4618      	mov	r0, r3
 8003796:	f002 f889 	bl	80058ac <HAL_RCC_ClockConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80037aa:	f000 f93b 	bl	8003a24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037ae:	2302      	movs	r3, #2
 80037b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80037b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80037b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	4618      	mov	r0, r3
 80037bc:	f002 f9dc 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80037d0:	f000 f928 	bl	8003a24 <Error_Handler>
  }
}
 80037d4:	bf00      	nop
 80037d6:	3750      	adds	r7, #80	; 0x50
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <_ZL12MX_NVIC_Initv>:

static void MX_NVIC_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037e0:	2200      	movs	r2, #0
 80037e2:	2100      	movs	r1, #0
 80037e4:	2028      	movs	r0, #40	; 0x28
 80037e6:	f001 fbf4 	bl	8004fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037ea:	2028      	movs	r0, #40	; 0x28
 80037ec:	f001 fc0d 	bl	800500a <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	2027      	movs	r0, #39	; 0x27
 80037f6:	f001 fbec 	bl	8004fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037fa:	2027      	movs	r0, #39	; 0x27
 80037fc:	f001 fc05 	bl	800500a <HAL_NVIC_EnableIRQ>
}
 8003800:	bf00      	nop
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_GPIO_EXTI_Callback>:

/* Commandes Start et Stop via l’IT EXTI13 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	80fb      	strh	r3, [r7, #6]

	static unsigned char TOGGLE = 0;

	if (TOGGLE)
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_GPIO_EXTI_Callback+0x38>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_EXTI_Callback+0x1a>
		CMDE = 0;
 8003816:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	e002      	b.n	8003824 <HAL_GPIO_EXTI_Callback+0x20>
	else
		CMDE = 1;
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]
	TOGGLE = ~TOGGLE;
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_GPIO_EXTI_Callback+0x38>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	43db      	mvns	r3, r3
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_GPIO_EXTI_Callback+0x38>)
 800382e:	701a      	strb	r2, [r3, #0]

}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000170 	.word	0x20000170
 8003840:	2000010c 	.word	0x2000010c

08003844 <_Z10stop_sonarv>:

	HAL_GPIO_WritePin(GPIOB,Trig_sonar_Pin,GPIO_PIN_SET);
}

/* Stop sonar */
void stop_sonar(void) {
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB,Trig_sonar_Pin,GPIO_PIN_RESET);
 8003848:	2200      	movs	r2, #0
 800384a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800384e:	4802      	ldr	r0, [pc, #8]	; (8003858 <_Z10stop_sonarv+0x14>)
 8003850:	f001 fd7a 	bl	8005348 <HAL_GPIO_WritePin>
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40010c00 	.word	0x40010c00

0800385c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d109      	bne.n	8003882 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		Time++;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	4a05      	ldr	r2, [pc, #20]	; (800388c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003876:	6013      	str	r3, [r2, #0]
		TLoop++;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003880:	6013      	str	r3, [r2, #0]
	}
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	200000cc 	.word	0x200000cc
 8003890:	200000d0 	.word	0x200000d0
 8003894:	00000000 	.word	0x00000000

08003898 <HAL_TIM_IC_CaptureCallback>:

/* Mesure de la distance avec le sonar */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]


	if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 ){
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7f1b      	ldrb	r3, [r3, #28]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	f040 8093 	bne.w	80039d0 <HAL_TIM_IC_CaptureCallback+0x138>
		Dist_Obst = (uint32_t) HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 80038aa:	2104      	movs	r1, #4
 80038ac:	484c      	ldr	r0, [pc, #304]	; (80039e0 <HAL_TIM_IC_CaptureCallback+0x148>)
 80038ae:	f003 f9ed 	bl	8006c8c <HAL_TIM_ReadCapturedValue>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a4b      	ldr	r2, [pc, #300]	; (80039e4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80038b6:	6013      	str	r3, [r2, #0]
		Dist_Obst_cm += (double) ( 650*Dist_Obst) / 65535; // en cm
 80038b8:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f240 228a 	movw	r2, #650	; 0x28a
 80038c0:	fb02 f303 	mul.w	r3, r2, r3
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fc fe39 	bl	800053c <__aeabi_ui2d>
 80038ca:	a343      	add	r3, pc, #268	; (adr r3, 80039d8 <HAL_TIM_IC_CaptureCallback+0x140>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc ffd8 	bl	8000884 <__aeabi_ddiv>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	4b42      	ldr	r3, [pc, #264]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x150>)
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f7fc fcef 	bl	80002c4 <__adddf3>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	493f      	ldr	r1, [pc, #252]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x150>)
 80038ec:	e9c1 2300 	strd	r2, r3, [r1]
		HAL_GPIO_WritePin(GPIOB,Trig_sonar_Pin,GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038f6:	483d      	ldr	r0, [pc, #244]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 80038f8:	f001 fd26 	bl	8005348 <HAL_GPIO_WritePin>
		if(sonarcount++>9)
 80038fc:	4b3c      	ldr	r3, [pc, #240]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	493b      	ldr	r1, [pc, #236]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x158>)
 8003904:	600a      	str	r2, [r1, #0]
 8003906:	2b09      	cmp	r3, #9
 8003908:	bfcc      	ite	gt
 800390a:	2301      	movgt	r3, #1
 800390c:	2300      	movle	r3, #0
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05d      	beq.n	80039d0 <HAL_TIM_IC_CaptureCallback+0x138>
		{
			sonarmeasure = (10*Dist_Obst_cm)/10;
 8003914:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8003920:	f7fc fe86 	bl	8000630 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8003932:	f7fc ffa7 	bl	8000884 <__aeabi_ddiv>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f7fd f94f 	bl	8000be0 <__aeabi_d2f>
 8003942:	4603      	mov	r3, r0
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8003946:	6013      	str	r3, [r2, #0]
			sonarcount=0;
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x158>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
			Dist_Obst_cm = 0;
 800394e:	4926      	ldr	r1, [pc, #152]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	f04f 0300 	mov.w	r3, #0
 8003958:	e9c1 2300 	strd	r2, r3, [r1]
			if( sonarmeasure < 450 )
 800395c:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <HAL_TIM_IC_CaptureCallback+0x160>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4926      	ldr	r1, [pc, #152]	; (80039fc <HAL_TIM_IC_CaptureCallback+0x164>)
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fae8 	bl	8000f38 <__aeabi_fcmplt>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <HAL_TIM_IC_CaptureCallback+0x108>
			{
				HAL_GPIO_WritePin(ledFR_GPIO_Port, ledFR_Pin, GPIO_PIN_SET);
 800396e:	2201      	movs	r2, #1
 8003970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003974:	481d      	ldr	r0, [pc, #116]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 8003976:	f001 fce7 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledFL_GPIO_Port, ledFL_Pin, GPIO_PIN_SET);
 800397a:	2201      	movs	r2, #1
 800397c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003980:	481a      	ldr	r0, [pc, #104]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 8003982:	f001 fce1 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledBR_GPIO_Port, ledBR_Pin, GPIO_PIN_SET);
 8003986:	2201      	movs	r2, #1
 8003988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800398c:	4817      	ldr	r0, [pc, #92]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 800398e:	f001 fcdb 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledBL_GPIO_Port, ledBL_Pin, GPIO_PIN_SET);
 8003992:	2201      	movs	r2, #1
 8003994:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003998:	4819      	ldr	r0, [pc, #100]	; (8003a00 <HAL_TIM_IC_CaptureCallback+0x168>)
 800399a:	f001 fcd5 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledBL_GPIO_Port, ledBL_Pin, GPIO_PIN_RESET);
			}
		}
	}

}
 800399e:	e017      	b.n	80039d0 <HAL_TIM_IC_CaptureCallback+0x138>
				HAL_GPIO_WritePin(ledFR_GPIO_Port, ledFR_Pin, GPIO_PIN_RESET);
 80039a0:	2200      	movs	r2, #0
 80039a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039a6:	4811      	ldr	r0, [pc, #68]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 80039a8:	f001 fcce 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledFL_GPIO_Port, ledFL_Pin, GPIO_PIN_RESET);
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039b2:	480e      	ldr	r0, [pc, #56]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 80039b4:	f001 fcc8 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledBR_GPIO_Port, ledBR_Pin, GPIO_PIN_RESET);
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039be:	480b      	ldr	r0, [pc, #44]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x154>)
 80039c0:	f001 fcc2 	bl	8005348 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ledBL_GPIO_Port, ledBL_Pin, GPIO_PIN_RESET);
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80039ca:	480d      	ldr	r0, [pc, #52]	; (8003a00 <HAL_TIM_IC_CaptureCallback+0x168>)
 80039cc:	f001 fcbc 	bl	8005348 <HAL_GPIO_WritePin>
}
 80039d0:	bf00      	nop
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	00000000 	.word	0x00000000
 80039dc:	40efffe0 	.word	0x40efffe0
 80039e0:	20000178 	.word	0x20000178
 80039e4:	20000148 	.word	0x20000148
 80039e8:	20000150 	.word	0x20000150
 80039ec:	40010c00 	.word	0x40010c00
 80039f0:	20000158 	.word	0x20000158
 80039f4:	40240000 	.word	0x40240000
 80039f8:	20000108 	.word	0x20000108
 80039fc:	43e10000 	.word	0x43e10000
 8003a00:	40010800 	.word	0x40010800

08003a04 <HAL_ADC_LevelOutOfWindowCallback>:

/* Interrupt de l'ADC pour l'Analog Watchdog. Allume Led 2 si la batterie est faible, désactive l'interruption pour la suite */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2120      	movs	r1, #32
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <HAL_ADC_LevelOutOfWindowCallback+0x1c>)
 8003a12:	f001 fc99 	bl	8005348 <HAL_GPIO_WritePin>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40010800 	.word	0x40010800

08003a24 <Error_Handler>:

void Error_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <_ZN5SonarC1Ev>:
#define TimeToServo 1500 //1.5s
extern int Time;
extern float sonarmeasure;


Sonar::Sonar()
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
{

	leftdist=0;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
	frontdist=0;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	605a      	str	r2, [r3, #4]
	rightdist=0;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
	timestamp=0;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOB,Trig_sonar_Pin,GPIO_PIN_SET); //TRIG sonar
 8003a56:	2201      	movs	r2, #1
 8003a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a5c:	4803      	ldr	r0, [pc, #12]	; (8003a6c <_ZN5SonarC1Ev+0x3c>)
 8003a5e:	f001 fc73 	bl	8005348 <HAL_GPIO_WritePin>
}
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010c00 	.word	0x40010c00

08003a70 <_ZN5Sonar7lookDirEi>:
	HAL_GPIO_WritePin(GPIOB,Trig_sonar_Pin,GPIO_PIN_RESET); //STOP sonar

}

void Sonar::lookDir(int dirSonar)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	timestamp=Time;
 8003a7a:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <_ZN5Sonar7lookDirEi+0xa4>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60da      	str	r2, [r3, #12]
	switch(dirSonar)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d02d      	beq.n	8003ae4 <_ZN5Sonar7lookDirEi+0x74>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	dc3c      	bgt.n	8003b08 <_ZN5Sonar7lookDirEi+0x98>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <_ZN5Sonar7lookDirEi+0x2c>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d012      	beq.n	8003ac0 <_ZN5Sonar7lookDirEi+0x50>
		case right:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t) ANGLE90);
			while( Time < timestamp + TimeToServo);
			rightdist = sonarmeasure;
		default :
			break;
 8003a9a:	e035      	b.n	8003b08 <_ZN5Sonar7lookDirEi+0x98>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t) ANGLE_90);
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <_ZN5Sonar7lookDirEi+0xa8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
			while( Time < timestamp + TimeToServo)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <_ZN5Sonar7lookDirEi+0xa4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	db04      	blt.n	8003ac0 <_ZN5Sonar7lookDirEi+0x50>
			leftdist = sonarmeasure;
 8003ab6:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <_ZN5Sonar7lookDirEi+0xac>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
			while( Time < timestamp + TimeToServo)
 8003abe:	e7f2      	b.n	8003aa6 <_ZN5Sonar7lookDirEi+0x36>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t) ANGLE_ZERO);
 8003ac0:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <_ZN5Sonar7lookDirEi+0xa8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f640 0234 	movw	r2, #2100	; 0x834
 8003ac8:	641a      	str	r2, [r3, #64]	; 0x40
			while( Time < timestamp + TimeToServo);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <_ZN5Sonar7lookDirEi+0xa4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	db00      	blt.n	8003adc <_ZN5Sonar7lookDirEi+0x6c>
 8003ada:	e7f6      	b.n	8003aca <_ZN5Sonar7lookDirEi+0x5a>
			frontdist = sonarmeasure;
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <_ZN5Sonar7lookDirEi+0xac>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	605a      	str	r2, [r3, #4]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t) ANGLE90);
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <_ZN5Sonar7lookDirEi+0xa8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8003aec:	641a      	str	r2, [r3, #64]	; 0x40
			while( Time < timestamp + TimeToServo);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f203 52db 	addw	r2, r3, #1499	; 0x5db
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <_ZN5Sonar7lookDirEi+0xa4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	db00      	blt.n	8003b00 <_ZN5Sonar7lookDirEi+0x90>
 8003afe:	e7f6      	b.n	8003aee <_ZN5Sonar7lookDirEi+0x7e>
			rightdist = sonarmeasure;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <_ZN5Sonar7lookDirEi+0xac>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]
			break;
 8003b08:	bf00      	nop
	}

}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	200000cc 	.word	0x200000cc
 8003b18:	20000178 	.word	0x20000178
 8003b1c:	20000108 	.word	0x20000108

08003b20 <_ZN5Sonar8getValueEi>:

float Sonar::getValue(int dirSonar)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
	switch(dirSonar)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d00f      	beq.n	8003b50 <_ZN5Sonar8getValueEi+0x30>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	dc0f      	bgt.n	8003b56 <_ZN5Sonar8getValueEi+0x36>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <_ZN5Sonar8getValueEi+0x24>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d003      	beq.n	8003b4a <_ZN5Sonar8getValueEi+0x2a>
 8003b42:	e008      	b.n	8003b56 <_ZN5Sonar8getValueEi+0x36>
	{
		case left:
			return leftdist;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	e007      	b.n	8003b5a <_ZN5Sonar8getValueEi+0x3a>
		case front:
			return frontdist;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	e004      	b.n	8003b5a <_ZN5Sonar8getValueEi+0x3a>
		case right :
			return rightdist;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	e001      	b.n	8003b5a <_ZN5Sonar8getValueEi+0x3a>
		default :
			return 0;
 8003b56:	f04f 0300 	mov.w	r3, #0
	}
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <_ZN5Sonar6updateEv>:

void Sonar::update(){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<3; i++)
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	dc07      	bgt.n	8003b86 <_ZN5Sonar6updateEv+0x22>
	{
		lookDir(i);
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff79 	bl	8003a70 <_ZN5Sonar7lookDirEi>
	for(int i=0; i<3; i++)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e7f4      	b.n	8003b70 <_ZN5Sonar6updateEv+0xc>

	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint16_t) ANGLE_ZERO);
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <_ZN5Sonar6updateEv+0x34>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f640 0234 	movw	r2, #2100	; 0x834
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000178 	.word	0x20000178

08003b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_MspInit+0x5c>)
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_MspInit+0x5c>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6193      	str	r3, [r2, #24]
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_MspInit+0x5c>)
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_MspInit+0x5c>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <HAL_MspInit+0x5c>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	61d3      	str	r3, [r2, #28]
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_MspInit+0x5c>)
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	607b      	str	r3, [r7, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_MspInit+0x60>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	4a04      	ldr	r2, [pc, #16]	; (8003bfc <HAL_MspInit+0x60>)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40010000 	.word	0x40010000

08003c00 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c04:	f000 fc98 	bl	8004538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <ADC1_2_IRQHandler+0x10>)
 8003c12:	f000 fe49 	bl	80048a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	2000009c 	.word	0x2000009c

08003c20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <TIM1_CC_IRQHandler+0x10>)
 8003c26:	f002 fcd1 	bl	80065cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000178 	.word	0x20000178

08003c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <TIM2_IRQHandler+0x10>)
 8003c3a:	f002 fcc7 	bl	80065cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200001c0 	.word	0x200001c0

08003c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003c50:	f001 fb92 	bl	8005378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	return 1;
 8003c5c:	2301      	movs	r3, #1
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr

08003c66 <_kill>:

int _kill(int pid, int sig)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c70:	f005 ff34 	bl	8009adc <__errno>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2216      	movs	r2, #22
 8003c78:	601a      	str	r2, [r3, #0]
	return -1;
 8003c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_exit>:

void _exit (int status)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ffe7 	bl	8003c66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c98:	e7fe      	b.n	8003c98 <_exit+0x12>
	...

08003c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ca4:	4a14      	ldr	r2, [pc, #80]	; (8003cf8 <_sbrk+0x5c>)
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <_sbrk+0x60>)
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cb0:	4b13      	ldr	r3, [pc, #76]	; (8003d00 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <_sbrk+0x64>)
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <_sbrk+0x68>)
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <_sbrk+0x64>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d207      	bcs.n	8003cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ccc:	f005 ff06 	bl	8009adc <__errno>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	220c      	movs	r2, #12
 8003cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	e009      	b.n	8003cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <_sbrk+0x64>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <_sbrk+0x64>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <_sbrk+0x64>)
 8003cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cee:	68fb      	ldr	r3, [r7, #12]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20005000 	.word	0x20005000
 8003cfc:	00000400 	.word	0x00000400
 8003d00:	20000174 	.word	0x20000174
 8003d04:	200002b0 	.word	0x200002b0

08003d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003d0c:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <SystemInit+0x5c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <SystemInit+0x5c>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <SystemInit+0x5c>)
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4911      	ldr	r1, [pc, #68]	; (8003d64 <SystemInit+0x5c>)
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <SystemInit+0x60>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <SystemInit+0x5c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <SystemInit+0x5c>)
 8003d2a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <SystemInit+0x5c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SystemInit+0x5c>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <SystemInit+0x5c>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a07      	ldr	r2, [pc, #28]	; (8003d64 <SystemInit+0x5c>)
 8003d46:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003d4a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SystemInit+0x5c>)
 8003d4e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003d52:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <SystemInit+0x64>)
 8003d56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d5a:	609a      	str	r2, [r3, #8]
#endif 
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr
 8003d64:	40021000 	.word	0x40021000
 8003d68:	f8ff0000 	.word	0xf8ff0000
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b09e      	sub	sp, #120	; 0x78
 8003d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003d84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003d94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dac:	f107 0320 	add.w	r3, r7, #32
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	615a      	str	r2, [r3, #20]
 8003dbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f005 feba 	bl	8009b40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003dcc:	4b5d      	ldr	r3, [pc, #372]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003dce:	4a5e      	ldr	r2, [pc, #376]	; (8003f48 <MX_TIM1_Init+0x1d8>)
 8003dd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36;
 8003dd2:	4b5c      	ldr	r3, [pc, #368]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003dd4:	2224      	movs	r2, #36	; 0x24
 8003dd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd8:	4b5a      	ldr	r3, [pc, #360]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003dde:	4b59      	ldr	r3, [pc, #356]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de6:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003dec:	4b55      	ldr	r3, [pc, #340]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003df8:	4852      	ldr	r0, [pc, #328]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003dfa:	f001 ff73 	bl	8005ce4 <HAL_TIM_Base_Init>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e04:	f7ff fe0e 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e12:	4619      	mov	r1, r3
 8003e14:	484b      	ldr	r0, [pc, #300]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003e16:	f002 fe33 	bl	8006a80 <HAL_TIM_ConfigClockSource>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003e20:	f7ff fe00 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e24:	4847      	ldr	r0, [pc, #284]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003e26:	f002 f849 	bl	8005ebc <HAL_TIM_PWM_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003e30:	f7ff fdf8 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003e34:	4843      	ldr	r0, [pc, #268]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003e36:	f002 f93b 	bl	80060b0 <HAL_TIM_IC_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8003e40:	f7ff fdf0 	bl	8003a24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003e44:	2304      	movs	r3, #4
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003e48:	2350      	movs	r3, #80	; 0x50
 8003e4a:	65bb      	str	r3, [r7, #88]	; 0x58
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	663b      	str	r3, [r7, #96]	; 0x60
  sSlaveConfig.TriggerFilter = 5;
 8003e54:	2305      	movs	r3, #5
 8003e56:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003e58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4839      	ldr	r0, [pc, #228]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003e60:	f002 fed2 	bl	8006c08 <HAL_TIM_SlaveConfigSynchro>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003e6a:	f7ff fddb 	bl	8003a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e72:	2301      	movs	r3, #1
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e76:	2300      	movs	r3, #0
 8003e78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICFilter = 5;
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003e7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e82:	2200      	movs	r2, #0
 8003e84:	4619      	mov	r1, r3
 8003e86:	482f      	ldr	r0, [pc, #188]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003e88:	f002 fca8 	bl	80067dc <HAL_TIM_IC_ConfigChannel>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8003e92:	f7ff fdc7 	bl	8003a24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003e96:	2302      	movs	r3, #2
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003e9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4827      	ldr	r0, [pc, #156]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003ea8:	f002 fc98 	bl	80067dc <HAL_TIM_IC_ConfigChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003eb2:	f7ff fdb7 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ebe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	481f      	ldr	r0, [pc, #124]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003ec6:	f003 fb81 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8003ed0:	f7ff fda8 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ed4:	2360      	movs	r3, #96	; 0x60
 8003ed6:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003eec:	f107 0320 	add.w	r3, r7, #32
 8003ef0:	220c      	movs	r2, #12
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4813      	ldr	r0, [pc, #76]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003ef6:	f002 fd05 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8003f00:	f7ff fd90 	bl	8003a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f22:	463b      	mov	r3, r7
 8003f24:	4619      	mov	r1, r3
 8003f26:	4807      	ldr	r0, [pc, #28]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003f28:	f003 fbae 	bl	8007688 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 8003f32:	f7ff fd77 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f36:	4803      	ldr	r0, [pc, #12]	; (8003f44 <MX_TIM1_Init+0x1d4>)
 8003f38:	f000 fa10 	bl	800435c <HAL_TIM_MspPostInit>

}
 8003f3c:	bf00      	nop
 8003f3e:	3778      	adds	r7, #120	; 0x78
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	20000178 	.word	0x20000178
 8003f48:	40012c00 	.word	0x40012c00

08003f4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08e      	sub	sp, #56	; 0x38
 8003f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f60:	f107 0320 	add.w	r3, r7, #32
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	611a      	str	r2, [r3, #16]
 8003f78:	615a      	str	r2, [r3, #20]
 8003f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8003f84:	4b30      	ldr	r3, [pc, #192]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 64000;
 8003f90:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003f92:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8003f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f98:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fa4:	4828      	ldr	r0, [pc, #160]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003fa6:	f001 fe9d 	bl	8005ce4 <HAL_TIM_Base_Init>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003fb0:	f7ff fd38 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4821      	ldr	r0, [pc, #132]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003fc2:	f002 fd5d 	bl	8006a80 <HAL_TIM_ConfigClockSource>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003fcc:	f7ff fd2a 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fd0:	481d      	ldr	r0, [pc, #116]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003fd2:	f001 ff73 	bl	8005ebc <HAL_TIM_PWM_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003fdc:	f7ff fd22 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fe8:	f107 0320 	add.w	r3, r7, #32
 8003fec:	4619      	mov	r1, r3
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <MX_TIM2_Init+0xfc>)
 8003ff0:	f003 faec 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003ffa:	f7ff fd13 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ffe:	2360      	movs	r3, #96	; 0x60
 8004000:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	2200      	movs	r2, #0
 8004012:	4619      	mov	r1, r3
 8004014:	480c      	ldr	r0, [pc, #48]	; (8004048 <MX_TIM2_Init+0xfc>)
 8004016:	f002 fc75 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004020:	f7ff fd00 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	220c      	movs	r2, #12
 8004028:	4619      	mov	r1, r3
 800402a:	4807      	ldr	r0, [pc, #28]	; (8004048 <MX_TIM2_Init+0xfc>)
 800402c:	f002 fc6a 	bl	8006904 <HAL_TIM_PWM_ConfigChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004036:	f7ff fcf5 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800403a:	4803      	ldr	r0, [pc, #12]	; (8004048 <MX_TIM2_Init+0xfc>)
 800403c:	f000 f98e 	bl	800435c <HAL_TIM_MspPostInit>

}
 8004040:	bf00      	nop
 8004042:	3738      	adds	r7, #56	; 0x38
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	200001c0 	.word	0x200001c0

0800404c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	; 0x30
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004052:	f107 030c 	add.w	r3, r7, #12
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f005 fd70 	bl	8009b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004068:	4b20      	ldr	r3, [pc, #128]	; (80040ec <MX_TIM3_Init+0xa0>)
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <MX_TIM3_Init+0xa4>)
 800406c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800406e:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <MX_TIM3_Init+0xa0>)
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004074:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <MX_TIM3_Init+0xa0>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800407a:	4b1c      	ldr	r3, [pc, #112]	; (80040ec <MX_TIM3_Init+0xa0>)
 800407c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004080:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <MX_TIM3_Init+0xa0>)
 8004084:	2200      	movs	r2, #0
 8004086:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <MX_TIM3_Init+0xa0>)
 800408a:	2200      	movs	r2, #0
 800408c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800408e:	2303      	movs	r3, #3
 8004090:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004096:	2301      	movs	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040a2:	2300      	movs	r3, #0
 80040a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040a6:	2301      	movs	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80040b2:	f107 030c 	add.w	r3, r7, #12
 80040b6:	4619      	mov	r1, r3
 80040b8:	480c      	ldr	r0, [pc, #48]	; (80040ec <MX_TIM3_Init+0xa0>)
 80040ba:	f002 f957 	bl	800636c <HAL_TIM_Encoder_Init>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80040c4:	f7ff fcae 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c8:	2300      	movs	r3, #0
 80040ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4805      	ldr	r0, [pc, #20]	; (80040ec <MX_TIM3_Init+0xa0>)
 80040d6:	f003 fa79 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80040e0:	f7ff fca0 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040e4:	bf00      	nop
 80040e6:	3730      	adds	r7, #48	; 0x30
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000208 	.word	0x20000208
 80040f0:	40000400 	.word	0x40000400

080040f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08c      	sub	sp, #48	; 0x30
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80040fa:	f107 030c 	add.w	r3, r7, #12
 80040fe:	2224      	movs	r2, #36	; 0x24
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f005 fd1c 	bl	8009b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <MX_TIM4_Init+0xa0>)
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <MX_TIM4_Init+0xa4>)
 8004114:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <MX_TIM4_Init+0xa0>)
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800411c:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <MX_TIM4_Init+0xa0>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004122:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <MX_TIM4_Init+0xa0>)
 8004124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004128:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <MX_TIM4_Init+0xa0>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <MX_TIM4_Init+0xa0>)
 8004132:	2200      	movs	r2, #0
 8004134:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004136:	2303      	movs	r3, #3
 8004138:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800413e:	2301      	movs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800414a:	2302      	movs	r3, #2
 800414c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004152:	2300      	movs	r3, #0
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800415a:	f107 030c 	add.w	r3, r7, #12
 800415e:	4619      	mov	r1, r3
 8004160:	480c      	ldr	r0, [pc, #48]	; (8004194 <MX_TIM4_Init+0xa0>)
 8004162:	f002 f903 	bl	800636c <HAL_TIM_Encoder_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800416c:	f7ff fc5a 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004170:	2300      	movs	r3, #0
 8004172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4805      	ldr	r0, [pc, #20]	; (8004194 <MX_TIM4_Init+0xa0>)
 800417e:	f003 fa25 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004188:	f7ff fc4c 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800418c:	bf00      	nop
 800418e:	3730      	adds	r7, #48	; 0x30
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000250 	.word	0x20000250
 8004198:	40000800 	.word	0x40000800

0800419c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 0318 	add.w	r3, r7, #24
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <HAL_TIM_Base_MspInit+0xb8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d12d      	bne.n	8004218 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 80041c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041c6:	6193      	str	r3, [r2, #24]
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d4:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 80041da:	f043 0304 	orr.w	r3, r3, #4
 80041de:	6193      	str	r3, [r2, #24]
 80041e0:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = echo_sonar_Pin;
 80041ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(echo_sonar_GPIO_Port, &GPIO_InitStruct);
 80041fa:	f107 0318 	add.w	r3, r7, #24
 80041fe:	4619      	mov	r1, r3
 8004200:	4816      	ldr	r0, [pc, #88]	; (800425c <HAL_TIM_Base_MspInit+0xc0>)
 8004202:	f000 ff1d 	bl	8005040 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	201b      	movs	r0, #27
 800420c:	f000 fee1 	bl	8004fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004210:	201b      	movs	r0, #27
 8004212:	f000 fefa 	bl	800500a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004216:	e018      	b.n	800424a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d113      	bne.n	800424a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	61d3      	str	r3, [r2, #28]
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_TIM_Base_MspInit+0xbc>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	201c      	movs	r0, #28
 8004240:	f000 fec7 	bl	8004fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004244:	201c      	movs	r0, #28
 8004246:	f000 fee0 	bl	800500a <HAL_NVIC_EnableIRQ>
}
 800424a:	bf00      	nop
 800424c:	3728      	adds	r7, #40	; 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40021000 	.word	0x40021000
 800425c:	40010800 	.word	0x40010800

08004260 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 031c 	add.w	r3, r7, #28
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a33      	ldr	r2, [pc, #204]	; (8004348 <HAL_TIM_Encoder_MspInit+0xe8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d136      	bne.n	80042ee <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4a31      	ldr	r2, [pc, #196]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	61d3      	str	r3, [r2, #28]
 800428c:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004298:	4b2c      	ldr	r3, [pc, #176]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 800429e:	f043 0308 	orr.w	r3, r3, #8
 80042a2:	6193      	str	r3, [r2, #24]
 80042a4:	4b29      	ldr	r3, [pc, #164]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 80042b0:	2330      	movs	r3, #48	; 0x30
 80042b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042b4:	2300      	movs	r3, #0
 80042b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042bc:	f107 031c 	add.w	r3, r7, #28
 80042c0:	4619      	mov	r1, r3
 80042c2:	4823      	ldr	r0, [pc, #140]	; (8004350 <HAL_TIM_Encoder_MspInit+0xf0>)
 80042c4:	f000 febc 	bl	8005040 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_TIM_Encoder_MspInit+0xf4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e6:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_TIM_Encoder_MspInit+0xf4>)
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80042ec:	e028      	b.n	8004340 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a19      	ldr	r2, [pc, #100]	; (8004358 <HAL_TIM_Encoder_MspInit+0xf8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d123      	bne.n	8004340 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	4a13      	ldr	r2, [pc, #76]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	61d3      	str	r3, [r2, #28]
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	6193      	str	r3, [r2, #24]
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_TIM_Encoder_MspInit+0xec>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8004328:	23c0      	movs	r3, #192	; 0xc0
 800432a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800432c:	2300      	movs	r3, #0
 800432e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	4619      	mov	r1, r3
 800433a:	4805      	ldr	r0, [pc, #20]	; (8004350 <HAL_TIM_Encoder_MspInit+0xf0>)
 800433c:	f000 fe80 	bl	8005040 <HAL_GPIO_Init>
}
 8004340:	bf00      	nop
 8004342:	3730      	adds	r7, #48	; 0x30
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40000400 	.word	0x40000400
 800434c:	40021000 	.word	0x40021000
 8004350:	40010c00 	.word	0x40010c00
 8004354:	40010000 	.word	0x40010000
 8004358:	40000800 	.word	0x40000800

0800435c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a35      	ldr	r2, [pc, #212]	; (800444c <HAL_TIM_MspPostInit+0xf0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d119      	bne.n	80043b0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437c:	4b34      	ldr	r3, [pc, #208]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4a33      	ldr	r2, [pc, #204]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	6193      	str	r3, [r2, #24]
 8004388:	4b31      	ldr	r3, [pc, #196]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = servo_out_Pin;
 8004394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800439a:	2302      	movs	r3, #2
 800439c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2302      	movs	r3, #2
 80043a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(servo_out_GPIO_Port, &GPIO_InitStruct);
 80043a2:	f107 0314 	add.w	r3, r7, #20
 80043a6:	4619      	mov	r1, r3
 80043a8:	482a      	ldr	r0, [pc, #168]	; (8004454 <HAL_TIM_MspPostInit+0xf8>)
 80043aa:	f000 fe49 	bl	8005040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80043ae:	e048      	b.n	8004442 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d143      	bne.n	8004442 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ba:	4b25      	ldr	r3, [pc, #148]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	4a24      	ldr	r2, [pc, #144]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 80043c0:	f043 0308 	orr.w	r3, r3, #8
 80043c4:	6193      	str	r3, [r2, #24]
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 80043d8:	f043 0304 	orr.w	r3, r3, #4
 80043dc:	6193      	str	r3, [r2, #24]
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_TIM_MspPostInit+0xf4>)
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMD_Pin;
 80043ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2302      	movs	r3, #2
 80043f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWMD_GPIO_Port, &GPIO_InitStruct);
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	4619      	mov	r1, r3
 80043fe:	4816      	ldr	r0, [pc, #88]	; (8004458 <HAL_TIM_MspPostInit+0xfc>)
 8004400:	f000 fe1e 	bl	8005040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWMG_Pin;
 8004404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440a:	2302      	movs	r3, #2
 800440c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2302      	movs	r3, #2
 8004410:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(PWMG_GPIO_Port, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	480e      	ldr	r0, [pc, #56]	; (8004454 <HAL_TIM_MspPostInit+0xf8>)
 800441a:	f000 fe11 	bl	8005040 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <HAL_TIM_MspPostInit+0x100>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	4a07      	ldr	r2, [pc, #28]	; (800445c <HAL_TIM_MspPostInit+0x100>)
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	6053      	str	r3, [r2, #4]
}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40021000 	.word	0x40021000
 8004454:	40010800 	.word	0x40010800
 8004458:	40010c00 	.word	0x40010c00
 800445c:	40010000 	.word	0x40010000

08004460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
   movs r1, #0
 8004460:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004462:	e003      	b.n	800446c <LoopCopyDataInit>

08004464 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004466:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004468:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800446a:	3104      	adds	r1, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800446c:	480a      	ldr	r0, [pc, #40]	; (8004498 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004470:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004472:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004474:	d3f6      	bcc.n	8004464 <CopyDataInit>
  ldr r2, =_sbss
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004478:	e002      	b.n	8004480 <LoopFillZerobss>

0800447a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800447a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800447c:	f842 3b04 	str.w	r3, [r2], #4

08004480 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004482:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004484:	d3f9      	bcc.n	800447a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004486:	f7ff fc3f 	bl	8003d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800448a:	f005 fb2d 	bl	8009ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800448e:	f7fe ffd9 	bl	8003444 <main>
  bx lr
 8004492:	4770      	bx	lr
  ldr r3, =_sidata
 8004494:	08009ff8 	.word	0x08009ff8
  ldr r0, =_sdata
 8004498:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800449c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80044a0:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 80044a4:	200002b0 	.word	0x200002b0

080044a8 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <BusFault_Handler>
	...

080044ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <HAL_Init+0x28>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <HAL_Init+0x28>)
 80044b6:	f043 0310 	orr.w	r3, r3, #16
 80044ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044bc:	2003      	movs	r0, #3
 80044be:	f000 fd7d 	bl	8004fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f000 f808 	bl	80044d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044c8:	f7ff fb68 	bl	8003b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40022000 	.word	0x40022000

080044d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044e0:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_InitTick+0x54>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_InitTick+0x58>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fd95 	bl	8005026 <HAL_SYSTICK_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e00e      	b.n	8004524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d80a      	bhi.n	8004522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800450c:	2200      	movs	r2, #0
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f000 fd5d 	bl	8004fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004518:	4a06      	ldr	r2, [pc, #24]	; (8004534 <HAL_InitTick+0x5c>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2000000c 	.word	0x2000000c
 8004530:	20000014 	.word	0x20000014
 8004534:	20000010 	.word	0x20000010

08004538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_IncTick+0x1c>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_IncTick+0x20>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4413      	add	r3, r2
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <HAL_IncTick+0x20>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	20000014 	.word	0x20000014
 8004558:	20000298 	.word	0x20000298

0800455c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return uwTick;
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <HAL_GetTick+0x10>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	20000298 	.word	0x20000298

08004570 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004574:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HAL_SuspendTick+0x18>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a03      	ldr	r2, [pc, #12]	; (8004588 <HAL_SuspendTick+0x18>)
 800457a:	f023 0302 	bic.w	r3, r3, #2
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	e000e010 	.word	0xe000e010

0800458c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0be      	b.n	800472c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fe fe34 	bl	8003238 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fbdd 	bl	8004d90 <ADC_ConversionStop_Disable>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 8099 	bne.w	800471a <HAL_ADC_Init+0x18e>
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 8095 	bne.w	800471a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045f8:	f023 0302 	bic.w	r3, r3, #2
 80045fc:	f043 0202 	orr.w	r2, r3, #2
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800460c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	7b1b      	ldrb	r3, [r3, #12]
 8004612:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004614:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	4313      	orrs	r3, r2
 800461a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004624:	d003      	beq.n	800462e <HAL_ADC_Init+0xa2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d102      	bne.n	8004634 <HAL_ADC_Init+0xa8>
 800462e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004632:	e000      	b.n	8004636 <HAL_ADC_Init+0xaa>
 8004634:	2300      	movs	r3, #0
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7d1b      	ldrb	r3, [r3, #20]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d119      	bne.n	8004678 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	7b1b      	ldrb	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	3b01      	subs	r3, #1
 8004652:	035a      	lsls	r2, r3, #13
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	e00b      	b.n	8004678 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	f043 0220 	orr.w	r2, r3, #32
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	4b28      	ldr	r3, [pc, #160]	; (8004734 <HAL_ADC_Init+0x1a8>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	430b      	orrs	r3, r1
 800469e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a8:	d003      	beq.n	80046b2 <HAL_ADC_Init+0x126>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d104      	bne.n	80046bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	051b      	lsls	r3, r3, #20
 80046ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_ADC_Init+0x1ac>)
 80046d8:	4013      	ands	r3, r2
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d10b      	bne.n	80046f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80046f6:	e018      	b.n	800472a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	f023 0312 	bic.w	r3, r3, #18
 8004700:	f043 0210 	orr.w	r2, r3, #16
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004718:	e007      	b.n	800472a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f043 0210 	orr.w	r2, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	ffe1f7fd 	.word	0xffe1f7fd
 8004738:	ff1f0efe 	.word	0xff1f0efe

0800473c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_ADC_Start_IT+0x1a>
 8004752:	2302      	movs	r3, #2
 8004754:	e0a0      	b.n	8004898 <HAL_ADC_Start_IT+0x15c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fabc 	bl	8004cdc <ADC_Enable>
 8004764:	4603      	mov	r3, r0
 8004766:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f040 808f 	bne.w	800488e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a45      	ldr	r2, [pc, #276]	; (80048a0 <HAL_ADC_Start_IT+0x164>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d105      	bne.n	800479a <HAL_ADC_Start_IT+0x5e>
 800478e:	4b45      	ldr	r3, [pc, #276]	; (80048a4 <HAL_ADC_Start_IT+0x168>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d115      	bne.n	80047c6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d026      	beq.n	8004802 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047c4:	e01d      	b.n	8004802 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <HAL_ADC_Start_IT+0x168>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_ADC_Start_IT+0xaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2f      	ldr	r2, [pc, #188]	; (80048a0 <HAL_ADC_Start_IT+0x164>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d10d      	bne.n	8004802 <HAL_ADC_Start_IT+0xc6>
 80047e6:	4b2f      	ldr	r3, [pc, #188]	; (80048a4 <HAL_ADC_Start_IT+0x168>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d006      	beq.n	800481c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	f023 0206 	bic.w	r2, r3, #6
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	62da      	str	r2, [r3, #44]	; 0x2c
 800481a:	e002      	b.n	8004822 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f06f 0202 	mvn.w	r2, #2
 8004832:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0220 	orr.w	r2, r2, #32
 8004842:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800484e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004852:	d113      	bne.n	800487c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <HAL_ADC_Start_IT+0x164>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d105      	bne.n	800486a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <HAL_ADC_Start_IT+0x168>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	e00c      	b.n	8004896 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	e003      	b.n	8004896 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004896:	7bfb      	ldrb	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40012800 	.word	0x40012800
 80048a4:	40012400 	.word	0x40012400

080048a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d140      	bne.n	8004940 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d139      	bne.n	8004940 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80048ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80048f2:	d11d      	bne.n	8004930 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d119      	bne.n	8004930 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0220 	bic.w	r2, r2, #32
 800490a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d105      	bne.n	8004930 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f043 0201 	orr.w	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f87c 	bl	8004a2e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f06f 0212 	mvn.w	r2, #18
 800493e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b80      	cmp	r3, #128	; 0x80
 800494c:	d14f      	bne.n	80049ee <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b04      	cmp	r3, #4
 800495a:	d148      	bne.n	80049ee <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b00      	cmp	r3, #0
 8004966:	d105      	bne.n	8004974 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800497e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004982:	d012      	beq.n	80049aa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800498e:	2b00      	cmp	r3, #0
 8004990:	d125      	bne.n	80049de <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800499c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80049a0:	d11d      	bne.n	80049de <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d119      	bne.n	80049de <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d105      	bne.n	80049de <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa17 	bl	8004e12 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 020c 	mvn.w	r2, #12
 80049ec:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d114      	bne.n	8004a26 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10d      	bne.n	8004a26 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe fff4 	bl	8003a04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0201 	mvn.w	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x20>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0dc      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x1da>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b06      	cmp	r3, #6
 8004a6e:	d81c      	bhi.n	8004aaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	3b05      	subs	r3, #5
 8004a82:	221f      	movs	r2, #31
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	4019      	ands	r1, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	3b05      	subs	r3, #5
 8004a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	635a      	str	r2, [r3, #52]	; 0x34
 8004aa8:	e03c      	b.n	8004b24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d81c      	bhi.n	8004aec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3b23      	subs	r3, #35	; 0x23
 8004ac4:	221f      	movs	r2, #31
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	4019      	ands	r1, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	3b23      	subs	r3, #35	; 0x23
 8004ade:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aea:	e01b      	b.n	8004b24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	3b41      	subs	r3, #65	; 0x41
 8004afe:	221f      	movs	r2, #31
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	4019      	ands	r1, r3
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	3b41      	subs	r3, #65	; 0x41
 8004b18:	fa00 f203 	lsl.w	r2, r0, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b09      	cmp	r3, #9
 8004b2a:	d91c      	bls.n	8004b66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68d9      	ldr	r1, [r3, #12]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3b1e      	subs	r3, #30
 8004b3e:	2207      	movs	r2, #7
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	4019      	ands	r1, r3
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6898      	ldr	r0, [r3, #8]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	3b1e      	subs	r3, #30
 8004b58:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e019      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6919      	ldr	r1, [r3, #16]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	2207      	movs	r2, #7
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	4019      	ands	r1, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6898      	ldr	r0, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d003      	beq.n	8004baa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ba6:	2b11      	cmp	r3, #17
 8004ba8:	d132      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <HAL_ADC_ConfigChannel+0x1e4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d125      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d126      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004bd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d11a      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_ADC_ConfigChannel+0x1e8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <HAL_ADC_ConfigChannel+0x1ec>)
 8004be0:	fba2 2303 	umull	r2, r3, r2, r3
 8004be4:	0c9a      	lsrs	r2, r3, #18
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bf0:	e002      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f9      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x1b2>
 8004bfe:	e007      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f043 0220 	orr.w	r2, r3, #32
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	40012400 	.word	0x40012400
 8004c28:	2000000c 	.word	0x2000000c
 8004c2c:	431bde83 	.word	0x431bde83

08004c30 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8004c4a:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_ADC_AnalogWDGConfig+0x2a>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e035      	b.n	8004cc6 <HAL_ADC_AnalogWDGConfig+0x96>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	7a1b      	ldrb	r3, [r3, #8]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e007      	b.n	8004c8c <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8a:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	6811      	ldr	r1, [r2, #0]
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	6852      	ldr	r2, [r2, #4]
 8004c9e:	4311      	orrs	r1, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	68d2      	ldr	r2, [r2, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	6912      	ldr	r2, [r2, #16]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	00800200 	.word	0x00800200
 8004cd4:	00400200 	.word	0x00400200
 8004cd8:	ff3ffde0 	.word	0xff3ffde0

08004cdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d040      	beq.n	8004d7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d0a:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <ADC_Enable+0xac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <ADC_Enable+0xb0>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	0c9b      	lsrs	r3, r3, #18
 8004d16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d18:	e002      	b.n	8004d20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f9      	bne.n	8004d1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d26:	f7ff fc19 	bl	800455c <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d2c:	e01f      	b.n	8004d6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d2e:	f7ff fc15 	bl	800455c <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d918      	bls.n	8004d6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d011      	beq.n	8004d6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f043 0210 	orr.w	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	f043 0201 	orr.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d1d8      	bne.n	8004d2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c
 8004d8c:	431bde83 	.word	0x431bde83

08004d90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d12e      	bne.n	8004e08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004dba:	f7ff fbcf 	bl	800455c <HAL_GetTick>
 8004dbe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004dc0:	e01b      	b.n	8004dfa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dc2:	f7ff fbcb 	bl	800455c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d914      	bls.n	8004dfa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d10d      	bne.n	8004dfa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	f043 0210 	orr.w	r2, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	f043 0201 	orr.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e007      	b.n	8004e0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d0dc      	beq.n	8004dc2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e56:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <__NVIC_SetPriorityGrouping+0x44>)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	60d3      	str	r3, [r2, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <__NVIC_GetPriorityGrouping+0x18>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0307 	and.w	r3, r3, #7
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	db0b      	blt.n	8004eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	f003 021f 	and.w	r2, r3, #31
 8004ea0:	4906      	ldr	r1, [pc, #24]	; (8004ebc <__NVIC_EnableIRQ+0x34>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	e000e100 	.word	0xe000e100

08004ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	6039      	str	r1, [r7, #0]
 8004eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	db0a      	blt.n	8004eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	490c      	ldr	r1, [pc, #48]	; (8004f0c <__NVIC_SetPriority+0x4c>)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	0112      	lsls	r2, r2, #4
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ee8:	e00a      	b.n	8004f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4908      	ldr	r1, [pc, #32]	; (8004f10 <__NVIC_SetPriority+0x50>)
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	0112      	lsls	r2, r2, #4
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	440b      	add	r3, r1
 8004efe:	761a      	strb	r2, [r3, #24]
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000e100 	.word	0xe000e100
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b089      	sub	sp, #36	; 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	bf28      	it	cs
 8004f32:	2304      	movcs	r3, #4
 8004f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d902      	bls.n	8004f44 <NVIC_EncodePriority+0x30>
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3b03      	subs	r3, #3
 8004f42:	e000      	b.n	8004f46 <NVIC_EncodePriority+0x32>
 8004f44:	2300      	movs	r3, #0
 8004f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43da      	mvns	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	401a      	ands	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	43d9      	mvns	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f6c:	4313      	orrs	r3, r2
         );
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3724      	adds	r7, #36	; 0x24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f88:	d301      	bcc.n	8004f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e00f      	b.n	8004fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f8e:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <SysTick_Config+0x40>)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f96:	210f      	movs	r1, #15
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	f7ff ff90 	bl	8004ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <SysTick_Config+0x40>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <SysTick_Config+0x40>)
 8004fa8:	2207      	movs	r2, #7
 8004faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	e000e010 	.word	0xe000e010

08004fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff2d 	bl	8004e24 <__NVIC_SetPriorityGrouping>
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	4603      	mov	r3, r0
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fe4:	f7ff ff42 	bl	8004e6c <__NVIC_GetPriorityGrouping>
 8004fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	6978      	ldr	r0, [r7, #20]
 8004ff0:	f7ff ff90 	bl	8004f14 <NVIC_EncodePriority>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ff5f 	bl	8004ec0 <__NVIC_SetPriority>
}
 8005002:	bf00      	nop
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff ff35 	bl	8004e88 <__NVIC_EnableIRQ>
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff ffa2 	bl	8004f78 <SysTick_Config>
 8005034:	4603      	mov	r3, r0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005040:	b480      	push	{r7}
 8005042:	b08b      	sub	sp, #44	; 0x2c
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005052:	e169      	b.n	8005328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005054:	2201      	movs	r2, #1
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	429a      	cmp	r2, r3
 800506e:	f040 8158 	bne.w	8005322 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4a9a      	ldr	r2, [pc, #616]	; (80052e0 <HAL_GPIO_Init+0x2a0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d05e      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 800507c:	4a98      	ldr	r2, [pc, #608]	; (80052e0 <HAL_GPIO_Init+0x2a0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d875      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 8005082:	4a98      	ldr	r2, [pc, #608]	; (80052e4 <HAL_GPIO_Init+0x2a4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d058      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 8005088:	4a96      	ldr	r2, [pc, #600]	; (80052e4 <HAL_GPIO_Init+0x2a4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d86f      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 800508e:	4a96      	ldr	r2, [pc, #600]	; (80052e8 <HAL_GPIO_Init+0x2a8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d052      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 8005094:	4a94      	ldr	r2, [pc, #592]	; (80052e8 <HAL_GPIO_Init+0x2a8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d869      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 800509a:	4a94      	ldr	r2, [pc, #592]	; (80052ec <HAL_GPIO_Init+0x2ac>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d04c      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 80050a0:	4a92      	ldr	r2, [pc, #584]	; (80052ec <HAL_GPIO_Init+0x2ac>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d863      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 80050a6:	4a92      	ldr	r2, [pc, #584]	; (80052f0 <HAL_GPIO_Init+0x2b0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d046      	beq.n	800513a <HAL_GPIO_Init+0xfa>
 80050ac:	4a90      	ldr	r2, [pc, #576]	; (80052f0 <HAL_GPIO_Init+0x2b0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d85d      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 80050b2:	2b12      	cmp	r3, #18
 80050b4:	d82a      	bhi.n	800510c <HAL_GPIO_Init+0xcc>
 80050b6:	2b12      	cmp	r3, #18
 80050b8:	d859      	bhi.n	800516e <HAL_GPIO_Init+0x12e>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_GPIO_Init+0x80>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	0800513b 	.word	0x0800513b
 80050c4:	08005115 	.word	0x08005115
 80050c8:	08005127 	.word	0x08005127
 80050cc:	08005169 	.word	0x08005169
 80050d0:	0800516f 	.word	0x0800516f
 80050d4:	0800516f 	.word	0x0800516f
 80050d8:	0800516f 	.word	0x0800516f
 80050dc:	0800516f 	.word	0x0800516f
 80050e0:	0800516f 	.word	0x0800516f
 80050e4:	0800516f 	.word	0x0800516f
 80050e8:	0800516f 	.word	0x0800516f
 80050ec:	0800516f 	.word	0x0800516f
 80050f0:	0800516f 	.word	0x0800516f
 80050f4:	0800516f 	.word	0x0800516f
 80050f8:	0800516f 	.word	0x0800516f
 80050fc:	0800516f 	.word	0x0800516f
 8005100:	0800516f 	.word	0x0800516f
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005131 	.word	0x08005131
 800510c:	4a79      	ldr	r2, [pc, #484]	; (80052f4 <HAL_GPIO_Init+0x2b4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d013      	beq.n	800513a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005112:	e02c      	b.n	800516e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	623b      	str	r3, [r7, #32]
          break;
 800511a:	e029      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	623b      	str	r3, [r7, #32]
          break;
 8005124:	e024      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	3308      	adds	r3, #8
 800512c:	623b      	str	r3, [r7, #32]
          break;
 800512e:	e01f      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	330c      	adds	r3, #12
 8005136:	623b      	str	r3, [r7, #32]
          break;
 8005138:	e01a      	b.n	8005170 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005142:	2304      	movs	r3, #4
 8005144:	623b      	str	r3, [r7, #32]
          break;
 8005146:	e013      	b.n	8005170 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d105      	bne.n	800515c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005150:	2308      	movs	r3, #8
 8005152:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	611a      	str	r2, [r3, #16]
          break;
 800515a:	e009      	b.n	8005170 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800515c:	2308      	movs	r3, #8
 800515e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	615a      	str	r2, [r3, #20]
          break;
 8005166:	e003      	b.n	8005170 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
          break;
 800516c:	e000      	b.n	8005170 <HAL_GPIO_Init+0x130>
          break;
 800516e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2bff      	cmp	r3, #255	; 0xff
 8005174:	d801      	bhi.n	800517a <HAL_GPIO_Init+0x13a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	e001      	b.n	800517e <HAL_GPIO_Init+0x13e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	2bff      	cmp	r3, #255	; 0xff
 8005184:	d802      	bhi.n	800518c <HAL_GPIO_Init+0x14c>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	e002      	b.n	8005192 <HAL_GPIO_Init+0x152>
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	3b08      	subs	r3, #8
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	210f      	movs	r1, #15
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	fa01 f303 	lsl.w	r3, r1, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	401a      	ands	r2, r3
 80051a4:	6a39      	ldr	r1, [r7, #32]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	fa01 f303 	lsl.w	r3, r1, r3
 80051ac:	431a      	orrs	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80b1 	beq.w	8005322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80051c0:	4b4d      	ldr	r3, [pc, #308]	; (80052f8 <HAL_GPIO_Init+0x2b8>)
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	4a4c      	ldr	r2, [pc, #304]	; (80052f8 <HAL_GPIO_Init+0x2b8>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6193      	str	r3, [r2, #24]
 80051cc:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_GPIO_Init+0x2b8>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80051d8:	4a48      	ldr	r2, [pc, #288]	; (80052fc <HAL_GPIO_Init+0x2bc>)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	3302      	adds	r3, #2
 80051e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	220f      	movs	r2, #15
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4013      	ands	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a40      	ldr	r2, [pc, #256]	; (8005300 <HAL_GPIO_Init+0x2c0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_GPIO_Init+0x1ec>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a3f      	ldr	r2, [pc, #252]	; (8005304 <HAL_GPIO_Init+0x2c4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00d      	beq.n	8005228 <HAL_GPIO_Init+0x1e8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a3e      	ldr	r2, [pc, #248]	; (8005308 <HAL_GPIO_Init+0x2c8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <HAL_GPIO_Init+0x1e4>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a3d      	ldr	r2, [pc, #244]	; (800530c <HAL_GPIO_Init+0x2cc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_GPIO_Init+0x1e0>
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 8005220:	2304      	movs	r3, #4
 8005222:	e004      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 8005224:	2302      	movs	r3, #2
 8005226:	e002      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_GPIO_Init+0x1ee>
 800522c:	2300      	movs	r3, #0
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	f002 0203 	and.w	r2, r2, #3
 8005234:	0092      	lsls	r2, r2, #2
 8005236:	4093      	lsls	r3, r2
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800523e:	492f      	ldr	r1, [pc, #188]	; (80052fc <HAL_GPIO_Init+0x2bc>)
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	089b      	lsrs	r3, r3, #2
 8005244:	3302      	adds	r3, #2
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	492c      	ldr	r1, [pc, #176]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	600b      	str	r3, [r1, #0]
 8005264:	e006      	b.n	8005274 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005266:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	43db      	mvns	r3, r3
 800526e:	4928      	ldr	r1, [pc, #160]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 8005270:	4013      	ands	r3, r2
 8005272:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005280:	4b23      	ldr	r3, [pc, #140]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4922      	ldr	r1, [pc, #136]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
 800528c:	e006      	b.n	800529c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	43db      	mvns	r3, r3
 8005296:	491e      	ldr	r1, [pc, #120]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 8005298:	4013      	ands	r3, r2
 800529a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4918      	ldr	r1, [pc, #96]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	608b      	str	r3, [r1, #8]
 80052b4:	e006      	b.n	80052c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052b6:	4b16      	ldr	r3, [pc, #88]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	43db      	mvns	r3, r3
 80052be:	4914      	ldr	r1, [pc, #80]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d021      	beq.n	8005314 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	490e      	ldr	r1, [pc, #56]	; (8005310 <HAL_GPIO_Init+0x2d0>)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60cb      	str	r3, [r1, #12]
 80052dc:	e021      	b.n	8005322 <HAL_GPIO_Init+0x2e2>
 80052de:	bf00      	nop
 80052e0:	10320000 	.word	0x10320000
 80052e4:	10310000 	.word	0x10310000
 80052e8:	10220000 	.word	0x10220000
 80052ec:	10210000 	.word	0x10210000
 80052f0:	10120000 	.word	0x10120000
 80052f4:	10110000 	.word	0x10110000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010800 	.word	0x40010800
 8005304:	40010c00 	.word	0x40010c00
 8005308:	40011000 	.word	0x40011000
 800530c:	40011400 	.word	0x40011400
 8005310:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005314:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <HAL_GPIO_Init+0x304>)
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	43db      	mvns	r3, r3
 800531c:	4909      	ldr	r1, [pc, #36]	; (8005344 <HAL_GPIO_Init+0x304>)
 800531e:	4013      	ands	r3, r2
 8005320:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	f47f ae8e 	bne.w	8005054 <HAL_GPIO_Init+0x14>
  }
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	372c      	adds	r7, #44	; 0x2c
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	40010400 	.word	0x40010400

08005348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	807b      	strh	r3, [r7, #2]
 8005354:	4613      	mov	r3, r2
 8005356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005358:	787b      	ldrb	r3, [r7, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800535e:	887a      	ldrh	r2, [r7, #2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005364:	e003      	b.n	800536e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005366:	887b      	ldrh	r3, [r7, #2]
 8005368:	041a      	lsls	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005382:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d006      	beq.n	800539c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800538e:	4a05      	ldr	r2, [pc, #20]	; (80053a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fa34 	bl	8003804 <HAL_GPIO_EXTI_Callback>
  }
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40010400 	.word	0x40010400

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e272      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8087 	beq.w	80054d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053c8:	4b92      	ldr	r3, [pc, #584]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d00c      	beq.n	80053ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053d4:	4b8f      	ldr	r3, [pc, #572]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d112      	bne.n	8005406 <HAL_RCC_OscConfig+0x5e>
 80053e0:	4b8c      	ldr	r3, [pc, #560]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ec:	d10b      	bne.n	8005406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ee:	4b89      	ldr	r3, [pc, #548]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06c      	beq.n	80054d4 <HAL_RCC_OscConfig+0x12c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d168      	bne.n	80054d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e24c      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540e:	d106      	bne.n	800541e <HAL_RCC_OscConfig+0x76>
 8005410:	4b80      	ldr	r3, [pc, #512]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a7f      	ldr	r2, [pc, #508]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e02e      	b.n	800547c <HAL_RCC_OscConfig+0xd4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x98>
 8005426:	4b7b      	ldr	r3, [pc, #492]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a7a      	ldr	r2, [pc, #488]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800542c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b78      	ldr	r3, [pc, #480]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a77      	ldr	r2, [pc, #476]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0xd4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0xbc>
 800544a:	4b72      	ldr	r3, [pc, #456]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a71      	ldr	r2, [pc, #452]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b6f      	ldr	r3, [pc, #444]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a6e      	ldr	r2, [pc, #440]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0xd4>
 8005464:	4b6b      	ldr	r3, [pc, #428]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6a      	ldr	r2, [pc, #424]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b68      	ldr	r3, [pc, #416]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a67      	ldr	r2, [pc, #412]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7ff f86a 	bl	800455c <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7ff f866 	bl	800455c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e200      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	4b5d      	ldr	r3, [pc, #372]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xe4>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ac:	f7ff f856 	bl	800455c <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7ff f852 	bl	800455c <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e1ec      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	4b53      	ldr	r3, [pc, #332]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0x10c>
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d063      	beq.n	80055aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054e2:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054ee:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d11c      	bne.n	8005534 <HAL_RCC_OscConfig+0x18c>
 80054fa:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d116      	bne.n	8005534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005506:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_RCC_OscConfig+0x176>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e1c0      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551e:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4939      	ldr	r1, [pc, #228]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005532:	e03a      	b.n	80055aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d020      	beq.n	800557e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005542:	f7ff f80b 	bl	800455c <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800554a:	f7ff f807 	bl	800455c <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e1a1      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	4b2d      	ldr	r3, [pc, #180]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	4b2a      	ldr	r3, [pc, #168]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4927      	ldr	r1, [pc, #156]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 8005578:	4313      	orrs	r3, r2
 800557a:	600b      	str	r3, [r1, #0]
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557e:	4b26      	ldr	r3, [pc, #152]	; (8005618 <HAL_RCC_OscConfig+0x270>)
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005584:	f7fe ffea 	bl	800455c <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558c:	f7fe ffe6 	bl	800455c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e180      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d03a      	beq.n	800562c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d019      	beq.n	80055f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_RCC_OscConfig+0x274>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c4:	f7fe ffca 	bl	800455c <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055cc:	f7fe ffc6 	bl	800455c <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e160      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055ea:	2001      	movs	r0, #1
 80055ec:	f000 faa6 	bl	8005b3c <RCC_Delay>
 80055f0:	e01c      	b.n	800562c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <HAL_RCC_OscConfig+0x274>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f8:	f7fe ffb0 	bl	800455c <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055fe:	e00f      	b.n	8005620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005600:	f7fe ffac 	bl	800455c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d908      	bls.n	8005620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e146      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
 8005618:	42420000 	.word	0x42420000
 800561c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005620:	4b92      	ldr	r3, [pc, #584]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e9      	bne.n	8005600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a6 	beq.w	8005786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563e:	4b8b      	ldr	r3, [pc, #556]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10d      	bne.n	8005666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	4b88      	ldr	r3, [pc, #544]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4a87      	ldr	r2, [pc, #540]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005654:	61d3      	str	r3, [r2, #28]
 8005656:	4b85      	ldr	r3, [pc, #532]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005662:	2301      	movs	r3, #1
 8005664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005666:	4b82      	ldr	r3, [pc, #520]	; (8005870 <HAL_RCC_OscConfig+0x4c8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	2b00      	cmp	r3, #0
 8005670:	d118      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005672:	4b7f      	ldr	r3, [pc, #508]	; (8005870 <HAL_RCC_OscConfig+0x4c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a7e      	ldr	r2, [pc, #504]	; (8005870 <HAL_RCC_OscConfig+0x4c8>)
 8005678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567e:	f7fe ff6d 	bl	800455c <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005686:	f7fe ff69 	bl	800455c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b64      	cmp	r3, #100	; 0x64
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e103      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005698:	4b75      	ldr	r3, [pc, #468]	; (8005870 <HAL_RCC_OscConfig+0x4c8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d106      	bne.n	80056ba <HAL_RCC_OscConfig+0x312>
 80056ac:	4b6f      	ldr	r3, [pc, #444]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4a6e      	ldr	r2, [pc, #440]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	6213      	str	r3, [r2, #32]
 80056b8:	e02d      	b.n	8005716 <HAL_RCC_OscConfig+0x36e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <HAL_RCC_OscConfig+0x334>
 80056c2:	4b6a      	ldr	r3, [pc, #424]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	4a69      	ldr	r2, [pc, #420]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	6213      	str	r3, [r2, #32]
 80056ce:	4b67      	ldr	r3, [pc, #412]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	4a66      	ldr	r2, [pc, #408]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	6213      	str	r3, [r2, #32]
 80056da:	e01c      	b.n	8005716 <HAL_RCC_OscConfig+0x36e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	d10c      	bne.n	80056fe <HAL_RCC_OscConfig+0x356>
 80056e4:	4b61      	ldr	r3, [pc, #388]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	4a60      	ldr	r2, [pc, #384]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	6213      	str	r3, [r2, #32]
 80056f0:	4b5e      	ldr	r3, [pc, #376]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	4a5d      	ldr	r2, [pc, #372]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6213      	str	r3, [r2, #32]
 80056fc:	e00b      	b.n	8005716 <HAL_RCC_OscConfig+0x36e>
 80056fe:	4b5b      	ldr	r3, [pc, #364]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	4a5a      	ldr	r2, [pc, #360]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	6213      	str	r3, [r2, #32]
 800570a:	4b58      	ldr	r3, [pc, #352]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	4a57      	ldr	r2, [pc, #348]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d015      	beq.n	800574a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571e:	f7fe ff1d 	bl	800455c <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fe ff19 	bl	800455c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0b1      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	4b4b      	ldr	r3, [pc, #300]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ee      	beq.n	8005726 <HAL_RCC_OscConfig+0x37e>
 8005748:	e014      	b.n	8005774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574a:	f7fe ff07 	bl	800455c <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fe ff03 	bl	800455c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e09b      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005768:	4b40      	ldr	r3, [pc, #256]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1ee      	bne.n	8005752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577a:	4b3c      	ldr	r3, [pc, #240]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	4a3b      	ldr	r2, [pc, #236]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8087 	beq.w	800589e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005790:	4b36      	ldr	r3, [pc, #216]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d061      	beq.n	8005860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d146      	bne.n	8005832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b33      	ldr	r3, [pc, #204]	; (8005874 <HAL_RCC_OscConfig+0x4cc>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fe fed7 	bl	800455c <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fe fed3 	bl	800455c <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e06d      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c4:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d108      	bne.n	80057ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057da:	4b24      	ldr	r3, [pc, #144]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	4921      	ldr	r1, [pc, #132]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ec:	4b1f      	ldr	r3, [pc, #124]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a19      	ldr	r1, [r3, #32]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	430b      	orrs	r3, r1
 80057fe:	491b      	ldr	r1, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005804:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCC_OscConfig+0x4cc>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fe fea7 	bl	800455c <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005812:	f7fe fea3 	bl	800455c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e03d      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x46a>
 8005830:	e035      	b.n	800589e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_RCC_OscConfig+0x4cc>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fe fe90 	bl	800455c <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005840:	f7fe fe8c 	bl	800455c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e026      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCC_OscConfig+0x4c4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCC_OscConfig+0x498>
 800585e:	e01e      	b.n	800589e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e019      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
 800586c:	40021000 	.word	0x40021000
 8005870:	40007000 	.word	0x40007000
 8005874:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_RCC_OscConfig+0x500>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	429a      	cmp	r2, r3
 800588a:	d106      	bne.n	800589a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0d0      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c0:	4b6a      	ldr	r3, [pc, #424]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d910      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ce:	4b67      	ldr	r3, [pc, #412]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 0207 	bic.w	r2, r3, #7
 80058d6:	4965      	ldr	r1, [pc, #404]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058de:	4b63      	ldr	r3, [pc, #396]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0b8      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d020      	beq.n	800593e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005908:	4b59      	ldr	r3, [pc, #356]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	4a58      	ldr	r2, [pc, #352]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800590e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005920:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a52      	ldr	r2, [pc, #328]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800592a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592c:	4b50      	ldr	r3, [pc, #320]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	494d      	ldr	r1, [pc, #308]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d040      	beq.n	80059cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005952:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d115      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e07f      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e073      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597a:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e06b      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598a:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	4936      	ldr	r1, [pc, #216]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005998:	4313      	orrs	r3, r2
 800599a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800599c:	f7fe fdde 	bl	800455c <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	e00a      	b.n	80059ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a4:	f7fe fdda 	bl	800455c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e053      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ba:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f003 020c 	and.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1eb      	bne.n	80059a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059cc:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d210      	bcs.n	80059fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b24      	ldr	r3, [pc, #144]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 0207 	bic.w	r2, r3, #7
 80059e2:	4922      	ldr	r1, [pc, #136]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e032      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a08:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4916      	ldr	r1, [pc, #88]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	490e      	ldr	r1, [pc, #56]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a3a:	f000 f821 	bl	8005a80 <HAL_RCC_GetSysClockFreq>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCC_ClockConfig+0x1c4>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	091b      	lsrs	r3, r3, #4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	490a      	ldr	r1, [pc, #40]	; (8005a74 <HAL_RCC_ClockConfig+0x1c8>)
 8005a4c:	5ccb      	ldrb	r3, [r1, r3]
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <HAL_RCC_ClockConfig+0x1cc>)
 8005a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <HAL_RCC_ClockConfig+0x1d0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fd3c 	bl	80044d8 <HAL_InitTick>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40022000 	.word	0x40022000
 8005a70:	40021000 	.word	0x40021000
 8005a74:	08009d68 	.word	0x08009d68
 8005a78:	2000000c 	.word	0x2000000c
 8005a7c:	20000010 	.word	0x20000010

08005a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a80:	b490      	push	{r4, r7}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a86:	4b29      	ldr	r3, [pc, #164]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xac>)
 8005a88:	1d3c      	adds	r4, r7, #4
 8005a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a90:	f240 2301 	movw	r3, #513	; 0x201
 8005a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005aaa:	4b21      	ldr	r3, [pc, #132]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8005abe:	e02b      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ac2:	623b      	str	r3, [r7, #32]
      break;
 8005ac4:	e02b      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	0c9b      	lsrs	r3, r3, #18
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	3328      	adds	r3, #40	; 0x28
 8005ad0:	443b      	add	r3, r7
 8005ad2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005ad6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d012      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ae2:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	0c5b      	lsrs	r3, r3, #17
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	3328      	adds	r3, #40	; 0x28
 8005aee:	443b      	add	r3, r7
 8005af0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005af4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005afa:	fb03 f202 	mul.w	r2, r3, r2
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	e004      	b.n	8005b12 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	4a0b      	ldr	r2, [pc, #44]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b0c:	fb02 f303 	mul.w	r3, r2, r3
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	623b      	str	r3, [r7, #32]
      break;
 8005b16:	e002      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b1a:	623b      	str	r3, [r7, #32]
      break;
 8005b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3728      	adds	r7, #40	; 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc90      	pop	{r4, r7}
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	08009d58 	.word	0x08009d58
 8005b30:	40021000 	.word	0x40021000
 8005b34:	007a1200 	.word	0x007a1200
 8005b38:	003d0900 	.word	0x003d0900

08005b3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <RCC_Delay+0x34>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <RCC_Delay+0x38>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a5b      	lsrs	r3, r3, #9
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b58:	bf00      	nop
  }
  while (Delay --);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1e5a      	subs	r2, r3, #1
 8005b5e:	60fa      	str	r2, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f9      	bne.n	8005b58 <RCC_Delay+0x1c>
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	2000000c 	.word	0x2000000c
 8005b74:	10624dd3 	.word	0x10624dd3

08005b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d07d      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b94:	2300      	movs	r3, #0
 8005b96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b98:	4b4f      	ldr	r3, [pc, #316]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba4:	4b4c      	ldr	r3, [pc, #304]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	4a4b      	ldr	r2, [pc, #300]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bae:	61d3      	str	r3, [r2, #28]
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb8:	60bb      	str	r3, [r7, #8]
 8005bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc0:	4b46      	ldr	r3, [pc, #280]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d118      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bcc:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a42      	ldr	r2, [pc, #264]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd8:	f7fe fcc0 	bl	800455c <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bde:	e008      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be0:	f7fe fcbc 	bl	800455c <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e06d      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b3a      	ldr	r3, [pc, #232]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0f0      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d02e      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d027      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c1c:	4b2e      	ldr	r3, [pc, #184]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c26:	4b2e      	ldr	r3, [pc, #184]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c32:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d014      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c42:	f7fe fc8b 	bl	800455c <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c48:	e00a      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c4a:	f7fe fc87 	bl	800455c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e036      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c60:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ee      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4917      	ldr	r1, [pc, #92]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d105      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c84:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	4a13      	ldr	r2, [pc, #76]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	490b      	ldr	r1, [pc, #44]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cba:	4b07      	ldr	r3, [pc, #28]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	4904      	ldr	r1, [pc, #16]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	42420440 	.word	0x42420440

08005ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e041      	b.n	8005d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fe fa46 	bl	800419c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f001 f812 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d001      	beq.n	8005d9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e032      	b.n	8005e02 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_TIM_Base_Start+0x88>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_TIM_Base_Start+0x48>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d009      	beq.n	8005dcc <HAL_TIM_Base_Start+0x48>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a14      	ldr	r2, [pc, #80]	; (8005e10 <HAL_TIM_Base_Start+0x8c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_TIM_Base_Start+0x48>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <HAL_TIM_Base_Start+0x90>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d111      	bne.n	8005df0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d010      	beq.n	8005e00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dee:	e007      	b.n	8005e00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40000400 	.word	0x40000400
 8005e14:	40000800 	.word	0x40000800

08005e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e03a      	b.n	8005ea6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	; (8005eb0 <HAL_TIM_Base_Start_IT+0x98>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x58>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5a:	d009      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x58>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x58>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d111      	bne.n	8005e94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b06      	cmp	r3, #6
 8005e80:	d010      	beq.n	8005ea4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	e007      	b.n	8005ea4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800

08005ebc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e041      	b.n	8005f52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f839 	bl	8005f5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f000 ff26 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d109      	bne.n	8005f90 <HAL_TIM_PWM_Start+0x24>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	bf14      	ite	ne
 8005f88:	2301      	movne	r3, #1
 8005f8a:	2300      	moveq	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	e022      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d109      	bne.n	8005faa <HAL_TIM_PWM_Start+0x3e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	bf14      	ite	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e015      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d109      	bne.n	8005fc4 <HAL_TIM_PWM_Start+0x58>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	bf14      	ite	ne
 8005fbc:	2301      	movne	r3, #1
 8005fbe:	2300      	moveq	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e008      	b.n	8005fd6 <HAL_TIM_PWM_Start+0x6a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2301      	movne	r3, #1
 8005fd2:	2300      	moveq	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e05e      	b.n	800609c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0x82>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fec:	e013      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d104      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x92>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ffc:	e00b      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d104      	bne.n	800600e <HAL_TIM_PWM_Start+0xa2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600c:	e003      	b.n	8006016 <HAL_TIM_PWM_Start+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f001 faaf 	bl	8007582 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_TIM_PWM_Start+0x138>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d107      	bne.n	800603e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_TIM_PWM_Start+0x138>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIM_PWM_Start+0xfa>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d009      	beq.n	8006066 <HAL_TIM_PWM_Start+0xfa>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <HAL_TIM_PWM_Start+0x13c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIM_PWM_Start+0xfa>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a12      	ldr	r2, [pc, #72]	; (80060ac <HAL_TIM_PWM_Start+0x140>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d111      	bne.n	800608a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d010      	beq.n	800609a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006088:	e007      	b.n	800609a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0201 	orr.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800

080060b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e041      	b.n	8006146 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f839 	bl	800614e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4619      	mov	r1, r3
 80060ee:	4610      	mov	r0, r2
 80060f0:	f000 fe2c 	bl	8006d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr

08006160 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d104      	bne.n	800617a <HAL_TIM_IC_Start_IT+0x1a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e013      	b.n	80061a2 <HAL_TIM_IC_Start_IT+0x42>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d104      	bne.n	800618a <HAL_TIM_IC_Start_IT+0x2a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006186:	b2db      	uxtb	r3, r3
 8006188:	e00b      	b.n	80061a2 <HAL_TIM_IC_Start_IT+0x42>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d104      	bne.n	800619a <HAL_TIM_IC_Start_IT+0x3a>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006196:	b2db      	uxtb	r3, r3
 8006198:	e003      	b.n	80061a2 <HAL_TIM_IC_Start_IT+0x42>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d104      	bne.n	80061b4 <HAL_TIM_IC_Start_IT+0x54>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	e013      	b.n	80061dc <HAL_TIM_IC_Start_IT+0x7c>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d104      	bne.n	80061c4 <HAL_TIM_IC_Start_IT+0x64>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e00b      	b.n	80061dc <HAL_TIM_IC_Start_IT+0x7c>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d104      	bne.n	80061d4 <HAL_TIM_IC_Start_IT+0x74>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e003      	b.n	80061dc <HAL_TIM_IC_Start_IT+0x7c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d102      	bne.n	80061ea <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d001      	beq.n	80061ee <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0b3      	b.n	8006356 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_IC_Start_IT+0x9e>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061fc:	e013      	b.n	8006226 <HAL_TIM_IC_Start_IT+0xc6>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d104      	bne.n	800620e <HAL_TIM_IC_Start_IT+0xae>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800620c:	e00b      	b.n	8006226 <HAL_TIM_IC_Start_IT+0xc6>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d104      	bne.n	800621e <HAL_TIM_IC_Start_IT+0xbe>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800621c:	e003      	b.n	8006226 <HAL_TIM_IC_Start_IT+0xc6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2202      	movs	r2, #2
 8006222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <HAL_TIM_IC_Start_IT+0xd6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	e013      	b.n	800625e <HAL_TIM_IC_Start_IT+0xfe>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b04      	cmp	r3, #4
 800623a:	d104      	bne.n	8006246 <HAL_TIM_IC_Start_IT+0xe6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006244:	e00b      	b.n	800625e <HAL_TIM_IC_Start_IT+0xfe>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d104      	bne.n	8006256 <HAL_TIM_IC_Start_IT+0xf6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	e003      	b.n	800625e <HAL_TIM_IC_Start_IT+0xfe>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2202      	movs	r2, #2
 800625a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b0c      	cmp	r3, #12
 8006262:	d841      	bhi.n	80062e8 <HAL_TIM_IC_Start_IT+0x188>
 8006264:	a201      	add	r2, pc, #4	; (adr r2, 800626c <HAL_TIM_IC_Start_IT+0x10c>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062e9 	.word	0x080062e9
 8006274:	080062e9 	.word	0x080062e9
 8006278:	080062e9 	.word	0x080062e9
 800627c:	080062b3 	.word	0x080062b3
 8006280:	080062e9 	.word	0x080062e9
 8006284:	080062e9 	.word	0x080062e9
 8006288:	080062e9 	.word	0x080062e9
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062e9 	.word	0x080062e9
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062d7 	.word	0x080062d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0202 	orr.w	r2, r2, #2
 80062ae:	60da      	str	r2, [r3, #12]
      break;
 80062b0:	e01b      	b.n	80062ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0204 	orr.w	r2, r2, #4
 80062c0:	60da      	str	r2, [r3, #12]
      break;
 80062c2:	e012      	b.n	80062ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68da      	ldr	r2, [r3, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	60da      	str	r2, [r3, #12]
      break;
 80062d4:	e009      	b.n	80062ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0210 	orr.w	r2, r2, #16
 80062e4:	60da      	str	r2, [r3, #12]
      break;
 80062e6:	e000      	b.n	80062ea <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80062e8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2201      	movs	r2, #1
 80062f0:	6839      	ldr	r1, [r7, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f001 f945 	bl	8007582 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_TIM_IC_Start_IT+0x200>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x1c0>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d009      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x1c0>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_TIM_IC_Start_IT+0x204>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_TIM_IC_Start_IT+0x1c0>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a13      	ldr	r2, [pc, #76]	; (8006368 <HAL_TIM_IC_Start_IT+0x208>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d111      	bne.n	8006344 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b06      	cmp	r3, #6
 8006330:	d010      	beq.n	8006354 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e007      	b.n	8006354 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800

0800636c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e093      	b.n	80064a8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7fd ff63 	bl	8004260 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f000 fcc3 	bl	8006d4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	4313      	orrs	r3, r2
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	4313      	orrs	r3, r2
 8006404:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800640c:	f023 030c 	bic.w	r3, r3, #12
 8006410:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800641c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	4313      	orrs	r3, r2
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	011a      	lsls	r2, r3, #4
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	031b      	lsls	r3, r3, #12
 800643c:	4313      	orrs	r3, r2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800644a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	4313      	orrs	r3, r2
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d110      	bne.n	8006502 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d102      	bne.n	80064ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80064e6:	7b7b      	ldrb	r3, [r7, #13]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d001      	beq.n	80064f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e069      	b.n	80065c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	e031      	b.n	8006566 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b04      	cmp	r3, #4
 8006506:	d110      	bne.n	800652a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d102      	bne.n	8006514 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800650e:	7b3b      	ldrb	r3, [r7, #12]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d001      	beq.n	8006518 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e055      	b.n	80065c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006528:	e01d      	b.n	8006566 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d108      	bne.n	8006542 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d105      	bne.n	8006542 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006536:	7b7b      	ldrb	r3, [r7, #13]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800653c:	7b3b      	ldrb	r3, [r7, #12]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d001      	beq.n	8006546 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e03e      	b.n	80065c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2202      	movs	r2, #2
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2202      	movs	r2, #2
 8006562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_TIM_Encoder_Start+0xc4>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b04      	cmp	r3, #4
 8006570:	d008      	beq.n	8006584 <HAL_TIM_Encoder_Start+0xd4>
 8006572:	e00f      	b.n	8006594 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2201      	movs	r2, #1
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f001 f800 	bl	8007582 <TIM_CCxChannelCmd>
      break;
 8006582:	e016      	b.n	80065b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2201      	movs	r2, #1
 800658a:	2104      	movs	r1, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fff8 	bl	8007582 <TIM_CCxChannelCmd>
      break;
 8006592:	e00e      	b.n	80065b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2201      	movs	r2, #1
 800659a:	2100      	movs	r1, #0
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fff0 	bl	8007582 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	2104      	movs	r1, #4
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 ffe9 	bl	8007582 <TIM_CCxChannelCmd>
      break;
 80065b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0201 	orr.w	r2, r2, #1
 80065c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d122      	bne.n	8006628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d11b      	bne.n	8006628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0202 	mvn.w	r2, #2
 80065f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fd f942 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 8006614:	e005      	b.n	8006622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fb7c 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fb82 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b04      	cmp	r3, #4
 8006634:	d122      	bne.n	800667c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b04      	cmp	r3, #4
 8006642:	d11b      	bne.n	800667c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0204 	mvn.w	r2, #4
 800664c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fd f918 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 8006668:	e005      	b.n	8006676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fb52 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb58 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b08      	cmp	r3, #8
 8006688:	d122      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b08      	cmp	r3, #8
 8006696:	d11b      	bne.n	80066d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0208 	mvn.w	r2, #8
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2204      	movs	r2, #4
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fd f8ee 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fb28 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fb2e 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b10      	cmp	r3, #16
 80066dc:	d122      	bne.n	8006724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b10      	cmp	r3, #16
 80066ea:	d11b      	bne.n	8006724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0210 	mvn.w	r2, #16
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2208      	movs	r2, #8
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fd f8c4 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fafe 	bl	8006d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb04 	bl	8006d26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b01      	cmp	r3, #1
 8006730:	d10e      	bne.n	8006750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b01      	cmp	r3, #1
 800673e:	d107      	bne.n	8006750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0201 	mvn.w	r2, #1
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fd f886 	bl	800385c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d10e      	bne.n	800677c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006768:	2b80      	cmp	r3, #128	; 0x80
 800676a:	d107      	bne.n	800677c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 ffe0 	bl	800773c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d10e      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d107      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fac8 	bl	8006d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d10e      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d107      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0220 	mvn.w	r2, #32
 80067cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 ffab 	bl	800772a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e082      	b.n	80068fc <HAL_TIM_IC_ConfigChannel+0x120>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11b      	bne.n	800683c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f000 fd12 	bl	800723c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 020c 	bic.w	r2, r2, #12
 8006826:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
 800683a:	e05a      	b.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d11c      	bne.n	800687c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	f000 fd7b 	bl	800734c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699a      	ldr	r2, [r3, #24]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006864:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6999      	ldr	r1, [r3, #24]
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	021a      	lsls	r2, r3, #8
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	619a      	str	r2, [r3, #24]
 800687a:	e03a      	b.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b08      	cmp	r3, #8
 8006880:	d11b      	bne.n	80068ba <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f000 fdc6 	bl	8007422 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69da      	ldr	r2, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 020c 	bic.w	r2, r2, #12
 80068a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69d9      	ldr	r1, [r3, #28]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	61da      	str	r2, [r3, #28]
 80068b8:	e01b      	b.n	80068f2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f000 fde5 	bl	8007498 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69d9      	ldr	r1, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	021a      	lsls	r2, r3, #8
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800691a:	2302      	movs	r3, #2
 800691c:	e0ac      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x174>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b0c      	cmp	r3, #12
 800692a:	f200 809f 	bhi.w	8006a6c <HAL_TIM_PWM_ConfigChannel+0x168>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006969 	.word	0x08006969
 8006938:	08006a6d 	.word	0x08006a6d
 800693c:	08006a6d 	.word	0x08006a6d
 8006940:	08006a6d 	.word	0x08006a6d
 8006944:	080069a9 	.word	0x080069a9
 8006948:	08006a6d 	.word	0x08006a6d
 800694c:	08006a6d 	.word	0x08006a6d
 8006950:	08006a6d 	.word	0x08006a6d
 8006954:	080069eb 	.word	0x080069eb
 8006958:	08006a6d 	.word	0x08006a6d
 800695c:	08006a6d 	.word	0x08006a6d
 8006960:	08006a6d 	.word	0x08006a6d
 8006964:	08006a2b 	.word	0x08006a2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fa4e 	bl	8006e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	699a      	ldr	r2, [r3, #24]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0208 	orr.w	r2, r2, #8
 8006982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6999      	ldr	r1, [r3, #24]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	619a      	str	r2, [r3, #24]
      break;
 80069a6:	e062      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fa94 	bl	8006edc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6999      	ldr	r1, [r3, #24]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	021a      	lsls	r2, r3, #8
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	619a      	str	r2, [r3, #24]
      break;
 80069e8:	e041      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fadd 	bl	8006fb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0208 	orr.w	r2, r2, #8
 8006a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0204 	bic.w	r2, r2, #4
 8006a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69d9      	ldr	r1, [r3, #28]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	61da      	str	r2, [r3, #28]
      break;
 8006a28:	e021      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb27 	bl	8007084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69d9      	ldr	r1, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	021a      	lsls	r2, r3, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	61da      	str	r2, [r3, #28]
      break;
 8006a6a:	e000      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_TIM_ConfigClockSource+0x18>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e0b3      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x180>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006abe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad0:	d03e      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0xd0>
 8006ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad6:	f200 8087 	bhi.w	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ade:	f000 8085 	beq.w	8006bec <HAL_TIM_ConfigClockSource+0x16c>
 8006ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae6:	d87f      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006ae8:	2b70      	cmp	r3, #112	; 0x70
 8006aea:	d01a      	beq.n	8006b22 <HAL_TIM_ConfigClockSource+0xa2>
 8006aec:	2b70      	cmp	r3, #112	; 0x70
 8006aee:	d87b      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006af0:	2b60      	cmp	r3, #96	; 0x60
 8006af2:	d050      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0x116>
 8006af4:	2b60      	cmp	r3, #96	; 0x60
 8006af6:	d877      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006af8:	2b50      	cmp	r3, #80	; 0x50
 8006afa:	d03c      	beq.n	8006b76 <HAL_TIM_ConfigClockSource+0xf6>
 8006afc:	2b50      	cmp	r3, #80	; 0x50
 8006afe:	d873      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006b00:	2b40      	cmp	r3, #64	; 0x40
 8006b02:	d058      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x136>
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d86f      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	d064      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x156>
 8006b0c:	2b30      	cmp	r3, #48	; 0x30
 8006b0e:	d86b      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d060      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x156>
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d867      	bhi.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05c      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x156>
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d05a      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006b20:	e062      	b.n	8006be8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	6899      	ldr	r1, [r3, #8]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f000 fd07 	bl	8007544 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	609a      	str	r2, [r3, #8]
      break;
 8006b4e:	e04e      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6899      	ldr	r1, [r3, #8]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f000 fcf0 	bl	8007544 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689a      	ldr	r2, [r3, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b72:	609a      	str	r2, [r3, #8]
      break;
 8006b74:	e03b      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6859      	ldr	r1, [r3, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f000 fbb4 	bl	80072f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2150      	movs	r1, #80	; 0x50
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fcbe 	bl	8007510 <TIM_ITRx_SetConfig>
      break;
 8006b94:	e02b      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6859      	ldr	r1, [r3, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f000 fc0e 	bl	80073c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2160      	movs	r1, #96	; 0x60
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fcae 	bl	8007510 <TIM_ITRx_SetConfig>
      break;
 8006bb4:	e01b      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6859      	ldr	r1, [r3, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f000 fb94 	bl	80072f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2140      	movs	r1, #64	; 0x40
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fc9e 	bl	8007510 <TIM_ITRx_SetConfig>
      break;
 8006bd4:	e00b      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f000 fc95 	bl	8007510 <TIM_ITRx_SetConfig>
        break;
 8006be6:	e002      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006be8:	bf00      	nop
 8006bea:	e000      	b.n	8006bee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006bec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d101      	bne.n	8006c20 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	e031      	b.n	8006c84 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa74 	bl	8007120 <TIM_SlaveTimer_SetConfig>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e018      	b.n	8006c84 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c60:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c70:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b0c      	cmp	r3, #12
 8006c9e:	d831      	bhi.n	8006d04 <HAL_TIM_ReadCapturedValue+0x78>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cdd 	.word	0x08006cdd
 8006cac:	08006d05 	.word	0x08006d05
 8006cb0:	08006d05 	.word	0x08006d05
 8006cb4:	08006d05 	.word	0x08006d05
 8006cb8:	08006ce7 	.word	0x08006ce7
 8006cbc:	08006d05 	.word	0x08006d05
 8006cc0:	08006d05 	.word	0x08006d05
 8006cc4:	08006d05 	.word	0x08006d05
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006d05 	.word	0x08006d05
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d05 	.word	0x08006d05
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	60fb      	str	r3, [r7, #12]

      break;
 8006ce4:	e00f      	b.n	8006d06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	60fb      	str	r3, [r7, #12]

      break;
 8006cee:	e00a      	b.n	8006d06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	60fb      	str	r3, [r7, #12]

      break;
 8006cf8:	e005      	b.n	8006d06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	60fb      	str	r3, [r7, #12]

      break;
 8006d02:	e000      	b.n	8006d06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006d04:	bf00      	nop
  }

  return tmpreg;
 8006d06:	68fb      	ldr	r3, [r7, #12]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
	...

08006d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a29      	ldr	r2, [pc, #164]	; (8006e04 <TIM_Base_SetConfig+0xb8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00b      	beq.n	8006d7c <TIM_Base_SetConfig+0x30>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6a:	d007      	beq.n	8006d7c <TIM_Base_SetConfig+0x30>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <TIM_Base_SetConfig+0xbc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_Base_SetConfig+0x30>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a25      	ldr	r2, [pc, #148]	; (8006e0c <TIM_Base_SetConfig+0xc0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <TIM_Base_SetConfig+0xb8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00b      	beq.n	8006dae <TIM_Base_SetConfig+0x62>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9c:	d007      	beq.n	8006dae <TIM_Base_SetConfig+0x62>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <TIM_Base_SetConfig+0xbc>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_Base_SetConfig+0x62>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <TIM_Base_SetConfig+0xc0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d108      	bne.n	8006dc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <TIM_Base_SetConfig+0xb8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d103      	bne.n	8006df4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	691a      	ldr	r2, [r3, #16]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	615a      	str	r2, [r3, #20]
}
 8006dfa:	bf00      	nop
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800

08006e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0201 	bic.w	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 0303 	bic.w	r3, r3, #3
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f023 0302 	bic.w	r3, r3, #2
 8006e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <TIM_OC1_SetConfig+0xc8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d10c      	bne.n	8006e86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f023 0308 	bic.w	r3, r3, #8
 8006e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0304 	bic.w	r3, r3, #4
 8006e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a13      	ldr	r2, [pc, #76]	; (8006ed8 <TIM_OC1_SetConfig+0xc8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d111      	bne.n	8006eb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00

08006edc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	f023 0210 	bic.w	r2, r3, #16
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0320 	bic.w	r3, r3, #32
 8006f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a1d      	ldr	r2, [pc, #116]	; (8006fac <TIM_OC2_SetConfig+0xd0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10d      	bne.n	8006f58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a14      	ldr	r2, [pc, #80]	; (8006fac <TIM_OC2_SetConfig+0xd0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d113      	bne.n	8006f88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bc80      	pop	{r7}
 8006faa:	4770      	bx	lr
 8006fac:	40012c00 	.word	0x40012c00

08006fb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0303 	bic.w	r3, r3, #3
 8006fe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ff8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <TIM_OC3_SetConfig+0xd0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d10d      	bne.n	800702a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a14      	ldr	r2, [pc, #80]	; (8007080 <TIM_OC3_SetConfig+0xd0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d113      	bne.n	800705a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	011b      	lsls	r3, r3, #4
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	4313      	orrs	r3, r2
 8007058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	bc80      	pop	{r7}
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	40012c00 	.word	0x40012c00

08007084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	031b      	lsls	r3, r3, #12
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a0f      	ldr	r2, [pc, #60]	; (800711c <TIM_OC4_SetConfig+0x98>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d109      	bne.n	80070f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	695b      	ldr	r3, [r3, #20]
 80070f0:	019b      	lsls	r3, r3, #6
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	bc80      	pop	{r7}
 800711a:	4770      	bx	lr
 800711c:	40012c00 	.word	0x40012c00

08007120 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007138:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 0307 	bic.w	r3, r3, #7
 800714a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b70      	cmp	r3, #112	; 0x70
 8007164:	d01a      	beq.n	800719c <TIM_SlaveTimer_SetConfig+0x7c>
 8007166:	2b70      	cmp	r3, #112	; 0x70
 8007168:	d860      	bhi.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
 800716a:	2b60      	cmp	r3, #96	; 0x60
 800716c:	d054      	beq.n	8007218 <TIM_SlaveTimer_SetConfig+0xf8>
 800716e:	2b60      	cmp	r3, #96	; 0x60
 8007170:	d85c      	bhi.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
 8007172:	2b50      	cmp	r3, #80	; 0x50
 8007174:	d046      	beq.n	8007204 <TIM_SlaveTimer_SetConfig+0xe4>
 8007176:	2b50      	cmp	r3, #80	; 0x50
 8007178:	d858      	bhi.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
 800717a:	2b40      	cmp	r3, #64	; 0x40
 800717c:	d019      	beq.n	80071b2 <TIM_SlaveTimer_SetConfig+0x92>
 800717e:	2b40      	cmp	r3, #64	; 0x40
 8007180:	d854      	bhi.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
 8007182:	2b30      	cmp	r3, #48	; 0x30
 8007184:	d054      	beq.n	8007230 <TIM_SlaveTimer_SetConfig+0x110>
 8007186:	2b30      	cmp	r3, #48	; 0x30
 8007188:	d850      	bhi.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
 800718a:	2b20      	cmp	r3, #32
 800718c:	d050      	beq.n	8007230 <TIM_SlaveTimer_SetConfig+0x110>
 800718e:	2b20      	cmp	r3, #32
 8007190:	d84c      	bhi.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d04c      	beq.n	8007230 <TIM_SlaveTimer_SetConfig+0x110>
 8007196:	2b10      	cmp	r3, #16
 8007198:	d04a      	beq.n	8007230 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800719a:	e047      	b.n	800722c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6818      	ldr	r0, [r3, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	68d9      	ldr	r1, [r3, #12]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	689a      	ldr	r2, [r3, #8]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f000 f9ca 	bl	8007544 <TIM_ETR_SetConfig>
      break;
 80071b0:	e03f      	b.n	8007232 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b05      	cmp	r3, #5
 80071b8:	d101      	bne.n	80071be <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e03a      	b.n	8007234 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6a1a      	ldr	r2, [r3, #32]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071e4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	621a      	str	r2, [r3, #32]
      break;
 8007202:	e016      	b.n	8007232 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6899      	ldr	r1, [r3, #8]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	461a      	mov	r2, r3
 8007212:	f000 f86d 	bl	80072f0 <TIM_TI1_ConfigInputStage>
      break;
 8007216:	e00c      	b.n	8007232 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	6899      	ldr	r1, [r3, #8]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	461a      	mov	r2, r3
 8007226:	f000 f8cd 	bl	80073c4 <TIM_TI2_ConfigInputStage>
      break;
 800722a:	e002      	b.n	8007232 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800722c:	bf00      	nop
 800722e:	e000      	b.n	8007232 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8007230:	bf00      	nop
  }
  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f023 0201 	bic.w	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <TIM_TI1_SetConfig+0xa8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_TI1_SetConfig+0x46>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007270:	d007      	beq.n	8007282 <TIM_TI1_SetConfig+0x46>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a1c      	ldr	r2, [pc, #112]	; (80072e8 <TIM_TI1_SetConfig+0xac>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_TI1_SetConfig+0x46>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a1b      	ldr	r2, [pc, #108]	; (80072ec <TIM_TI1_SetConfig+0xb0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d101      	bne.n	8007286 <TIM_TI1_SetConfig+0x4a>
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <TIM_TI1_SetConfig+0x4c>
 8007286:	2300      	movs	r3, #0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	e003      	b.n	80072a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f023 030a 	bic.w	r3, r3, #10
 80072c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f003 030a 	and.w	r3, r3, #10
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr
 80072e4:	40012c00 	.word	0x40012c00
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800

080072f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f023 0201 	bic.w	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800731a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f023 030a 	bic.w	r3, r3, #10
 800732c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr

0800734c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f023 0210 	bic.w	r2, r3, #16
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800738a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	031b      	lsls	r3, r3, #12
 8007390:	b29b      	uxth	r3, r3
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800739e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	f023 0210 	bic.w	r2, r3, #16
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	031b      	lsls	r3, r3, #12
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007400:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr

08007422 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007422:	b480      	push	{r7}
 8007424:	b087      	sub	sp, #28
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	69db      	ldr	r3, [r3, #28]
 8007440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800745e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	b2db      	uxtb	r3, r3
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007472:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	031b      	lsls	r3, r3, #12
 80074dc:	b29b      	uxth	r3, r3
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	031b      	lsls	r3, r3, #12
 80074f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	621a      	str	r2, [r3, #32]
}
 8007506:	bf00      	nop
 8007508:	371c      	adds	r7, #28
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	f043 0307 	orr.w	r3, r3, #7
 8007532:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	609a      	str	r2, [r3, #8]
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800755e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	021a      	lsls	r2, r3, #8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	431a      	orrs	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4313      	orrs	r3, r2
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	609a      	str	r2, [r3, #8]
}
 8007578:	bf00      	nop
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2201      	movs	r2, #1
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	43db      	mvns	r3, r3
 80075a4:	401a      	ands	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a1a      	ldr	r2, [r3, #32]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	621a      	str	r2, [r3, #32]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e046      	b.n	8007672 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00e      	beq.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d009      	beq.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a12      	ldr	r2, [pc, #72]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d004      	beq.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a10      	ldr	r2, [pc, #64]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d10c      	bne.n	8007660 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4313      	orrs	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr
 800767c:	40012c00 	.word	0x40012c00
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800

08007688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e03d      	b.n	8007720 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr

0800772a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <_Znwj>:
 800774e:	2801      	cmp	r0, #1
 8007750:	bf38      	it	cc
 8007752:	2001      	movcc	r0, #1
 8007754:	b510      	push	{r4, lr}
 8007756:	4604      	mov	r4, r0
 8007758:	4620      	mov	r0, r4
 800775a:	f002 f9e9 	bl	8009b30 <malloc>
 800775e:	b930      	cbnz	r0, 800776e <_Znwj+0x20>
 8007760:	f000 f806 	bl	8007770 <_ZSt15get_new_handlerv>
 8007764:	b908      	cbnz	r0, 800776a <_Znwj+0x1c>
 8007766:	f002 f9b1 	bl	8009acc <abort>
 800776a:	4780      	blx	r0
 800776c:	e7f4      	b.n	8007758 <_Znwj+0xa>
 800776e:	bd10      	pop	{r4, pc}

08007770 <_ZSt15get_new_handlerv>:
 8007770:	4b02      	ldr	r3, [pc, #8]	; (800777c <_ZSt15get_new_handlerv+0xc>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	f3bf 8f5b 	dmb	ish
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	2000029c 	.word	0x2000029c

08007780 <cos>:
 8007780:	b530      	push	{r4, r5, lr}
 8007782:	4a20      	ldr	r2, [pc, #128]	; (8007804 <cos+0x84>)
 8007784:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007788:	4293      	cmp	r3, r2
 800778a:	b087      	sub	sp, #28
 800778c:	dc06      	bgt.n	800779c <cos+0x1c>
 800778e:	2200      	movs	r2, #0
 8007790:	2300      	movs	r3, #0
 8007792:	b007      	add	sp, #28
 8007794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007798:	f001 ba22 	b.w	8008be0 <__kernel_cos>
 800779c:	4a1a      	ldr	r2, [pc, #104]	; (8007808 <cos+0x88>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	dd05      	ble.n	80077ae <cos+0x2e>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	f7f8 fd8b 	bl	80002c0 <__aeabi_dsub>
 80077aa:	b007      	add	sp, #28
 80077ac:	bd30      	pop	{r4, r5, pc}
 80077ae:	aa02      	add	r2, sp, #8
 80077b0:	f000 ff6e 	bl	8008690 <__ieee754_rem_pio2>
 80077b4:	f000 0003 	and.w	r0, r0, #3
 80077b8:	2801      	cmp	r0, #1
 80077ba:	d009      	beq.n	80077d0 <cos+0x50>
 80077bc:	2802      	cmp	r0, #2
 80077be:	d011      	beq.n	80077e4 <cos+0x64>
 80077c0:	b9b8      	cbnz	r0, 80077f2 <cos+0x72>
 80077c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ca:	f001 fa09 	bl	8008be0 <__kernel_cos>
 80077ce:	e7ec      	b.n	80077aa <cos+0x2a>
 80077d0:	9000      	str	r0, [sp, #0]
 80077d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077da:	f001 fe01 	bl	80093e0 <__kernel_sin>
 80077de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80077e2:	e7e2      	b.n	80077aa <cos+0x2a>
 80077e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ec:	f001 f9f8 	bl	8008be0 <__kernel_cos>
 80077f0:	e7f5      	b.n	80077de <cos+0x5e>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077fe:	f001 fdef 	bl	80093e0 <__kernel_sin>
 8007802:	e7d2      	b.n	80077aa <cos+0x2a>
 8007804:	3fe921fb 	.word	0x3fe921fb
 8007808:	7fefffff 	.word	0x7fefffff

0800780c <fmin>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	4616      	mov	r6, r2
 8007814:	461f      	mov	r7, r3
 8007816:	f000 f813 	bl	8007840 <__fpclassifyd>
 800781a:	b158      	cbz	r0, 8007834 <fmin+0x28>
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f000 f80e 	bl	8007840 <__fpclassifyd>
 8007824:	b140      	cbz	r0, 8007838 <fmin+0x2c>
 8007826:	4632      	mov	r2, r6
 8007828:	463b      	mov	r3, r7
 800782a:	4620      	mov	r0, r4
 800782c:	4629      	mov	r1, r5
 800782e:	f7f9 f971 	bl	8000b14 <__aeabi_dcmplt>
 8007832:	b908      	cbnz	r0, 8007838 <fmin+0x2c>
 8007834:	4634      	mov	r4, r6
 8007836:	463d      	mov	r5, r7
 8007838:	4620      	mov	r0, r4
 800783a:	4629      	mov	r1, r5
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007840 <__fpclassifyd>:
 8007840:	b510      	push	{r4, lr}
 8007842:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8007846:	460b      	mov	r3, r1
 8007848:	d019      	beq.n	800787e <__fpclassifyd+0x3e>
 800784a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800784e:	490e      	ldr	r1, [pc, #56]	; (8007888 <__fpclassifyd+0x48>)
 8007850:	428a      	cmp	r2, r1
 8007852:	d90e      	bls.n	8007872 <__fpclassifyd+0x32>
 8007854:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8007858:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800785c:	428a      	cmp	r2, r1
 800785e:	d908      	bls.n	8007872 <__fpclassifyd+0x32>
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <__fpclassifyd+0x4c>)
 8007862:	4213      	tst	r3, r2
 8007864:	d007      	beq.n	8007876 <__fpclassifyd+0x36>
 8007866:	4294      	cmp	r4, r2
 8007868:	d107      	bne.n	800787a <__fpclassifyd+0x3a>
 800786a:	fab0 f080 	clz	r0, r0
 800786e:	0940      	lsrs	r0, r0, #5
 8007870:	bd10      	pop	{r4, pc}
 8007872:	2004      	movs	r0, #4
 8007874:	e7fc      	b.n	8007870 <__fpclassifyd+0x30>
 8007876:	2003      	movs	r0, #3
 8007878:	e7fa      	b.n	8007870 <__fpclassifyd+0x30>
 800787a:	2000      	movs	r0, #0
 800787c:	e7f8      	b.n	8007870 <__fpclassifyd+0x30>
 800787e:	2800      	cmp	r0, #0
 8007880:	d1ee      	bne.n	8007860 <__fpclassifyd+0x20>
 8007882:	2002      	movs	r0, #2
 8007884:	e7f4      	b.n	8007870 <__fpclassifyd+0x30>
 8007886:	bf00      	nop
 8007888:	7fdfffff 	.word	0x7fdfffff
 800788c:	7ff00000 	.word	0x7ff00000

08007890 <sin>:
 8007890:	b530      	push	{r4, r5, lr}
 8007892:	4a20      	ldr	r2, [pc, #128]	; (8007914 <sin+0x84>)
 8007894:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007898:	4293      	cmp	r3, r2
 800789a:	b087      	sub	sp, #28
 800789c:	dc06      	bgt.n	80078ac <sin+0x1c>
 800789e:	2300      	movs	r3, #0
 80078a0:	2200      	movs	r2, #0
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	2300      	movs	r3, #0
 80078a6:	f001 fd9b 	bl	80093e0 <__kernel_sin>
 80078aa:	e006      	b.n	80078ba <sin+0x2a>
 80078ac:	4a1a      	ldr	r2, [pc, #104]	; (8007918 <sin+0x88>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	dd05      	ble.n	80078be <sin+0x2e>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	f7f8 fd03 	bl	80002c0 <__aeabi_dsub>
 80078ba:	b007      	add	sp, #28
 80078bc:	bd30      	pop	{r4, r5, pc}
 80078be:	aa02      	add	r2, sp, #8
 80078c0:	f000 fee6 	bl	8008690 <__ieee754_rem_pio2>
 80078c4:	f000 0003 	and.w	r0, r0, #3
 80078c8:	2801      	cmp	r0, #1
 80078ca:	d009      	beq.n	80078e0 <sin+0x50>
 80078cc:	2802      	cmp	r0, #2
 80078ce:	d00e      	beq.n	80078ee <sin+0x5e>
 80078d0:	b9c0      	cbnz	r0, 8007904 <sin+0x74>
 80078d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d6:	2301      	movs	r3, #1
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078de:	e7e2      	b.n	80078a6 <sin+0x16>
 80078e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078e8:	f001 f97a 	bl	8008be0 <__kernel_cos>
 80078ec:	e7e5      	b.n	80078ba <sin+0x2a>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078fa:	f001 fd71 	bl	80093e0 <__kernel_sin>
 80078fe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007902:	e7da      	b.n	80078ba <sin+0x2a>
 8007904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800790c:	f001 f968 	bl	8008be0 <__kernel_cos>
 8007910:	e7f5      	b.n	80078fe <sin+0x6e>
 8007912:	bf00      	nop
 8007914:	3fe921fb 	.word	0x3fe921fb
 8007918:	7fefffff 	.word	0x7fefffff

0800791c <fmaxf>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4604      	mov	r4, r0
 8007920:	460d      	mov	r5, r1
 8007922:	f000 f81f 	bl	8007964 <__fpclassifyf>
 8007926:	b140      	cbz	r0, 800793a <fmaxf+0x1e>
 8007928:	4628      	mov	r0, r5
 800792a:	f000 f81b 	bl	8007964 <__fpclassifyf>
 800792e:	b128      	cbz	r0, 800793c <fmaxf+0x20>
 8007930:	4629      	mov	r1, r5
 8007932:	4620      	mov	r0, r4
 8007934:	f7f9 fb1e 	bl	8000f74 <__aeabi_fcmpgt>
 8007938:	b900      	cbnz	r0, 800793c <fmaxf+0x20>
 800793a:	462c      	mov	r4, r5
 800793c:	4620      	mov	r0, r4
 800793e:	bd38      	pop	{r3, r4, r5, pc}

08007940 <fminf>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4604      	mov	r4, r0
 8007944:	460d      	mov	r5, r1
 8007946:	f000 f80d 	bl	8007964 <__fpclassifyf>
 800794a:	b140      	cbz	r0, 800795e <fminf+0x1e>
 800794c:	4628      	mov	r0, r5
 800794e:	f000 f809 	bl	8007964 <__fpclassifyf>
 8007952:	b128      	cbz	r0, 8007960 <fminf+0x20>
 8007954:	4629      	mov	r1, r5
 8007956:	4620      	mov	r0, r4
 8007958:	f7f9 faee 	bl	8000f38 <__aeabi_fcmplt>
 800795c:	b900      	cbnz	r0, 8007960 <fminf+0x20>
 800795e:	462c      	mov	r4, r5
 8007960:	4620      	mov	r0, r4
 8007962:	bd38      	pop	{r3, r4, r5, pc}

08007964 <__fpclassifyf>:
 8007964:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8007968:	d00d      	beq.n	8007986 <__fpclassifyf+0x22>
 800796a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800796e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007972:	d30a      	bcc.n	800798a <__fpclassifyf+0x26>
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <__fpclassifyf+0x30>)
 8007976:	1e42      	subs	r2, r0, #1
 8007978:	429a      	cmp	r2, r3
 800797a:	d908      	bls.n	800798e <__fpclassifyf+0x2a>
 800797c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8007980:	4258      	negs	r0, r3
 8007982:	4158      	adcs	r0, r3
 8007984:	4770      	bx	lr
 8007986:	2002      	movs	r0, #2
 8007988:	4770      	bx	lr
 800798a:	2004      	movs	r0, #4
 800798c:	4770      	bx	lr
 800798e:	2003      	movs	r0, #3
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	007ffffe 	.word	0x007ffffe

08007998 <atan2>:
 8007998:	f000 b88e 	b.w	8007ab8 <__ieee754_atan2>

0800799c <pow>:
 800799c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079a0:	4614      	mov	r4, r2
 80079a2:	461d      	mov	r5, r3
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	f000 f95a 	bl	8007c60 <__ieee754_pow>
 80079ac:	4622      	mov	r2, r4
 80079ae:	4606      	mov	r6, r0
 80079b0:	460f      	mov	r7, r1
 80079b2:	462b      	mov	r3, r5
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f9 f8d4 	bl	8000b64 <__aeabi_dcmpun>
 80079bc:	bbc8      	cbnz	r0, 8007a32 <pow+0x96>
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4640      	mov	r0, r8
 80079c4:	4649      	mov	r1, r9
 80079c6:	f7f9 f89b 	bl	8000b00 <__aeabi_dcmpeq>
 80079ca:	b1b8      	cbz	r0, 80079fc <pow+0x60>
 80079cc:	2200      	movs	r2, #0
 80079ce:	2300      	movs	r3, #0
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f9 f894 	bl	8000b00 <__aeabi_dcmpeq>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d141      	bne.n	8007a60 <pow+0xc4>
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f001 ff6f 	bl	80098c2 <finite>
 80079e4:	b328      	cbz	r0, 8007a32 <pow+0x96>
 80079e6:	2200      	movs	r2, #0
 80079e8:	2300      	movs	r3, #0
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f9 f891 	bl	8000b14 <__aeabi_dcmplt>
 80079f2:	b1f0      	cbz	r0, 8007a32 <pow+0x96>
 80079f4:	f002 f872 	bl	8009adc <__errno>
 80079f8:	2322      	movs	r3, #34	; 0x22
 80079fa:	e019      	b.n	8007a30 <pow+0x94>
 80079fc:	4630      	mov	r0, r6
 80079fe:	4639      	mov	r1, r7
 8007a00:	f001 ff5f 	bl	80098c2 <finite>
 8007a04:	b9c8      	cbnz	r0, 8007a3a <pow+0x9e>
 8007a06:	4640      	mov	r0, r8
 8007a08:	4649      	mov	r1, r9
 8007a0a:	f001 ff5a 	bl	80098c2 <finite>
 8007a0e:	b1a0      	cbz	r0, 8007a3a <pow+0x9e>
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f001 ff55 	bl	80098c2 <finite>
 8007a18:	b178      	cbz	r0, 8007a3a <pow+0x9e>
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	f7f9 f89f 	bl	8000b64 <__aeabi_dcmpun>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d0e4      	beq.n	80079f4 <pow+0x58>
 8007a2a:	f002 f857 	bl	8009adc <__errno>
 8007a2e:	2321      	movs	r3, #33	; 0x21
 8007a30:	6003      	str	r3, [r0, #0]
 8007a32:	4630      	mov	r0, r6
 8007a34:	4639      	mov	r1, r7
 8007a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4630      	mov	r0, r6
 8007a40:	4639      	mov	r1, r7
 8007a42:	f7f9 f85d 	bl	8000b00 <__aeabi_dcmpeq>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d0f3      	beq.n	8007a32 <pow+0x96>
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f001 ff38 	bl	80098c2 <finite>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d0ed      	beq.n	8007a32 <pow+0x96>
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	f001 ff32 	bl	80098c2 <finite>
 8007a5e:	e7c8      	b.n	80079f2 <pow+0x56>
 8007a60:	2600      	movs	r6, #0
 8007a62:	4f01      	ldr	r7, [pc, #4]	; (8007a68 <pow+0xcc>)
 8007a64:	e7e5      	b.n	8007a32 <pow+0x96>
 8007a66:	bf00      	nop
 8007a68:	3ff00000 	.word	0x3ff00000

08007a6c <sqrt>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460f      	mov	r7, r1
 8007a72:	f001 f805 	bl	8008a80 <__ieee754_sqrt>
 8007a76:	4632      	mov	r2, r6
 8007a78:	4604      	mov	r4, r0
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	463b      	mov	r3, r7
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f9 f86f 	bl	8000b64 <__aeabi_dcmpun>
 8007a86:	b990      	cbnz	r0, 8007aae <sqrt+0x42>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7f9 f840 	bl	8000b14 <__aeabi_dcmplt>
 8007a94:	b158      	cbz	r0, 8007aae <sqrt+0x42>
 8007a96:	f002 f821 	bl	8009adc <__errno>
 8007a9a:	2321      	movs	r3, #33	; 0x21
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	6003      	str	r3, [r0, #0]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f7f8 feed 	bl	8000884 <__aeabi_ddiv>
 8007aaa:	4604      	mov	r4, r0
 8007aac:	460d      	mov	r5, r1
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <__ieee754_atan2>:
 8007ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	4692      	mov	sl, r2
 8007abe:	4699      	mov	r9, r3
 8007ac0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ac4:	461f      	mov	r7, r3
 8007ac6:	f1ca 0300 	rsb	r3, sl, #0
 8007aca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007c50 <__ieee754_atan2+0x198>
 8007ace:	ea43 030a 	orr.w	r3, r3, sl
 8007ad2:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007ad6:	4573      	cmp	r3, lr
 8007ad8:	4604      	mov	r4, r0
 8007ada:	460d      	mov	r5, r1
 8007adc:	d808      	bhi.n	8007af0 <__ieee754_atan2+0x38>
 8007ade:	4246      	negs	r6, r0
 8007ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ae4:	4306      	orrs	r6, r0
 8007ae6:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8007aea:	4576      	cmp	r6, lr
 8007aec:	468c      	mov	ip, r1
 8007aee:	d908      	bls.n	8007b02 <__ieee754_atan2+0x4a>
 8007af0:	4652      	mov	r2, sl
 8007af2:	464b      	mov	r3, r9
 8007af4:	4620      	mov	r0, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	f7f8 fbe4 	bl	80002c4 <__adddf3>
 8007afc:	4604      	mov	r4, r0
 8007afe:	460d      	mov	r5, r1
 8007b00:	e019      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007b02:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8007b06:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8007b0a:	ea56 060a 	orrs.w	r6, r6, sl
 8007b0e:	d103      	bne.n	8007b18 <__ieee754_atan2+0x60>
 8007b10:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	f001 bd48 	b.w	80095a8 <atan>
 8007b18:	17be      	asrs	r6, r7, #30
 8007b1a:	f006 0602 	and.w	r6, r6, #2
 8007b1e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8007b22:	ea53 0100 	orrs.w	r1, r3, r0
 8007b26:	d10a      	bne.n	8007b3e <__ieee754_atan2+0x86>
 8007b28:	2e02      	cmp	r6, #2
 8007b2a:	d067      	beq.n	8007bfc <__ieee754_atan2+0x144>
 8007b2c:	2e03      	cmp	r6, #3
 8007b2e:	d102      	bne.n	8007b36 <__ieee754_atan2+0x7e>
 8007b30:	a53b      	add	r5, pc, #236	; (adr r5, 8007c20 <__ieee754_atan2+0x168>)
 8007b32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b36:	4620      	mov	r0, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3e:	ea52 010a 	orrs.w	r1, r2, sl
 8007b42:	d106      	bne.n	8007b52 <__ieee754_atan2+0x9a>
 8007b44:	f1bc 0f00 	cmp.w	ip, #0
 8007b48:	da63      	bge.n	8007c12 <__ieee754_atan2+0x15a>
 8007b4a:	a537      	add	r5, pc, #220	; (adr r5, 8007c28 <__ieee754_atan2+0x170>)
 8007b4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b50:	e7f1      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007b52:	4572      	cmp	r2, lr
 8007b54:	d10f      	bne.n	8007b76 <__ieee754_atan2+0xbe>
 8007b56:	4293      	cmp	r3, r2
 8007b58:	f106 36ff 	add.w	r6, r6, #4294967295
 8007b5c:	d107      	bne.n	8007b6e <__ieee754_atan2+0xb6>
 8007b5e:	2e02      	cmp	r6, #2
 8007b60:	d850      	bhi.n	8007c04 <__ieee754_atan2+0x14c>
 8007b62:	4b3c      	ldr	r3, [pc, #240]	; (8007c54 <__ieee754_atan2+0x19c>)
 8007b64:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007b68:	e9d6 4500 	ldrd	r4, r5, [r6]
 8007b6c:	e7e3      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007b6e:	2e02      	cmp	r6, #2
 8007b70:	d84c      	bhi.n	8007c0c <__ieee754_atan2+0x154>
 8007b72:	4b39      	ldr	r3, [pc, #228]	; (8007c58 <__ieee754_atan2+0x1a0>)
 8007b74:	e7f6      	b.n	8007b64 <__ieee754_atan2+0xac>
 8007b76:	4573      	cmp	r3, lr
 8007b78:	d0e4      	beq.n	8007b44 <__ieee754_atan2+0x8c>
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007b80:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007b84:	da20      	bge.n	8007bc8 <__ieee754_atan2+0x110>
 8007b86:	2f00      	cmp	r7, #0
 8007b88:	da01      	bge.n	8007b8e <__ieee754_atan2+0xd6>
 8007b8a:	323c      	adds	r2, #60	; 0x3c
 8007b8c:	db20      	blt.n	8007bd0 <__ieee754_atan2+0x118>
 8007b8e:	4652      	mov	r2, sl
 8007b90:	464b      	mov	r3, r9
 8007b92:	4620      	mov	r0, r4
 8007b94:	4629      	mov	r1, r5
 8007b96:	f7f8 fe75 	bl	8000884 <__aeabi_ddiv>
 8007b9a:	f001 fe8f 	bl	80098bc <fabs>
 8007b9e:	f001 fd03 	bl	80095a8 <atan>
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	460d      	mov	r5, r1
 8007ba6:	2e01      	cmp	r6, #1
 8007ba8:	d015      	beq.n	8007bd6 <__ieee754_atan2+0x11e>
 8007baa:	2e02      	cmp	r6, #2
 8007bac:	d017      	beq.n	8007bde <__ieee754_atan2+0x126>
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d0c1      	beq.n	8007b36 <__ieee754_atan2+0x7e>
 8007bb2:	a31f      	add	r3, pc, #124	; (adr r3, 8007c30 <__ieee754_atan2+0x178>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7f8 fb80 	bl	80002c0 <__aeabi_dsub>
 8007bc0:	a31d      	add	r3, pc, #116	; (adr r3, 8007c38 <__ieee754_atan2+0x180>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	e016      	b.n	8007bf6 <__ieee754_atan2+0x13e>
 8007bc8:	a51d      	add	r5, pc, #116	; (adr r5, 8007c40 <__ieee754_atan2+0x188>)
 8007bca:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007bce:	e7ea      	b.n	8007ba6 <__ieee754_atan2+0xee>
 8007bd0:	2400      	movs	r4, #0
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	e7e7      	b.n	8007ba6 <__ieee754_atan2+0xee>
 8007bd6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007bda:	461d      	mov	r5, r3
 8007bdc:	e7ab      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007bde:	a314      	add	r3, pc, #80	; (adr r3, 8007c30 <__ieee754_atan2+0x178>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	4620      	mov	r0, r4
 8007be6:	4629      	mov	r1, r5
 8007be8:	f7f8 fb6a 	bl	80002c0 <__aeabi_dsub>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	a111      	add	r1, pc, #68	; (adr r1, 8007c38 <__ieee754_atan2+0x180>)
 8007bf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf6:	f7f8 fb63 	bl	80002c0 <__aeabi_dsub>
 8007bfa:	e77f      	b.n	8007afc <__ieee754_atan2+0x44>
 8007bfc:	a50e      	add	r5, pc, #56	; (adr r5, 8007c38 <__ieee754_atan2+0x180>)
 8007bfe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c02:	e798      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007c04:	a510      	add	r5, pc, #64	; (adr r5, 8007c48 <__ieee754_atan2+0x190>)
 8007c06:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c0a:	e794      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007c0c:	2400      	movs	r4, #0
 8007c0e:	2500      	movs	r5, #0
 8007c10:	e791      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007c12:	a50b      	add	r5, pc, #44	; (adr r5, 8007c40 <__ieee754_atan2+0x188>)
 8007c14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c18:	e78d      	b.n	8007b36 <__ieee754_atan2+0x7e>
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w
 8007c20:	54442d18 	.word	0x54442d18
 8007c24:	c00921fb 	.word	0xc00921fb
 8007c28:	54442d18 	.word	0x54442d18
 8007c2c:	bff921fb 	.word	0xbff921fb
 8007c30:	33145c07 	.word	0x33145c07
 8007c34:	3ca1a626 	.word	0x3ca1a626
 8007c38:	54442d18 	.word	0x54442d18
 8007c3c:	400921fb 	.word	0x400921fb
 8007c40:	54442d18 	.word	0x54442d18
 8007c44:	3ff921fb 	.word	0x3ff921fb
 8007c48:	54442d18 	.word	0x54442d18
 8007c4c:	3fe921fb 	.word	0x3fe921fb
 8007c50:	7ff00000 	.word	0x7ff00000
 8007c54:	08009d78 	.word	0x08009d78
 8007c58:	08009d90 	.word	0x08009d90
 8007c5c:	00000000 	.word	0x00000000

08007c60 <__ieee754_pow>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	b093      	sub	sp, #76	; 0x4c
 8007c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c6a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8007c6e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8007c72:	4689      	mov	r9, r1
 8007c74:	ea56 0102 	orrs.w	r1, r6, r2
 8007c78:	4680      	mov	r8, r0
 8007c7a:	d111      	bne.n	8007ca0 <__ieee754_pow+0x40>
 8007c7c:	1803      	adds	r3, r0, r0
 8007c7e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8007c82:	4152      	adcs	r2, r2
 8007c84:	4299      	cmp	r1, r3
 8007c86:	4b82      	ldr	r3, [pc, #520]	; (8007e90 <__ieee754_pow+0x230>)
 8007c88:	4193      	sbcs	r3, r2
 8007c8a:	f080 84b9 	bcs.w	8008600 <__ieee754_pow+0x9a0>
 8007c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 fb15 	bl	80002c4 <__adddf3>
 8007c9a:	4683      	mov	fp, r0
 8007c9c:	468c      	mov	ip, r1
 8007c9e:	e06f      	b.n	8007d80 <__ieee754_pow+0x120>
 8007ca0:	4b7c      	ldr	r3, [pc, #496]	; (8007e94 <__ieee754_pow+0x234>)
 8007ca2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8007ca6:	429c      	cmp	r4, r3
 8007ca8:	464d      	mov	r5, r9
 8007caa:	4682      	mov	sl, r0
 8007cac:	dc06      	bgt.n	8007cbc <__ieee754_pow+0x5c>
 8007cae:	d101      	bne.n	8007cb4 <__ieee754_pow+0x54>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1ec      	bne.n	8007c8e <__ieee754_pow+0x2e>
 8007cb4:	429e      	cmp	r6, r3
 8007cb6:	dc01      	bgt.n	8007cbc <__ieee754_pow+0x5c>
 8007cb8:	d10f      	bne.n	8007cda <__ieee754_pow+0x7a>
 8007cba:	b172      	cbz	r2, 8007cda <__ieee754_pow+0x7a>
 8007cbc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007cc0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007cc4:	ea55 050a 	orrs.w	r5, r5, sl
 8007cc8:	d1e1      	bne.n	8007c8e <__ieee754_pow+0x2e>
 8007cca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007cce:	18db      	adds	r3, r3, r3
 8007cd0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007cd4:	4152      	adcs	r2, r2
 8007cd6:	429d      	cmp	r5, r3
 8007cd8:	e7d5      	b.n	8007c86 <__ieee754_pow+0x26>
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	da39      	bge.n	8007d52 <__ieee754_pow+0xf2>
 8007cde:	4b6e      	ldr	r3, [pc, #440]	; (8007e98 <__ieee754_pow+0x238>)
 8007ce0:	429e      	cmp	r6, r3
 8007ce2:	dc52      	bgt.n	8007d8a <__ieee754_pow+0x12a>
 8007ce4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007ce8:	429e      	cmp	r6, r3
 8007cea:	f340 849c 	ble.w	8008626 <__ieee754_pow+0x9c6>
 8007cee:	1533      	asrs	r3, r6, #20
 8007cf0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007cf4:	2b14      	cmp	r3, #20
 8007cf6:	dd0f      	ble.n	8007d18 <__ieee754_pow+0xb8>
 8007cf8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007cfc:	fa22 f103 	lsr.w	r1, r2, r3
 8007d00:	fa01 f303 	lsl.w	r3, r1, r3
 8007d04:	4293      	cmp	r3, r2
 8007d06:	f040 848e 	bne.w	8008626 <__ieee754_pow+0x9c6>
 8007d0a:	f001 0101 	and.w	r1, r1, #1
 8007d0e:	f1c1 0302 	rsb	r3, r1, #2
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	b182      	cbz	r2, 8007d38 <__ieee754_pow+0xd8>
 8007d16:	e05d      	b.n	8007dd4 <__ieee754_pow+0x174>
 8007d18:	2a00      	cmp	r2, #0
 8007d1a:	d159      	bne.n	8007dd0 <__ieee754_pow+0x170>
 8007d1c:	f1c3 0314 	rsb	r3, r3, #20
 8007d20:	fa46 f103 	asr.w	r1, r6, r3
 8007d24:	fa01 f303 	lsl.w	r3, r1, r3
 8007d28:	42b3      	cmp	r3, r6
 8007d2a:	f040 8479 	bne.w	8008620 <__ieee754_pow+0x9c0>
 8007d2e:	f001 0101 	and.w	r1, r1, #1
 8007d32:	f1c1 0302 	rsb	r3, r1, #2
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4b58      	ldr	r3, [pc, #352]	; (8007e9c <__ieee754_pow+0x23c>)
 8007d3a:	429e      	cmp	r6, r3
 8007d3c:	d132      	bne.n	8007da4 <__ieee754_pow+0x144>
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	f280 846a 	bge.w	8008618 <__ieee754_pow+0x9b8>
 8007d44:	4642      	mov	r2, r8
 8007d46:	464b      	mov	r3, r9
 8007d48:	2000      	movs	r0, #0
 8007d4a:	4954      	ldr	r1, [pc, #336]	; (8007e9c <__ieee754_pow+0x23c>)
 8007d4c:	f7f8 fd9a 	bl	8000884 <__aeabi_ddiv>
 8007d50:	e7a3      	b.n	8007c9a <__ieee754_pow+0x3a>
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	d13c      	bne.n	8007dd4 <__ieee754_pow+0x174>
 8007d5a:	4b4e      	ldr	r3, [pc, #312]	; (8007e94 <__ieee754_pow+0x234>)
 8007d5c:	429e      	cmp	r6, r3
 8007d5e:	d1eb      	bne.n	8007d38 <__ieee754_pow+0xd8>
 8007d60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007d64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007d68:	ea53 030a 	orrs.w	r3, r3, sl
 8007d6c:	f000 8448 	beq.w	8008600 <__ieee754_pow+0x9a0>
 8007d70:	4b4b      	ldr	r3, [pc, #300]	; (8007ea0 <__ieee754_pow+0x240>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	dd0b      	ble.n	8007d8e <__ieee754_pow+0x12e>
 8007d76:	2f00      	cmp	r7, #0
 8007d78:	f2c0 8448 	blt.w	800860c <__ieee754_pow+0x9ac>
 8007d7c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007d80:	4658      	mov	r0, fp
 8007d82:	4661      	mov	r1, ip
 8007d84:	b013      	add	sp, #76	; 0x4c
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e7e2      	b.n	8007d54 <__ieee754_pow+0xf4>
 8007d8e:	2f00      	cmp	r7, #0
 8007d90:	f04f 0b00 	mov.w	fp, #0
 8007d94:	f04f 0c00 	mov.w	ip, #0
 8007d98:	daf2      	bge.n	8007d80 <__ieee754_pow+0x120>
 8007d9a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007d9e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8007da2:	e7ed      	b.n	8007d80 <__ieee754_pow+0x120>
 8007da4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007da8:	d106      	bne.n	8007db8 <__ieee754_pow+0x158>
 8007daa:	4642      	mov	r2, r8
 8007dac:	464b      	mov	r3, r9
 8007dae:	4640      	mov	r0, r8
 8007db0:	4649      	mov	r1, r9
 8007db2:	f7f8 fc3d 	bl	8000630 <__aeabi_dmul>
 8007db6:	e770      	b.n	8007c9a <__ieee754_pow+0x3a>
 8007db8:	4b3a      	ldr	r3, [pc, #232]	; (8007ea4 <__ieee754_pow+0x244>)
 8007dba:	429f      	cmp	r7, r3
 8007dbc:	d10a      	bne.n	8007dd4 <__ieee754_pow+0x174>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	db08      	blt.n	8007dd4 <__ieee754_pow+0x174>
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	b013      	add	sp, #76	; 0x4c
 8007dc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	f000 be58 	b.w	8008a80 <__ieee754_sqrt>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	4640      	mov	r0, r8
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	f001 fd70 	bl	80098bc <fabs>
 8007ddc:	4683      	mov	fp, r0
 8007dde:	468c      	mov	ip, r1
 8007de0:	f1ba 0f00 	cmp.w	sl, #0
 8007de4:	d128      	bne.n	8007e38 <__ieee754_pow+0x1d8>
 8007de6:	b124      	cbz	r4, 8007df2 <__ieee754_pow+0x192>
 8007de8:	4b2c      	ldr	r3, [pc, #176]	; (8007e9c <__ieee754_pow+0x23c>)
 8007dea:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d122      	bne.n	8007e38 <__ieee754_pow+0x1d8>
 8007df2:	2f00      	cmp	r7, #0
 8007df4:	da07      	bge.n	8007e06 <__ieee754_pow+0x1a6>
 8007df6:	465a      	mov	r2, fp
 8007df8:	4663      	mov	r3, ip
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	4927      	ldr	r1, [pc, #156]	; (8007e9c <__ieee754_pow+0x23c>)
 8007dfe:	f7f8 fd41 	bl	8000884 <__aeabi_ddiv>
 8007e02:	4683      	mov	fp, r0
 8007e04:	468c      	mov	ip, r1
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	daba      	bge.n	8007d80 <__ieee754_pow+0x120>
 8007e0a:	9b00      	ldr	r3, [sp, #0]
 8007e0c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e10:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e14:	4323      	orrs	r3, r4
 8007e16:	d108      	bne.n	8007e2a <__ieee754_pow+0x1ca>
 8007e18:	465a      	mov	r2, fp
 8007e1a:	4663      	mov	r3, ip
 8007e1c:	4658      	mov	r0, fp
 8007e1e:	4661      	mov	r1, ip
 8007e20:	f7f8 fa4e 	bl	80002c0 <__aeabi_dsub>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	e790      	b.n	8007d4c <__ieee754_pow+0xec>
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d1a7      	bne.n	8007d80 <__ieee754_pow+0x120>
 8007e30:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007e34:	469c      	mov	ip, r3
 8007e36:	e7a3      	b.n	8007d80 <__ieee754_pow+0x120>
 8007e38:	0feb      	lsrs	r3, r5, #31
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8007e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	d104      	bne.n	8007e50 <__ieee754_pow+0x1f0>
 8007e46:	4642      	mov	r2, r8
 8007e48:	464b      	mov	r3, r9
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	e7e7      	b.n	8007e20 <__ieee754_pow+0x1c0>
 8007e50:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <__ieee754_pow+0x248>)
 8007e52:	429e      	cmp	r6, r3
 8007e54:	f340 80f6 	ble.w	8008044 <__ieee754_pow+0x3e4>
 8007e58:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007e5c:	429e      	cmp	r6, r3
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <__ieee754_pow+0x240>)
 8007e60:	dd09      	ble.n	8007e76 <__ieee754_pow+0x216>
 8007e62:	429c      	cmp	r4, r3
 8007e64:	dc0c      	bgt.n	8007e80 <__ieee754_pow+0x220>
 8007e66:	2f00      	cmp	r7, #0
 8007e68:	da0c      	bge.n	8007e84 <__ieee754_pow+0x224>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	b013      	add	sp, #76	; 0x4c
 8007e6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e72:	f001 bb92 	b.w	800959a <__math_oflow>
 8007e76:	429c      	cmp	r4, r3
 8007e78:	dbf5      	blt.n	8007e66 <__ieee754_pow+0x206>
 8007e7a:	4b08      	ldr	r3, [pc, #32]	; (8007e9c <__ieee754_pow+0x23c>)
 8007e7c:	429c      	cmp	r4, r3
 8007e7e:	dd15      	ble.n	8007eac <__ieee754_pow+0x24c>
 8007e80:	2f00      	cmp	r7, #0
 8007e82:	dcf2      	bgt.n	8007e6a <__ieee754_pow+0x20a>
 8007e84:	2000      	movs	r0, #0
 8007e86:	b013      	add	sp, #76	; 0x4c
 8007e88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	f001 bb80 	b.w	8009590 <__math_uflow>
 8007e90:	fff00000 	.word	0xfff00000
 8007e94:	7ff00000 	.word	0x7ff00000
 8007e98:	433fffff 	.word	0x433fffff
 8007e9c:	3ff00000 	.word	0x3ff00000
 8007ea0:	3fefffff 	.word	0x3fefffff
 8007ea4:	3fe00000 	.word	0x3fe00000
 8007ea8:	41e00000 	.word	0x41e00000
 8007eac:	4661      	mov	r1, ip
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	4b5f      	ldr	r3, [pc, #380]	; (8008030 <__ieee754_pow+0x3d0>)
 8007eb4:	f7f8 fa04 	bl	80002c0 <__aeabi_dsub>
 8007eb8:	a355      	add	r3, pc, #340	; (adr r3, 8008010 <__ieee754_pow+0x3b0>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	f7f8 fbb5 	bl	8000630 <__aeabi_dmul>
 8007ec6:	a354      	add	r3, pc, #336	; (adr r3, 8008018 <__ieee754_pow+0x3b8>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 fbac 	bl	8000630 <__aeabi_dmul>
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4682      	mov	sl, r0
 8007edc:	468b      	mov	fp, r1
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4b54      	ldr	r3, [pc, #336]	; (8008034 <__ieee754_pow+0x3d4>)
 8007ee4:	f7f8 fba4 	bl	8000630 <__aeabi_dmul>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	a14c      	add	r1, pc, #304	; (adr r1, 8008020 <__ieee754_pow+0x3c0>)
 8007eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef2:	f7f8 f9e5 	bl	80002c0 <__aeabi_dsub>
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	462b      	mov	r3, r5
 8007efa:	f7f8 fb99 	bl	8000630 <__aeabi_dmul>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	2000      	movs	r0, #0
 8007f04:	494c      	ldr	r1, [pc, #304]	; (8008038 <__ieee754_pow+0x3d8>)
 8007f06:	f7f8 f9db 	bl	80002c0 <__aeabi_dsub>
 8007f0a:	4622      	mov	r2, r4
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	4680      	mov	r8, r0
 8007f10:	4689      	mov	r9, r1
 8007f12:	4620      	mov	r0, r4
 8007f14:	4629      	mov	r1, r5
 8007f16:	f7f8 fb8b 	bl	8000630 <__aeabi_dmul>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4640      	mov	r0, r8
 8007f20:	4649      	mov	r1, r9
 8007f22:	f7f8 fb85 	bl	8000630 <__aeabi_dmul>
 8007f26:	a340      	add	r3, pc, #256	; (adr r3, 8008028 <__ieee754_pow+0x3c8>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 fb80 	bl	8000630 <__aeabi_dmul>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4650      	mov	r0, sl
 8007f36:	4659      	mov	r1, fp
 8007f38:	f7f8 f9c2 	bl	80002c0 <__aeabi_dsub>
 8007f3c:	f04f 0a00 	mov.w	sl, #0
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 f9ba 	bl	80002c4 <__adddf3>
 8007f50:	4632      	mov	r2, r6
 8007f52:	463b      	mov	r3, r7
 8007f54:	4650      	mov	r0, sl
 8007f56:	468b      	mov	fp, r1
 8007f58:	f7f8 f9b2 	bl	80002c0 <__aeabi_dsub>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4620      	mov	r0, r4
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 f9ac 	bl	80002c0 <__aeabi_dsub>
 8007f68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f6c:	9b00      	ldr	r3, [sp, #0]
 8007f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f70:	3b01      	subs	r3, #1
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f04f 0600 	mov.w	r6, #0
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	bf0c      	ite	eq
 8007f7e:	4b2f      	ldreq	r3, [pc, #188]	; (800803c <__ieee754_pow+0x3dc>)
 8007f80:	4b2b      	ldrne	r3, [pc, #172]	; (8008030 <__ieee754_pow+0x3d0>)
 8007f82:	4604      	mov	r4, r0
 8007f84:	460d      	mov	r5, r1
 8007f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f8a:	e9cd 2300 	strd	r2, r3, [sp]
 8007f8e:	4632      	mov	r2, r6
 8007f90:	463b      	mov	r3, r7
 8007f92:	f7f8 f995 	bl	80002c0 <__aeabi_dsub>
 8007f96:	4652      	mov	r2, sl
 8007f98:	465b      	mov	r3, fp
 8007f9a:	f7f8 fb49 	bl	8000630 <__aeabi_dmul>
 8007f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	4689      	mov	r9, r1
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fb41 	bl	8000630 <__aeabi_dmul>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 f985 	bl	80002c4 <__adddf3>
 8007fba:	4632      	mov	r2, r6
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	4680      	mov	r8, r0
 8007fc0:	4689      	mov	r9, r1
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	f7f8 fb33 	bl	8000630 <__aeabi_dmul>
 8007fca:	4604      	mov	r4, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007fda:	f7f8 f973 	bl	80002c4 <__adddf3>
 8007fde:	4b18      	ldr	r3, [pc, #96]	; (8008040 <__ieee754_pow+0x3e0>)
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	f340 82e5 	ble.w	80085b6 <__ieee754_pow+0x956>
 8007fec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007ff0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007ff4:	4303      	orrs	r3, r0
 8007ff6:	f000 81df 	beq.w	80083b8 <__ieee754_pow+0x758>
 8007ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2300      	movs	r3, #0
 8008002:	f7f8 fd87 	bl	8000b14 <__aeabi_dcmplt>
 8008006:	3800      	subs	r0, #0
 8008008:	bf18      	it	ne
 800800a:	2001      	movne	r0, #1
 800800c:	e72e      	b.n	8007e6c <__ieee754_pow+0x20c>
 800800e:	bf00      	nop
 8008010:	60000000 	.word	0x60000000
 8008014:	3ff71547 	.word	0x3ff71547
 8008018:	f85ddf44 	.word	0xf85ddf44
 800801c:	3e54ae0b 	.word	0x3e54ae0b
 8008020:	55555555 	.word	0x55555555
 8008024:	3fd55555 	.word	0x3fd55555
 8008028:	652b82fe 	.word	0x652b82fe
 800802c:	3ff71547 	.word	0x3ff71547
 8008030:	3ff00000 	.word	0x3ff00000
 8008034:	3fd00000 	.word	0x3fd00000
 8008038:	3fe00000 	.word	0x3fe00000
 800803c:	bff00000 	.word	0xbff00000
 8008040:	408fffff 	.word	0x408fffff
 8008044:	4bd2      	ldr	r3, [pc, #840]	; (8008390 <__ieee754_pow+0x730>)
 8008046:	2200      	movs	r2, #0
 8008048:	402b      	ands	r3, r5
 800804a:	b943      	cbnz	r3, 800805e <__ieee754_pow+0x3fe>
 800804c:	4658      	mov	r0, fp
 800804e:	4661      	mov	r1, ip
 8008050:	4bd0      	ldr	r3, [pc, #832]	; (8008394 <__ieee754_pow+0x734>)
 8008052:	f7f8 faed 	bl	8000630 <__aeabi_dmul>
 8008056:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800805a:	4683      	mov	fp, r0
 800805c:	460c      	mov	r4, r1
 800805e:	1523      	asrs	r3, r4, #20
 8008060:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008064:	4413      	add	r3, r2
 8008066:	930b      	str	r3, [sp, #44]	; 0x2c
 8008068:	4bcb      	ldr	r3, [pc, #812]	; (8008398 <__ieee754_pow+0x738>)
 800806a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800806e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008072:	429c      	cmp	r4, r3
 8008074:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008078:	dd08      	ble.n	800808c <__ieee754_pow+0x42c>
 800807a:	4bc8      	ldr	r3, [pc, #800]	; (800839c <__ieee754_pow+0x73c>)
 800807c:	429c      	cmp	r4, r3
 800807e:	f340 8199 	ble.w	80083b4 <__ieee754_pow+0x754>
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008088:	3301      	adds	r3, #1
 800808a:	930b      	str	r3, [sp, #44]	; 0x2c
 800808c:	2600      	movs	r6, #0
 800808e:	00f3      	lsls	r3, r6, #3
 8008090:	930d      	str	r3, [sp, #52]	; 0x34
 8008092:	4bc3      	ldr	r3, [pc, #780]	; (80083a0 <__ieee754_pow+0x740>)
 8008094:	4658      	mov	r0, fp
 8008096:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800809a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800809e:	4629      	mov	r1, r5
 80080a0:	461a      	mov	r2, r3
 80080a2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80080a6:	4623      	mov	r3, r4
 80080a8:	f7f8 f90a 	bl	80002c0 <__aeabi_dsub>
 80080ac:	46da      	mov	sl, fp
 80080ae:	462b      	mov	r3, r5
 80080b0:	4652      	mov	r2, sl
 80080b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80080b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080ba:	f7f8 f903 	bl	80002c4 <__adddf3>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	2000      	movs	r0, #0
 80080c4:	49b7      	ldr	r1, [pc, #732]	; (80083a4 <__ieee754_pow+0x744>)
 80080c6:	f7f8 fbdd 	bl	8000884 <__aeabi_ddiv>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80080d6:	f7f8 faab 	bl	8000630 <__aeabi_dmul>
 80080da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080de:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80080e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080e6:	2300      	movs	r3, #0
 80080e8:	2200      	movs	r2, #0
 80080ea:	46ab      	mov	fp, r5
 80080ec:	106d      	asrs	r5, r5, #1
 80080ee:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80080f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080fc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008100:	4640      	mov	r0, r8
 8008102:	4649      	mov	r1, r9
 8008104:	4614      	mov	r4, r2
 8008106:	461d      	mov	r5, r3
 8008108:	f7f8 fa92 	bl	8000630 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008114:	f7f8 f8d4 	bl	80002c0 <__aeabi_dsub>
 8008118:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	4620      	mov	r0, r4
 8008122:	4629      	mov	r1, r5
 8008124:	f7f8 f8cc 	bl	80002c0 <__aeabi_dsub>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4650      	mov	r0, sl
 800812e:	4659      	mov	r1, fp
 8008130:	f7f8 f8c6 	bl	80002c0 <__aeabi_dsub>
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	f7f8 fa7a 	bl	8000630 <__aeabi_dmul>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 f8bc 	bl	80002c0 <__aeabi_dsub>
 8008148:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800814c:	f7f8 fa70 	bl	8000630 <__aeabi_dmul>
 8008150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008154:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	f7f8 fa68 	bl	8000630 <__aeabi_dmul>
 8008160:	a379      	add	r3, pc, #484	; (adr r3, 8008348 <__ieee754_pow+0x6e8>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	4604      	mov	r4, r0
 8008168:	460d      	mov	r5, r1
 800816a:	f7f8 fa61 	bl	8000630 <__aeabi_dmul>
 800816e:	a378      	add	r3, pc, #480	; (adr r3, 8008350 <__ieee754_pow+0x6f0>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	f7f8 f8a6 	bl	80002c4 <__adddf3>
 8008178:	4622      	mov	r2, r4
 800817a:	462b      	mov	r3, r5
 800817c:	f7f8 fa58 	bl	8000630 <__aeabi_dmul>
 8008180:	a375      	add	r3, pc, #468	; (adr r3, 8008358 <__ieee754_pow+0x6f8>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 f89d 	bl	80002c4 <__adddf3>
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	f7f8 fa4f 	bl	8000630 <__aeabi_dmul>
 8008192:	a373      	add	r3, pc, #460	; (adr r3, 8008360 <__ieee754_pow+0x700>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 f894 	bl	80002c4 <__adddf3>
 800819c:	4622      	mov	r2, r4
 800819e:	462b      	mov	r3, r5
 80081a0:	f7f8 fa46 	bl	8000630 <__aeabi_dmul>
 80081a4:	a370      	add	r3, pc, #448	; (adr r3, 8008368 <__ieee754_pow+0x708>)
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f7f8 f88b 	bl	80002c4 <__adddf3>
 80081ae:	4622      	mov	r2, r4
 80081b0:	462b      	mov	r3, r5
 80081b2:	f7f8 fa3d 	bl	8000630 <__aeabi_dmul>
 80081b6:	a36e      	add	r3, pc, #440	; (adr r3, 8008370 <__ieee754_pow+0x710>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 f882 	bl	80002c4 <__adddf3>
 80081c0:	4622      	mov	r2, r4
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	462b      	mov	r3, r5
 80081c8:	4620      	mov	r0, r4
 80081ca:	4629      	mov	r1, r5
 80081cc:	f7f8 fa30 	bl	8000630 <__aeabi_dmul>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	f7f8 fa2a 	bl	8000630 <__aeabi_dmul>
 80081dc:	4604      	mov	r4, r0
 80081de:	460d      	mov	r5, r1
 80081e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081e4:	4642      	mov	r2, r8
 80081e6:	464b      	mov	r3, r9
 80081e8:	f7f8 f86c 	bl	80002c4 <__adddf3>
 80081ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80081f0:	f7f8 fa1e 	bl	8000630 <__aeabi_dmul>
 80081f4:	4622      	mov	r2, r4
 80081f6:	462b      	mov	r3, r5
 80081f8:	f7f8 f864 	bl	80002c4 <__adddf3>
 80081fc:	4642      	mov	r2, r8
 80081fe:	4606      	mov	r6, r0
 8008200:	460f      	mov	r7, r1
 8008202:	464b      	mov	r3, r9
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 fa12 	bl	8000630 <__aeabi_dmul>
 800820c:	2200      	movs	r2, #0
 800820e:	4b66      	ldr	r3, [pc, #408]	; (80083a8 <__ieee754_pow+0x748>)
 8008210:	4682      	mov	sl, r0
 8008212:	468b      	mov	fp, r1
 8008214:	f7f8 f856 	bl	80002c4 <__adddf3>
 8008218:	4632      	mov	r2, r6
 800821a:	463b      	mov	r3, r7
 800821c:	f7f8 f852 	bl	80002c4 <__adddf3>
 8008220:	2400      	movs	r4, #0
 8008222:	460d      	mov	r5, r1
 8008224:	4622      	mov	r2, r4
 8008226:	460b      	mov	r3, r1
 8008228:	4640      	mov	r0, r8
 800822a:	4649      	mov	r1, r9
 800822c:	f7f8 fa00 	bl	8000630 <__aeabi_dmul>
 8008230:	2200      	movs	r2, #0
 8008232:	4680      	mov	r8, r0
 8008234:	4689      	mov	r9, r1
 8008236:	4620      	mov	r0, r4
 8008238:	4629      	mov	r1, r5
 800823a:	4b5b      	ldr	r3, [pc, #364]	; (80083a8 <__ieee754_pow+0x748>)
 800823c:	f7f8 f840 	bl	80002c0 <__aeabi_dsub>
 8008240:	4652      	mov	r2, sl
 8008242:	465b      	mov	r3, fp
 8008244:	f7f8 f83c 	bl	80002c0 <__aeabi_dsub>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 f836 	bl	80002c0 <__aeabi_dsub>
 8008254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008258:	f7f8 f9ea 	bl	8000630 <__aeabi_dmul>
 800825c:	4622      	mov	r2, r4
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008266:	462b      	mov	r3, r5
 8008268:	f7f8 f9e2 	bl	8000630 <__aeabi_dmul>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4630      	mov	r0, r6
 8008272:	4639      	mov	r1, r7
 8008274:	f7f8 f826 	bl	80002c4 <__adddf3>
 8008278:	2400      	movs	r4, #0
 800827a:	4606      	mov	r6, r0
 800827c:	460f      	mov	r7, r1
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 f81d 	bl	80002c4 <__adddf3>
 800828a:	a33b      	add	r3, pc, #236	; (adr r3, 8008378 <__ieee754_pow+0x718>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	4620      	mov	r0, r4
 8008292:	460d      	mov	r5, r1
 8008294:	f7f8 f9cc 	bl	8000630 <__aeabi_dmul>
 8008298:	4642      	mov	r2, r8
 800829a:	464b      	mov	r3, r9
 800829c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082a0:	4620      	mov	r0, r4
 80082a2:	4629      	mov	r1, r5
 80082a4:	f7f8 f80c 	bl	80002c0 <__aeabi_dsub>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4630      	mov	r0, r6
 80082ae:	4639      	mov	r1, r7
 80082b0:	f7f8 f806 	bl	80002c0 <__aeabi_dsub>
 80082b4:	a332      	add	r3, pc, #200	; (adr r3, 8008380 <__ieee754_pow+0x720>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f8 f9b9 	bl	8000630 <__aeabi_dmul>
 80082be:	a332      	add	r3, pc, #200	; (adr r3, 8008388 <__ieee754_pow+0x728>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4606      	mov	r6, r0
 80082c6:	460f      	mov	r7, r1
 80082c8:	4620      	mov	r0, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	f7f8 f9b0 	bl	8000630 <__aeabi_dmul>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4630      	mov	r0, r6
 80082d6:	4639      	mov	r1, r7
 80082d8:	f7f7 fff4 	bl	80002c4 <__adddf3>
 80082dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082de:	4b33      	ldr	r3, [pc, #204]	; (80083ac <__ieee754_pow+0x74c>)
 80082e0:	f04f 0a00 	mov.w	sl, #0
 80082e4:	4413      	add	r3, r2
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ffeb 	bl	80002c4 <__adddf3>
 80082ee:	4680      	mov	r8, r0
 80082f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80082f2:	4689      	mov	r9, r1
 80082f4:	f7f8 f932 	bl	800055c <__aeabi_i2d>
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082fe:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <__ieee754_pow+0x750>)
 8008300:	4413      	add	r3, r2
 8008302:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008306:	4642      	mov	r2, r8
 8008308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800830c:	464b      	mov	r3, r9
 800830e:	f7f7 ffd9 	bl	80002c4 <__adddf3>
 8008312:	4632      	mov	r2, r6
 8008314:	463b      	mov	r3, r7
 8008316:	f7f7 ffd5 	bl	80002c4 <__adddf3>
 800831a:	4622      	mov	r2, r4
 800831c:	462b      	mov	r3, r5
 800831e:	f7f7 ffd1 	bl	80002c4 <__adddf3>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	4650      	mov	r0, sl
 8008328:	468b      	mov	fp, r1
 800832a:	f7f7 ffc9 	bl	80002c0 <__aeabi_dsub>
 800832e:	4632      	mov	r2, r6
 8008330:	463b      	mov	r3, r7
 8008332:	f7f7 ffc5 	bl	80002c0 <__aeabi_dsub>
 8008336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800833a:	f7f7 ffc1 	bl	80002c0 <__aeabi_dsub>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4640      	mov	r0, r8
 8008344:	4649      	mov	r1, r9
 8008346:	e60d      	b.n	8007f64 <__ieee754_pow+0x304>
 8008348:	4a454eef 	.word	0x4a454eef
 800834c:	3fca7e28 	.word	0x3fca7e28
 8008350:	93c9db65 	.word	0x93c9db65
 8008354:	3fcd864a 	.word	0x3fcd864a
 8008358:	a91d4101 	.word	0xa91d4101
 800835c:	3fd17460 	.word	0x3fd17460
 8008360:	518f264d 	.word	0x518f264d
 8008364:	3fd55555 	.word	0x3fd55555
 8008368:	db6fabff 	.word	0xdb6fabff
 800836c:	3fdb6db6 	.word	0x3fdb6db6
 8008370:	33333303 	.word	0x33333303
 8008374:	3fe33333 	.word	0x3fe33333
 8008378:	e0000000 	.word	0xe0000000
 800837c:	3feec709 	.word	0x3feec709
 8008380:	dc3a03fd 	.word	0xdc3a03fd
 8008384:	3feec709 	.word	0x3feec709
 8008388:	145b01f5 	.word	0x145b01f5
 800838c:	be3e2fe0 	.word	0xbe3e2fe0
 8008390:	7ff00000 	.word	0x7ff00000
 8008394:	43400000 	.word	0x43400000
 8008398:	0003988e 	.word	0x0003988e
 800839c:	000bb679 	.word	0x000bb679
 80083a0:	08009da8 	.word	0x08009da8
 80083a4:	3ff00000 	.word	0x3ff00000
 80083a8:	40080000 	.word	0x40080000
 80083ac:	08009dc8 	.word	0x08009dc8
 80083b0:	08009db8 	.word	0x08009db8
 80083b4:	2601      	movs	r6, #1
 80083b6:	e66a      	b.n	800808e <__ieee754_pow+0x42e>
 80083b8:	a39d      	add	r3, pc, #628	; (adr r3, 8008630 <__ieee754_pow+0x9d0>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f7 ff7f 	bl	80002c4 <__adddf3>
 80083c6:	4622      	mov	r2, r4
 80083c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083cc:	462b      	mov	r3, r5
 80083ce:	4650      	mov	r0, sl
 80083d0:	4639      	mov	r1, r7
 80083d2:	f7f7 ff75 	bl	80002c0 <__aeabi_dsub>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083de:	f7f8 fbb7 	bl	8000b50 <__aeabi_dcmpgt>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f47f ae09 	bne.w	8007ffa <__ieee754_pow+0x39a>
 80083e8:	4aa3      	ldr	r2, [pc, #652]	; (8008678 <__ieee754_pow+0xa18>)
 80083ea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80083ee:	4293      	cmp	r3, r2
 80083f0:	f340 8101 	ble.w	80085f6 <__ieee754_pow+0x996>
 80083f4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80083f8:	2000      	movs	r0, #0
 80083fa:	151b      	asrs	r3, r3, #20
 80083fc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008400:	fa4a f303 	asr.w	r3, sl, r3
 8008404:	4433      	add	r3, r6
 8008406:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800840a:	4f9c      	ldr	r7, [pc, #624]	; (800867c <__ieee754_pow+0xa1c>)
 800840c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008410:	4117      	asrs	r7, r2
 8008412:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008416:	ea23 0107 	bic.w	r1, r3, r7
 800841a:	f1c2 0214 	rsb	r2, r2, #20
 800841e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008422:	460b      	mov	r3, r1
 8008424:	fa4a fa02 	asr.w	sl, sl, r2
 8008428:	2e00      	cmp	r6, #0
 800842a:	4602      	mov	r2, r0
 800842c:	4629      	mov	r1, r5
 800842e:	4620      	mov	r0, r4
 8008430:	bfb8      	it	lt
 8008432:	f1ca 0a00 	rsblt	sl, sl, #0
 8008436:	f7f7 ff43 	bl	80002c0 <__aeabi_dsub>
 800843a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800843e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008442:	2400      	movs	r4, #0
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	f7f7 ff3c 	bl	80002c4 <__adddf3>
 800844c:	a37a      	add	r3, pc, #488	; (adr r3, 8008638 <__ieee754_pow+0x9d8>)
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	4620      	mov	r0, r4
 8008454:	460d      	mov	r5, r1
 8008456:	f7f8 f8eb 	bl	8000630 <__aeabi_dmul>
 800845a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800845e:	4606      	mov	r6, r0
 8008460:	460f      	mov	r7, r1
 8008462:	4620      	mov	r0, r4
 8008464:	4629      	mov	r1, r5
 8008466:	f7f7 ff2b 	bl	80002c0 <__aeabi_dsub>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	4640      	mov	r0, r8
 8008470:	4649      	mov	r1, r9
 8008472:	f7f7 ff25 	bl	80002c0 <__aeabi_dsub>
 8008476:	a372      	add	r3, pc, #456	; (adr r3, 8008640 <__ieee754_pow+0x9e0>)
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f7f8 f8d8 	bl	8000630 <__aeabi_dmul>
 8008480:	a371      	add	r3, pc, #452	; (adr r3, 8008648 <__ieee754_pow+0x9e8>)
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	4680      	mov	r8, r0
 8008488:	4689      	mov	r9, r1
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	f7f8 f8cf 	bl	8000630 <__aeabi_dmul>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4640      	mov	r0, r8
 8008498:	4649      	mov	r1, r9
 800849a:	f7f7 ff13 	bl	80002c4 <__adddf3>
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f7 ff0b 	bl	80002c4 <__adddf3>
 80084ae:	4632      	mov	r2, r6
 80084b0:	463b      	mov	r3, r7
 80084b2:	4680      	mov	r8, r0
 80084b4:	4689      	mov	r9, r1
 80084b6:	f7f7 ff03 	bl	80002c0 <__aeabi_dsub>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f7 fefd 	bl	80002c0 <__aeabi_dsub>
 80084c6:	4642      	mov	r2, r8
 80084c8:	4606      	mov	r6, r0
 80084ca:	460f      	mov	r7, r1
 80084cc:	464b      	mov	r3, r9
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f7f8 f8ad 	bl	8000630 <__aeabi_dmul>
 80084d6:	a35e      	add	r3, pc, #376	; (adr r3, 8008650 <__ieee754_pow+0x9f0>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	4604      	mov	r4, r0
 80084de:	460d      	mov	r5, r1
 80084e0:	f7f8 f8a6 	bl	8000630 <__aeabi_dmul>
 80084e4:	a35c      	add	r3, pc, #368	; (adr r3, 8008658 <__ieee754_pow+0x9f8>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f7 fee9 	bl	80002c0 <__aeabi_dsub>
 80084ee:	4622      	mov	r2, r4
 80084f0:	462b      	mov	r3, r5
 80084f2:	f7f8 f89d 	bl	8000630 <__aeabi_dmul>
 80084f6:	a35a      	add	r3, pc, #360	; (adr r3, 8008660 <__ieee754_pow+0xa00>)
 80084f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fc:	f7f7 fee2 	bl	80002c4 <__adddf3>
 8008500:	4622      	mov	r2, r4
 8008502:	462b      	mov	r3, r5
 8008504:	f7f8 f894 	bl	8000630 <__aeabi_dmul>
 8008508:	a357      	add	r3, pc, #348	; (adr r3, 8008668 <__ieee754_pow+0xa08>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 fed7 	bl	80002c0 <__aeabi_dsub>
 8008512:	4622      	mov	r2, r4
 8008514:	462b      	mov	r3, r5
 8008516:	f7f8 f88b 	bl	8000630 <__aeabi_dmul>
 800851a:	a355      	add	r3, pc, #340	; (adr r3, 8008670 <__ieee754_pow+0xa10>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f7f7 fed0 	bl	80002c4 <__adddf3>
 8008524:	4622      	mov	r2, r4
 8008526:	462b      	mov	r3, r5
 8008528:	f7f8 f882 	bl	8000630 <__aeabi_dmul>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f7f7 fec4 	bl	80002c0 <__aeabi_dsub>
 8008538:	4604      	mov	r4, r0
 800853a:	460d      	mov	r5, r1
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4640      	mov	r0, r8
 8008542:	4649      	mov	r1, r9
 8008544:	f7f8 f874 	bl	8000630 <__aeabi_dmul>
 8008548:	2200      	movs	r2, #0
 800854a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800854e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	f7f7 feb3 	bl	80002c0 <__aeabi_dsub>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008562:	f7f8 f98f 	bl	8000884 <__aeabi_ddiv>
 8008566:	4632      	mov	r2, r6
 8008568:	4604      	mov	r4, r0
 800856a:	460d      	mov	r5, r1
 800856c:	463b      	mov	r3, r7
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f8 f85d 	bl	8000630 <__aeabi_dmul>
 8008576:	4632      	mov	r2, r6
 8008578:	463b      	mov	r3, r7
 800857a:	f7f7 fea3 	bl	80002c4 <__adddf3>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f7 fe9b 	bl	80002c0 <__aeabi_dsub>
 800858a:	4642      	mov	r2, r8
 800858c:	464b      	mov	r3, r9
 800858e:	f7f7 fe97 	bl	80002c0 <__aeabi_dsub>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	2000      	movs	r0, #0
 8008598:	4939      	ldr	r1, [pc, #228]	; (8008680 <__ieee754_pow+0xa20>)
 800859a:	f7f7 fe91 	bl	80002c0 <__aeabi_dsub>
 800859e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80085a2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80085a6:	da29      	bge.n	80085fc <__ieee754_pow+0x99c>
 80085a8:	4652      	mov	r2, sl
 80085aa:	f001 fa11 	bl	80099d0 <scalbn>
 80085ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b2:	f7ff bbfe 	b.w	8007db2 <__ieee754_pow+0x152>
 80085b6:	4b33      	ldr	r3, [pc, #204]	; (8008684 <__ieee754_pow+0xa24>)
 80085b8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80085bc:	429f      	cmp	r7, r3
 80085be:	f77f af13 	ble.w	80083e8 <__ieee754_pow+0x788>
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <__ieee754_pow+0xa28>)
 80085c4:	440b      	add	r3, r1
 80085c6:	4303      	orrs	r3, r0
 80085c8:	d009      	beq.n	80085de <__ieee754_pow+0x97e>
 80085ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085ce:	2200      	movs	r2, #0
 80085d0:	2300      	movs	r3, #0
 80085d2:	f7f8 fa9f 	bl	8000b14 <__aeabi_dcmplt>
 80085d6:	3800      	subs	r0, #0
 80085d8:	bf18      	it	ne
 80085da:	2001      	movne	r0, #1
 80085dc:	e453      	b.n	8007e86 <__ieee754_pow+0x226>
 80085de:	4622      	mov	r2, r4
 80085e0:	462b      	mov	r3, r5
 80085e2:	f7f7 fe6d 	bl	80002c0 <__aeabi_dsub>
 80085e6:	4642      	mov	r2, r8
 80085e8:	464b      	mov	r3, r9
 80085ea:	f7f8 faa7 	bl	8000b3c <__aeabi_dcmpge>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f43f aefa 	beq.w	80083e8 <__ieee754_pow+0x788>
 80085f4:	e7e9      	b.n	80085ca <__ieee754_pow+0x96a>
 80085f6:	f04f 0a00 	mov.w	sl, #0
 80085fa:	e720      	b.n	800843e <__ieee754_pow+0x7de>
 80085fc:	4621      	mov	r1, r4
 80085fe:	e7d6      	b.n	80085ae <__ieee754_pow+0x94e>
 8008600:	f04f 0b00 	mov.w	fp, #0
 8008604:	f8df c078 	ldr.w	ip, [pc, #120]	; 8008680 <__ieee754_pow+0xa20>
 8008608:	f7ff bbba 	b.w	8007d80 <__ieee754_pow+0x120>
 800860c:	f04f 0b00 	mov.w	fp, #0
 8008610:	f04f 0c00 	mov.w	ip, #0
 8008614:	f7ff bbb4 	b.w	8007d80 <__ieee754_pow+0x120>
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	f7ff bb3d 	b.w	8007c9a <__ieee754_pow+0x3a>
 8008620:	9200      	str	r2, [sp, #0]
 8008622:	f7ff bb89 	b.w	8007d38 <__ieee754_pow+0xd8>
 8008626:	2300      	movs	r3, #0
 8008628:	f7ff bb73 	b.w	8007d12 <__ieee754_pow+0xb2>
 800862c:	f3af 8000 	nop.w
 8008630:	652b82fe 	.word	0x652b82fe
 8008634:	3c971547 	.word	0x3c971547
 8008638:	00000000 	.word	0x00000000
 800863c:	3fe62e43 	.word	0x3fe62e43
 8008640:	fefa39ef 	.word	0xfefa39ef
 8008644:	3fe62e42 	.word	0x3fe62e42
 8008648:	0ca86c39 	.word	0x0ca86c39
 800864c:	be205c61 	.word	0xbe205c61
 8008650:	72bea4d0 	.word	0x72bea4d0
 8008654:	3e663769 	.word	0x3e663769
 8008658:	c5d26bf1 	.word	0xc5d26bf1
 800865c:	3ebbbd41 	.word	0x3ebbbd41
 8008660:	af25de2c 	.word	0xaf25de2c
 8008664:	3f11566a 	.word	0x3f11566a
 8008668:	16bebd93 	.word	0x16bebd93
 800866c:	3f66c16c 	.word	0x3f66c16c
 8008670:	5555553e 	.word	0x5555553e
 8008674:	3fc55555 	.word	0x3fc55555
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	000fffff 	.word	0x000fffff
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	4090cbff 	.word	0x4090cbff
 8008688:	3f6f3400 	.word	0x3f6f3400
 800868c:	00000000 	.word	0x00000000

08008690 <__ieee754_rem_pio2>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	4614      	mov	r4, r2
 8008696:	4ac4      	ldr	r2, [pc, #784]	; (80089a8 <__ieee754_rem_pio2+0x318>)
 8008698:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800869c:	b08d      	sub	sp, #52	; 0x34
 800869e:	4592      	cmp	sl, r2
 80086a0:	9104      	str	r1, [sp, #16]
 80086a2:	dc07      	bgt.n	80086b4 <__ieee754_rem_pio2+0x24>
 80086a4:	2200      	movs	r2, #0
 80086a6:	2300      	movs	r3, #0
 80086a8:	e9c4 0100 	strd	r0, r1, [r4]
 80086ac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80086b0:	2500      	movs	r5, #0
 80086b2:	e024      	b.n	80086fe <__ieee754_rem_pio2+0x6e>
 80086b4:	4abd      	ldr	r2, [pc, #756]	; (80089ac <__ieee754_rem_pio2+0x31c>)
 80086b6:	4592      	cmp	sl, r2
 80086b8:	dc72      	bgt.n	80087a0 <__ieee754_rem_pio2+0x110>
 80086ba:	9b04      	ldr	r3, [sp, #16]
 80086bc:	4dbc      	ldr	r5, [pc, #752]	; (80089b0 <__ieee754_rem_pio2+0x320>)
 80086be:	2b00      	cmp	r3, #0
 80086c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2e0>)
 80086c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c6:	dd36      	ble.n	8008736 <__ieee754_rem_pio2+0xa6>
 80086c8:	f7f7 fdfa 	bl	80002c0 <__aeabi_dsub>
 80086cc:	45aa      	cmp	sl, r5
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	d018      	beq.n	8008706 <__ieee754_rem_pio2+0x76>
 80086d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008978 <__ieee754_rem_pio2+0x2e8>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f7f7 fdf1 	bl	80002c0 <__aeabi_dsub>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4630      	mov	r0, r6
 80086e4:	e9c4 2300 	strd	r2, r3, [r4]
 80086e8:	4639      	mov	r1, r7
 80086ea:	f7f7 fde9 	bl	80002c0 <__aeabi_dsub>
 80086ee:	a3a2      	add	r3, pc, #648	; (adr r3, 8008978 <__ieee754_rem_pio2+0x2e8>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 fde4 	bl	80002c0 <__aeabi_dsub>
 80086f8:	2501      	movs	r5, #1
 80086fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086fe:	4628      	mov	r0, r5
 8008700:	b00d      	add	sp, #52	; 0x34
 8008702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008706:	a39e      	add	r3, pc, #632	; (adr r3, 8008980 <__ieee754_rem_pio2+0x2f0>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fdd8 	bl	80002c0 <__aeabi_dsub>
 8008710:	a39d      	add	r3, pc, #628	; (adr r3, 8008988 <__ieee754_rem_pio2+0x2f8>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	4606      	mov	r6, r0
 8008718:	460f      	mov	r7, r1
 800871a:	f7f7 fdd1 	bl	80002c0 <__aeabi_dsub>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4630      	mov	r0, r6
 8008724:	e9c4 2300 	strd	r2, r3, [r4]
 8008728:	4639      	mov	r1, r7
 800872a:	f7f7 fdc9 	bl	80002c0 <__aeabi_dsub>
 800872e:	a396      	add	r3, pc, #600	; (adr r3, 8008988 <__ieee754_rem_pio2+0x2f8>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	e7de      	b.n	80086f4 <__ieee754_rem_pio2+0x64>
 8008736:	f7f7 fdc5 	bl	80002c4 <__adddf3>
 800873a:	45aa      	cmp	sl, r5
 800873c:	4606      	mov	r6, r0
 800873e:	460f      	mov	r7, r1
 8008740:	d016      	beq.n	8008770 <__ieee754_rem_pio2+0xe0>
 8008742:	a38d      	add	r3, pc, #564	; (adr r3, 8008978 <__ieee754_rem_pio2+0x2e8>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fdbc 	bl	80002c4 <__adddf3>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4630      	mov	r0, r6
 8008752:	e9c4 2300 	strd	r2, r3, [r4]
 8008756:	4639      	mov	r1, r7
 8008758:	f7f7 fdb2 	bl	80002c0 <__aeabi_dsub>
 800875c:	a386      	add	r3, pc, #536	; (adr r3, 8008978 <__ieee754_rem_pio2+0x2e8>)
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	f7f7 fdaf 	bl	80002c4 <__adddf3>
 8008766:	f04f 35ff 	mov.w	r5, #4294967295
 800876a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800876e:	e7c6      	b.n	80086fe <__ieee754_rem_pio2+0x6e>
 8008770:	a383      	add	r3, pc, #524	; (adr r3, 8008980 <__ieee754_rem_pio2+0x2f0>)
 8008772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008776:	f7f7 fda5 	bl	80002c4 <__adddf3>
 800877a:	a383      	add	r3, pc, #524	; (adr r3, 8008988 <__ieee754_rem_pio2+0x2f8>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	4606      	mov	r6, r0
 8008782:	460f      	mov	r7, r1
 8008784:	f7f7 fd9e 	bl	80002c4 <__adddf3>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4630      	mov	r0, r6
 800878e:	e9c4 2300 	strd	r2, r3, [r4]
 8008792:	4639      	mov	r1, r7
 8008794:	f7f7 fd94 	bl	80002c0 <__aeabi_dsub>
 8008798:	a37b      	add	r3, pc, #492	; (adr r3, 8008988 <__ieee754_rem_pio2+0x2f8>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	e7e0      	b.n	8008762 <__ieee754_rem_pio2+0xd2>
 80087a0:	4a84      	ldr	r2, [pc, #528]	; (80089b4 <__ieee754_rem_pio2+0x324>)
 80087a2:	4592      	cmp	sl, r2
 80087a4:	f300 80d5 	bgt.w	8008952 <__ieee754_rem_pio2+0x2c2>
 80087a8:	f001 f888 	bl	80098bc <fabs>
 80087ac:	a378      	add	r3, pc, #480	; (adr r3, 8008990 <__ieee754_rem_pio2+0x300>)
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	f7f7 ff3b 	bl	8000630 <__aeabi_dmul>
 80087ba:	2200      	movs	r2, #0
 80087bc:	4b7e      	ldr	r3, [pc, #504]	; (80089b8 <__ieee754_rem_pio2+0x328>)
 80087be:	f7f7 fd81 	bl	80002c4 <__adddf3>
 80087c2:	f7f8 f9e5 	bl	8000b90 <__aeabi_d2iz>
 80087c6:	4605      	mov	r5, r0
 80087c8:	f7f7 fec8 	bl	800055c <__aeabi_i2d>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087d4:	a366      	add	r3, pc, #408	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2e0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 ff29 	bl	8000630 <__aeabi_dmul>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4630      	mov	r0, r6
 80087e4:	4639      	mov	r1, r7
 80087e6:	f7f7 fd6b 	bl	80002c0 <__aeabi_dsub>
 80087ea:	a363      	add	r3, pc, #396	; (adr r3, 8008978 <__ieee754_rem_pio2+0x2e8>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	4680      	mov	r8, r0
 80087f2:	4689      	mov	r9, r1
 80087f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f8:	f7f7 ff1a 	bl	8000630 <__aeabi_dmul>
 80087fc:	2d1f      	cmp	r5, #31
 80087fe:	4606      	mov	r6, r0
 8008800:	460f      	mov	r7, r1
 8008802:	dc0e      	bgt.n	8008822 <__ieee754_rem_pio2+0x192>
 8008804:	4b6d      	ldr	r3, [pc, #436]	; (80089bc <__ieee754_rem_pio2+0x32c>)
 8008806:	1e6a      	subs	r2, r5, #1
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	4553      	cmp	r3, sl
 800880e:	d008      	beq.n	8008822 <__ieee754_rem_pio2+0x192>
 8008810:	4632      	mov	r2, r6
 8008812:	463b      	mov	r3, r7
 8008814:	4640      	mov	r0, r8
 8008816:	4649      	mov	r1, r9
 8008818:	f7f7 fd52 	bl	80002c0 <__aeabi_dsub>
 800881c:	e9c4 0100 	strd	r0, r1, [r4]
 8008820:	e013      	b.n	800884a <__ieee754_rem_pio2+0x1ba>
 8008822:	463b      	mov	r3, r7
 8008824:	4632      	mov	r2, r6
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	f7f7 fd49 	bl	80002c0 <__aeabi_dsub>
 800882e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008832:	9305      	str	r3, [sp, #20]
 8008834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008838:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800883c:	f1ba 0f10 	cmp.w	sl, #16
 8008840:	dc1f      	bgt.n	8008882 <__ieee754_rem_pio2+0x1f2>
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	e9c4 2300 	strd	r2, r3, [r4]
 800884a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800884e:	4640      	mov	r0, r8
 8008850:	4653      	mov	r3, sl
 8008852:	4649      	mov	r1, r9
 8008854:	f7f7 fd34 	bl	80002c0 <__aeabi_dsub>
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	f7f7 fd30 	bl	80002c0 <__aeabi_dsub>
 8008860:	460b      	mov	r3, r1
 8008862:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008866:	9904      	ldr	r1, [sp, #16]
 8008868:	4602      	mov	r2, r0
 800886a:	2900      	cmp	r1, #0
 800886c:	f6bf af47 	bge.w	80086fe <__ieee754_rem_pio2+0x6e>
 8008870:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008874:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008878:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800887c:	60e3      	str	r3, [r4, #12]
 800887e:	426d      	negs	r5, r5
 8008880:	e73d      	b.n	80086fe <__ieee754_rem_pio2+0x6e>
 8008882:	a33f      	add	r3, pc, #252	; (adr r3, 8008980 <__ieee754_rem_pio2+0x2f0>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800888c:	f7f7 fed0 	bl	8000630 <__aeabi_dmul>
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f7 fd10 	bl	80002c0 <__aeabi_dsub>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4682      	mov	sl, r0
 80088a6:	468b      	mov	fp, r1
 80088a8:	4640      	mov	r0, r8
 80088aa:	4649      	mov	r1, r9
 80088ac:	f7f7 fd08 	bl	80002c0 <__aeabi_dsub>
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	f7f7 fd04 	bl	80002c0 <__aeabi_dsub>
 80088b8:	a333      	add	r3, pc, #204	; (adr r3, 8008988 <__ieee754_rem_pio2+0x2f8>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c6:	f7f7 feb3 	bl	8000630 <__aeabi_dmul>
 80088ca:	4632      	mov	r2, r6
 80088cc:	463b      	mov	r3, r7
 80088ce:	f7f7 fcf7 	bl	80002c0 <__aeabi_dsub>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4606      	mov	r6, r0
 80088d8:	460f      	mov	r7, r1
 80088da:	4650      	mov	r0, sl
 80088dc:	4659      	mov	r1, fp
 80088de:	f7f7 fcef 	bl	80002c0 <__aeabi_dsub>
 80088e2:	9a05      	ldr	r2, [sp, #20]
 80088e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b31      	cmp	r3, #49	; 0x31
 80088ec:	dc06      	bgt.n	80088fc <__ieee754_rem_pio2+0x26c>
 80088ee:	4602      	mov	r2, r0
 80088f0:	460b      	mov	r3, r1
 80088f2:	46d0      	mov	r8, sl
 80088f4:	46d9      	mov	r9, fp
 80088f6:	e9c4 2300 	strd	r2, r3, [r4]
 80088fa:	e7a6      	b.n	800884a <__ieee754_rem_pio2+0x1ba>
 80088fc:	a326      	add	r3, pc, #152	; (adr r3, 8008998 <__ieee754_rem_pio2+0x308>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008906:	f7f7 fe93 	bl	8000630 <__aeabi_dmul>
 800890a:	4606      	mov	r6, r0
 800890c:	460f      	mov	r7, r1
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4650      	mov	r0, sl
 8008914:	4659      	mov	r1, fp
 8008916:	f7f7 fcd3 	bl	80002c0 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4680      	mov	r8, r0
 8008920:	4689      	mov	r9, r1
 8008922:	4650      	mov	r0, sl
 8008924:	4659      	mov	r1, fp
 8008926:	f7f7 fccb 	bl	80002c0 <__aeabi_dsub>
 800892a:	4632      	mov	r2, r6
 800892c:	463b      	mov	r3, r7
 800892e:	f7f7 fcc7 	bl	80002c0 <__aeabi_dsub>
 8008932:	a31b      	add	r3, pc, #108	; (adr r3, 80089a0 <__ieee754_rem_pio2+0x310>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	4606      	mov	r6, r0
 800893a:	460f      	mov	r7, r1
 800893c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008940:	f7f7 fe76 	bl	8000630 <__aeabi_dmul>
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	f7f7 fcba 	bl	80002c0 <__aeabi_dsub>
 800894c:	4606      	mov	r6, r0
 800894e:	460f      	mov	r7, r1
 8008950:	e75e      	b.n	8008810 <__ieee754_rem_pio2+0x180>
 8008952:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <__ieee754_rem_pio2+0x330>)
 8008954:	4592      	cmp	sl, r2
 8008956:	dd35      	ble.n	80089c4 <__ieee754_rem_pio2+0x334>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	f7f7 fcb0 	bl	80002c0 <__aeabi_dsub>
 8008960:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008964:	e9c4 0100 	strd	r0, r1, [r4]
 8008968:	e6a2      	b.n	80086b0 <__ieee754_rem_pio2+0x20>
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w
 8008970:	54400000 	.word	0x54400000
 8008974:	3ff921fb 	.word	0x3ff921fb
 8008978:	1a626331 	.word	0x1a626331
 800897c:	3dd0b461 	.word	0x3dd0b461
 8008980:	1a600000 	.word	0x1a600000
 8008984:	3dd0b461 	.word	0x3dd0b461
 8008988:	2e037073 	.word	0x2e037073
 800898c:	3ba3198a 	.word	0x3ba3198a
 8008990:	6dc9c883 	.word	0x6dc9c883
 8008994:	3fe45f30 	.word	0x3fe45f30
 8008998:	2e000000 	.word	0x2e000000
 800899c:	3ba3198a 	.word	0x3ba3198a
 80089a0:	252049c1 	.word	0x252049c1
 80089a4:	397b839a 	.word	0x397b839a
 80089a8:	3fe921fb 	.word	0x3fe921fb
 80089ac:	4002d97b 	.word	0x4002d97b
 80089b0:	3ff921fb 	.word	0x3ff921fb
 80089b4:	413921fb 	.word	0x413921fb
 80089b8:	3fe00000 	.word	0x3fe00000
 80089bc:	08009dd8 	.word	0x08009dd8
 80089c0:	7fefffff 	.word	0x7fefffff
 80089c4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80089c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80089cc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80089d0:	460f      	mov	r7, r1
 80089d2:	4606      	mov	r6, r0
 80089d4:	f7f8 f8dc 	bl	8000b90 <__aeabi_d2iz>
 80089d8:	f7f7 fdc0 	bl	800055c <__aeabi_i2d>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089e8:	f7f7 fc6a 	bl	80002c0 <__aeabi_dsub>
 80089ec:	2200      	movs	r2, #0
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <__ieee754_rem_pio2+0x3e8>)
 80089f0:	f7f7 fe1e 	bl	8000630 <__aeabi_dmul>
 80089f4:	460f      	mov	r7, r1
 80089f6:	4606      	mov	r6, r0
 80089f8:	f7f8 f8ca 	bl	8000b90 <__aeabi_d2iz>
 80089fc:	f7f7 fdae 	bl	800055c <__aeabi_i2d>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a0c:	f7f7 fc58 	bl	80002c0 <__aeabi_dsub>
 8008a10:	2200      	movs	r2, #0
 8008a12:	4b19      	ldr	r3, [pc, #100]	; (8008a78 <__ieee754_rem_pio2+0x3e8>)
 8008a14:	f7f7 fe0c 	bl	8000630 <__aeabi_dmul>
 8008a18:	f04f 0803 	mov.w	r8, #3
 8008a1c:	2600      	movs	r6, #0
 8008a1e:	2700      	movs	r7, #0
 8008a20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a24:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008a28:	4632      	mov	r2, r6
 8008a2a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008a2e:	463b      	mov	r3, r7
 8008a30:	46c2      	mov	sl, r8
 8008a32:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a36:	f7f8 f863 	bl	8000b00 <__aeabi_dcmpeq>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1f4      	bne.n	8008a28 <__ieee754_rem_pio2+0x398>
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <__ieee754_rem_pio2+0x3ec>)
 8008a40:	462a      	mov	r2, r5
 8008a42:	9301      	str	r3, [sp, #4]
 8008a44:	2302      	movs	r3, #2
 8008a46:	4621      	mov	r1, r4
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	a806      	add	r0, sp, #24
 8008a4c:	4653      	mov	r3, sl
 8008a4e:	f000 f985 	bl	8008d5c <__kernel_rem_pio2>
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	4605      	mov	r5, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f6bf ae51 	bge.w	80086fe <__ieee754_rem_pio2+0x6e>
 8008a5c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008a60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a64:	e9c4 2300 	strd	r2, r3, [r4]
 8008a68:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008a6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a70:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008a74:	e703      	b.n	800887e <__ieee754_rem_pio2+0x1ee>
 8008a76:	bf00      	nop
 8008a78:	41700000 	.word	0x41700000
 8008a7c:	08009e58 	.word	0x08009e58

08008a80 <__ieee754_sqrt>:
 8008a80:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008bdc <__ieee754_sqrt+0x15c>
 8008a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a88:	ea3c 0c01 	bics.w	ip, ip, r1
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	460d      	mov	r5, r1
 8008a90:	460c      	mov	r4, r1
 8008a92:	460a      	mov	r2, r1
 8008a94:	4607      	mov	r7, r0
 8008a96:	4603      	mov	r3, r0
 8008a98:	d10f      	bne.n	8008aba <__ieee754_sqrt+0x3a>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	f7f7 fdc7 	bl	8000630 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fc0b 	bl	80002c4 <__adddf3>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aba:	2900      	cmp	r1, #0
 8008abc:	dc0e      	bgt.n	8008adc <__ieee754_sqrt+0x5c>
 8008abe:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008ac2:	ea5c 0707 	orrs.w	r7, ip, r7
 8008ac6:	d0f4      	beq.n	8008ab2 <__ieee754_sqrt+0x32>
 8008ac8:	b141      	cbz	r1, 8008adc <__ieee754_sqrt+0x5c>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	f7f7 fbf7 	bl	80002c0 <__aeabi_dsub>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	f7f7 fed5 	bl	8000884 <__aeabi_ddiv>
 8008ada:	e7e8      	b.n	8008aae <__ieee754_sqrt+0x2e>
 8008adc:	1521      	asrs	r1, r4, #20
 8008ade:	d075      	beq.n	8008bcc <__ieee754_sqrt+0x14c>
 8008ae0:	07cc      	lsls	r4, r1, #31
 8008ae2:	f04f 0400 	mov.w	r4, #0
 8008ae6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008aea:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008aee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008af2:	bf5e      	ittt	pl
 8008af4:	0fd9      	lsrpl	r1, r3, #31
 8008af6:	005b      	lslpl	r3, r3, #1
 8008af8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008afc:	0fd9      	lsrs	r1, r3, #31
 8008afe:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008b02:	2516      	movs	r5, #22
 8008b04:	4620      	mov	r0, r4
 8008b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b0a:	107f      	asrs	r7, r7, #1
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	1846      	adds	r6, r0, r1
 8008b10:	4296      	cmp	r6, r2
 8008b12:	bfde      	ittt	le
 8008b14:	1b92      	suble	r2, r2, r6
 8008b16:	1870      	addle	r0, r6, r1
 8008b18:	1864      	addle	r4, r4, r1
 8008b1a:	0052      	lsls	r2, r2, #1
 8008b1c:	3d01      	subs	r5, #1
 8008b1e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008b22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008b26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b2a:	d1f0      	bne.n	8008b0e <__ieee754_sqrt+0x8e>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	f04f 0e20 	mov.w	lr, #32
 8008b32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b36:	4282      	cmp	r2, r0
 8008b38:	eb06 0c05 	add.w	ip, r6, r5
 8008b3c:	dc02      	bgt.n	8008b44 <__ieee754_sqrt+0xc4>
 8008b3e:	d113      	bne.n	8008b68 <__ieee754_sqrt+0xe8>
 8008b40:	459c      	cmp	ip, r3
 8008b42:	d811      	bhi.n	8008b68 <__ieee754_sqrt+0xe8>
 8008b44:	f1bc 0f00 	cmp.w	ip, #0
 8008b48:	eb0c 0506 	add.w	r5, ip, r6
 8008b4c:	da43      	bge.n	8008bd6 <__ieee754_sqrt+0x156>
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	db41      	blt.n	8008bd6 <__ieee754_sqrt+0x156>
 8008b52:	f100 0801 	add.w	r8, r0, #1
 8008b56:	1a12      	subs	r2, r2, r0
 8008b58:	4640      	mov	r0, r8
 8008b5a:	459c      	cmp	ip, r3
 8008b5c:	bf88      	it	hi
 8008b5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b62:	eba3 030c 	sub.w	r3, r3, ip
 8008b66:	4431      	add	r1, r6
 8008b68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008b6c:	f1be 0e01 	subs.w	lr, lr, #1
 8008b70:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b7c:	d1db      	bne.n	8008b36 <__ieee754_sqrt+0xb6>
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	d006      	beq.n	8008b90 <__ieee754_sqrt+0x110>
 8008b82:	1c48      	adds	r0, r1, #1
 8008b84:	bf0b      	itete	eq
 8008b86:	4671      	moveq	r1, lr
 8008b88:	3101      	addne	r1, #1
 8008b8a:	3401      	addeq	r4, #1
 8008b8c:	f021 0101 	bicne.w	r1, r1, #1
 8008b90:	1063      	asrs	r3, r4, #1
 8008b92:	0849      	lsrs	r1, r1, #1
 8008b94:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008b98:	07e2      	lsls	r2, r4, #31
 8008b9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008b9e:	bf48      	it	mi
 8008ba0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008ba4:	460e      	mov	r6, r1
 8008ba6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008baa:	e782      	b.n	8008ab2 <__ieee754_sqrt+0x32>
 8008bac:	0ada      	lsrs	r2, r3, #11
 8008bae:	3815      	subs	r0, #21
 8008bb0:	055b      	lsls	r3, r3, #21
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	d0fa      	beq.n	8008bac <__ieee754_sqrt+0x12c>
 8008bb6:	02d5      	lsls	r5, r2, #11
 8008bb8:	d50a      	bpl.n	8008bd0 <__ieee754_sqrt+0x150>
 8008bba:	f1c1 0420 	rsb	r4, r1, #32
 8008bbe:	fa23 f404 	lsr.w	r4, r3, r4
 8008bc2:	1e4d      	subs	r5, r1, #1
 8008bc4:	408b      	lsls	r3, r1
 8008bc6:	4322      	orrs	r2, r4
 8008bc8:	1b41      	subs	r1, r0, r5
 8008bca:	e789      	b.n	8008ae0 <__ieee754_sqrt+0x60>
 8008bcc:	4608      	mov	r0, r1
 8008bce:	e7f0      	b.n	8008bb2 <__ieee754_sqrt+0x132>
 8008bd0:	0052      	lsls	r2, r2, #1
 8008bd2:	3101      	adds	r1, #1
 8008bd4:	e7ef      	b.n	8008bb6 <__ieee754_sqrt+0x136>
 8008bd6:	4680      	mov	r8, r0
 8008bd8:	e7bd      	b.n	8008b56 <__ieee754_sqrt+0xd6>
 8008bda:	bf00      	nop
 8008bdc:	7ff00000 	.word	0x7ff00000

08008be0 <__kernel_cos>:
 8008be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008be8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008bec:	4680      	mov	r8, r0
 8008bee:	460f      	mov	r7, r1
 8008bf0:	e9cd 2300 	strd	r2, r3, [sp]
 8008bf4:	da04      	bge.n	8008c00 <__kernel_cos+0x20>
 8008bf6:	f7f7 ffcb 	bl	8000b90 <__aeabi_d2iz>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	f000 8086 	beq.w	8008d0c <__kernel_cos+0x12c>
 8008c00:	4642      	mov	r2, r8
 8008c02:	463b      	mov	r3, r7
 8008c04:	4640      	mov	r0, r8
 8008c06:	4639      	mov	r1, r7
 8008c08:	f7f7 fd12 	bl	8000630 <__aeabi_dmul>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	4b4e      	ldr	r3, [pc, #312]	; (8008d48 <__kernel_cos+0x168>)
 8008c10:	4604      	mov	r4, r0
 8008c12:	460d      	mov	r5, r1
 8008c14:	f7f7 fd0c 	bl	8000630 <__aeabi_dmul>
 8008c18:	a33f      	add	r3, pc, #252	; (adr r3, 8008d18 <__kernel_cos+0x138>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	4682      	mov	sl, r0
 8008c20:	468b      	mov	fp, r1
 8008c22:	4620      	mov	r0, r4
 8008c24:	4629      	mov	r1, r5
 8008c26:	f7f7 fd03 	bl	8000630 <__aeabi_dmul>
 8008c2a:	a33d      	add	r3, pc, #244	; (adr r3, 8008d20 <__kernel_cos+0x140>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fb48 	bl	80002c4 <__adddf3>
 8008c34:	4622      	mov	r2, r4
 8008c36:	462b      	mov	r3, r5
 8008c38:	f7f7 fcfa 	bl	8000630 <__aeabi_dmul>
 8008c3c:	a33a      	add	r3, pc, #232	; (adr r3, 8008d28 <__kernel_cos+0x148>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fb3d 	bl	80002c0 <__aeabi_dsub>
 8008c46:	4622      	mov	r2, r4
 8008c48:	462b      	mov	r3, r5
 8008c4a:	f7f7 fcf1 	bl	8000630 <__aeabi_dmul>
 8008c4e:	a338      	add	r3, pc, #224	; (adr r3, 8008d30 <__kernel_cos+0x150>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f7f7 fb36 	bl	80002c4 <__adddf3>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	f7f7 fce8 	bl	8000630 <__aeabi_dmul>
 8008c60:	a335      	add	r3, pc, #212	; (adr r3, 8008d38 <__kernel_cos+0x158>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fb2b 	bl	80002c0 <__aeabi_dsub>
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	f7f7 fcdf 	bl	8000630 <__aeabi_dmul>
 8008c72:	a333      	add	r3, pc, #204	; (adr r3, 8008d40 <__kernel_cos+0x160>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 fb24 	bl	80002c4 <__adddf3>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	462b      	mov	r3, r5
 8008c80:	f7f7 fcd6 	bl	8000630 <__aeabi_dmul>
 8008c84:	4622      	mov	r2, r4
 8008c86:	462b      	mov	r3, r5
 8008c88:	f7f7 fcd2 	bl	8000630 <__aeabi_dmul>
 8008c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c90:	4604      	mov	r4, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	4640      	mov	r0, r8
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 fcca 	bl	8000630 <__aeabi_dmul>
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f7f7 fb0c 	bl	80002c0 <__aeabi_dsub>
 8008ca8:	4b28      	ldr	r3, [pc, #160]	; (8008d4c <__kernel_cos+0x16c>)
 8008caa:	4680      	mov	r8, r0
 8008cac:	429e      	cmp	r6, r3
 8008cae:	4689      	mov	r9, r1
 8008cb0:	dc0e      	bgt.n	8008cd0 <__kernel_cos+0xf0>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	4659      	mov	r1, fp
 8008cba:	f7f7 fb01 	bl	80002c0 <__aeabi_dsub>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4922      	ldr	r1, [pc, #136]	; (8008d50 <__kernel_cos+0x170>)
 8008cc6:	f7f7 fafb 	bl	80002c0 <__aeabi_dsub>
 8008cca:	b003      	add	sp, #12
 8008ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd0:	2400      	movs	r4, #0
 8008cd2:	4b20      	ldr	r3, [pc, #128]	; (8008d54 <__kernel_cos+0x174>)
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	429e      	cmp	r6, r3
 8008cd8:	bfcc      	ite	gt
 8008cda:	4d1f      	ldrgt	r5, [pc, #124]	; (8008d58 <__kernel_cos+0x178>)
 8008cdc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008ce0:	462b      	mov	r3, r5
 8008ce2:	2000      	movs	r0, #0
 8008ce4:	491a      	ldr	r1, [pc, #104]	; (8008d50 <__kernel_cos+0x170>)
 8008ce6:	f7f7 faeb 	bl	80002c0 <__aeabi_dsub>
 8008cea:	4622      	mov	r2, r4
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1
 8008cf0:	462b      	mov	r3, r5
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	f7f7 fae3 	bl	80002c0 <__aeabi_dsub>
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	464b      	mov	r3, r9
 8008cfe:	f7f7 fadf 	bl	80002c0 <__aeabi_dsub>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4630      	mov	r0, r6
 8008d08:	4639      	mov	r1, r7
 8008d0a:	e7dc      	b.n	8008cc6 <__kernel_cos+0xe6>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	4910      	ldr	r1, [pc, #64]	; (8008d50 <__kernel_cos+0x170>)
 8008d10:	e7db      	b.n	8008cca <__kernel_cos+0xea>
 8008d12:	bf00      	nop
 8008d14:	f3af 8000 	nop.w
 8008d18:	be8838d4 	.word	0xbe8838d4
 8008d1c:	bda8fae9 	.word	0xbda8fae9
 8008d20:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d24:	3e21ee9e 	.word	0x3e21ee9e
 8008d28:	809c52ad 	.word	0x809c52ad
 8008d2c:	3e927e4f 	.word	0x3e927e4f
 8008d30:	19cb1590 	.word	0x19cb1590
 8008d34:	3efa01a0 	.word	0x3efa01a0
 8008d38:	16c15177 	.word	0x16c15177
 8008d3c:	3f56c16c 	.word	0x3f56c16c
 8008d40:	5555554c 	.word	0x5555554c
 8008d44:	3fa55555 	.word	0x3fa55555
 8008d48:	3fe00000 	.word	0x3fe00000
 8008d4c:	3fd33332 	.word	0x3fd33332
 8008d50:	3ff00000 	.word	0x3ff00000
 8008d54:	3fe90000 	.word	0x3fe90000
 8008d58:	3fd20000 	.word	0x3fd20000

08008d5c <__kernel_rem_pio2>:
 8008d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	9106      	str	r1, [sp, #24]
 8008d68:	4bb6      	ldr	r3, [pc, #728]	; (8009044 <__kernel_rem_pio2+0x2e8>)
 8008d6a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008d6c:	f112 0f14 	cmn.w	r2, #20
 8008d70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d74:	bfa8      	it	ge
 8008d76:	1ed4      	subge	r4, r2, #3
 8008d78:	9302      	str	r3, [sp, #8]
 8008d7a:	9b08      	ldr	r3, [sp, #32]
 8008d7c:	bfb8      	it	lt
 8008d7e:	2400      	movlt	r4, #0
 8008d80:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d84:	9307      	str	r3, [sp, #28]
 8008d86:	bfa4      	itt	ge
 8008d88:	2318      	movge	r3, #24
 8008d8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008d8e:	f06f 0317 	mvn.w	r3, #23
 8008d92:	fb04 3303 	mla	r3, r4, r3, r3
 8008d96:	eb03 0b02 	add.w	fp, r3, r2
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	9b02      	ldr	r3, [sp, #8]
 8008d9e:	1aa7      	subs	r7, r4, r2
 8008da0:	eb03 0802 	add.w	r8, r3, r2
 8008da4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008da6:	2500      	movs	r5, #0
 8008da8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	9009      	str	r0, [sp, #36]	; 0x24
 8008db2:	ae20      	add	r6, sp, #128	; 0x80
 8008db4:	4545      	cmp	r5, r8
 8008db6:	dd14      	ble.n	8008de2 <__kernel_rem_pio2+0x86>
 8008db8:	f04f 0800 	mov.w	r8, #0
 8008dbc:	9a08      	ldr	r2, [sp, #32]
 8008dbe:	ab20      	add	r3, sp, #128	; 0x80
 8008dc0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008dc4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	4598      	cmp	r8, r3
 8008dcc:	dc35      	bgt.n	8008e3a <__kernel_rem_pio2+0xde>
 8008dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f1a3 0908 	sub.w	r9, r3, #8
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	462f      	mov	r7, r5
 8008dda:	2600      	movs	r6, #0
 8008ddc:	e9cd 2300 	strd	r2, r3, [sp]
 8008de0:	e01f      	b.n	8008e22 <__kernel_rem_pio2+0xc6>
 8008de2:	42ef      	cmn	r7, r5
 8008de4:	d40b      	bmi.n	8008dfe <__kernel_rem_pio2+0xa2>
 8008de6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008dea:	e9cd 2300 	strd	r2, r3, [sp]
 8008dee:	f7f7 fbb5 	bl	800055c <__aeabi_i2d>
 8008df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008df6:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008dfa:	3501      	adds	r5, #1
 8008dfc:	e7da      	b.n	8008db4 <__kernel_rem_pio2+0x58>
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	e7f8      	b.n	8008df6 <__kernel_rem_pio2+0x9a>
 8008e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e08:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008e0c:	f7f7 fc10 	bl	8000630 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e18:	f7f7 fa54 	bl	80002c4 <__adddf3>
 8008e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008e20:	3601      	adds	r6, #1
 8008e22:	9b07      	ldr	r3, [sp, #28]
 8008e24:	3f08      	subs	r7, #8
 8008e26:	429e      	cmp	r6, r3
 8008e28:	ddec      	ble.n	8008e04 <__kernel_rem_pio2+0xa8>
 8008e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e2e:	f108 0801 	add.w	r8, r8, #1
 8008e32:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008e36:	3508      	adds	r5, #8
 8008e38:	e7c6      	b.n	8008dc8 <__kernel_rem_pio2+0x6c>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	aa0c      	add	r2, sp, #48	; 0x30
 8008e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e42:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008e46:	9e02      	ldr	r6, [sp, #8]
 8008e48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e4e:	ab98      	add	r3, sp, #608	; 0x260
 8008e50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e54:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008e58:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e5a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008e5e:	46d0      	mov	r8, sl
 8008e60:	46b1      	mov	r9, r6
 8008e62:	af0c      	add	r7, sp, #48	; 0x30
 8008e64:	9700      	str	r7, [sp, #0]
 8008e66:	f1b9 0f00 	cmp.w	r9, #0
 8008e6a:	f1a8 0808 	sub.w	r8, r8, #8
 8008e6e:	dc71      	bgt.n	8008f54 <__kernel_rem_pio2+0x1f8>
 8008e70:	465a      	mov	r2, fp
 8008e72:	4620      	mov	r0, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	f000 fdab 	bl	80099d0 <scalbn>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008e80:	4604      	mov	r4, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	f7f7 fbd4 	bl	8000630 <__aeabi_dmul>
 8008e88:	f000 fd22 	bl	80098d0 <floor>
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4b6e      	ldr	r3, [pc, #440]	; (8009048 <__kernel_rem_pio2+0x2ec>)
 8008e90:	f7f7 fbce 	bl	8000630 <__aeabi_dmul>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 fa10 	bl	80002c0 <__aeabi_dsub>
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	f7f7 fe74 	bl	8000b90 <__aeabi_d2iz>
 8008ea8:	9004      	str	r0, [sp, #16]
 8008eaa:	f7f7 fb57 	bl	800055c <__aeabi_i2d>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	f7f7 fa03 	bl	80002c0 <__aeabi_dsub>
 8008eba:	f1bb 0f00 	cmp.w	fp, #0
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4689      	mov	r9, r1
 8008ec2:	dd70      	ble.n	8008fa6 <__kernel_rem_pio2+0x24a>
 8008ec4:	1e72      	subs	r2, r6, #1
 8008ec6:	ab0c      	add	r3, sp, #48	; 0x30
 8008ec8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008ecc:	9c04      	ldr	r4, [sp, #16]
 8008ece:	f1cb 0118 	rsb	r1, fp, #24
 8008ed2:	fa40 f301 	asr.w	r3, r0, r1
 8008ed6:	441c      	add	r4, r3
 8008ed8:	408b      	lsls	r3, r1
 8008eda:	1ac0      	subs	r0, r0, r3
 8008edc:	ab0c      	add	r3, sp, #48	; 0x30
 8008ede:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ee2:	f1cb 0317 	rsb	r3, fp, #23
 8008ee6:	9404      	str	r4, [sp, #16]
 8008ee8:	fa40 f303 	asr.w	r3, r0, r3
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dd66      	ble.n	8008fc2 <__kernel_rem_pio2+0x266>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008efa:	4614      	mov	r4, r2
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	3301      	adds	r3, #1
 8008f00:	9304      	str	r3, [sp, #16]
 8008f02:	4296      	cmp	r6, r2
 8008f04:	f300 80ac 	bgt.w	8009060 <__kernel_rem_pio2+0x304>
 8008f08:	f1bb 0f00 	cmp.w	fp, #0
 8008f0c:	dd07      	ble.n	8008f1e <__kernel_rem_pio2+0x1c2>
 8008f0e:	f1bb 0f01 	cmp.w	fp, #1
 8008f12:	f000 80b4 	beq.w	800907e <__kernel_rem_pio2+0x322>
 8008f16:	f1bb 0f02 	cmp.w	fp, #2
 8008f1a:	f000 80ba 	beq.w	8009092 <__kernel_rem_pio2+0x336>
 8008f1e:	9b00      	ldr	r3, [sp, #0]
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d14e      	bne.n	8008fc2 <__kernel_rem_pio2+0x266>
 8008f24:	4642      	mov	r2, r8
 8008f26:	464b      	mov	r3, r9
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4948      	ldr	r1, [pc, #288]	; (800904c <__kernel_rem_pio2+0x2f0>)
 8008f2c:	f7f7 f9c8 	bl	80002c0 <__aeabi_dsub>
 8008f30:	4680      	mov	r8, r0
 8008f32:	4689      	mov	r9, r1
 8008f34:	2c00      	cmp	r4, #0
 8008f36:	d044      	beq.n	8008fc2 <__kernel_rem_pio2+0x266>
 8008f38:	465a      	mov	r2, fp
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	4943      	ldr	r1, [pc, #268]	; (800904c <__kernel_rem_pio2+0x2f0>)
 8008f3e:	f000 fd47 	bl	80099d0 <scalbn>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 f9b9 	bl	80002c0 <__aeabi_dsub>
 8008f4e:	4680      	mov	r8, r0
 8008f50:	4689      	mov	r9, r1
 8008f52:	e036      	b.n	8008fc2 <__kernel_rem_pio2+0x266>
 8008f54:	2200      	movs	r2, #0
 8008f56:	4b3e      	ldr	r3, [pc, #248]	; (8009050 <__kernel_rem_pio2+0x2f4>)
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 fb68 	bl	8000630 <__aeabi_dmul>
 8008f60:	f7f7 fe16 	bl	8000b90 <__aeabi_d2iz>
 8008f64:	f7f7 fafa 	bl	800055c <__aeabi_i2d>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f70:	2200      	movs	r2, #0
 8008f72:	4b38      	ldr	r3, [pc, #224]	; (8009054 <__kernel_rem_pio2+0x2f8>)
 8008f74:	f7f7 fb5c 	bl	8000630 <__aeabi_dmul>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4629      	mov	r1, r5
 8008f80:	f7f7 f99e 	bl	80002c0 <__aeabi_dsub>
 8008f84:	f7f7 fe04 	bl	8000b90 <__aeabi_d2iz>
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f8e:	f843 0b04 	str.w	r0, [r3], #4
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f9c:	f7f7 f992 	bl	80002c4 <__adddf3>
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	460d      	mov	r5, r1
 8008fa4:	e75f      	b.n	8008e66 <__kernel_rem_pio2+0x10a>
 8008fa6:	d105      	bne.n	8008fb4 <__kernel_rem_pio2+0x258>
 8008fa8:	1e73      	subs	r3, r6, #1
 8008faa:	aa0c      	add	r2, sp, #48	; 0x30
 8008fac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008fb0:	15c3      	asrs	r3, r0, #23
 8008fb2:	e79b      	b.n	8008eec <__kernel_rem_pio2+0x190>
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	4b28      	ldr	r3, [pc, #160]	; (8009058 <__kernel_rem_pio2+0x2fc>)
 8008fb8:	f7f7 fdc0 	bl	8000b3c <__aeabi_dcmpge>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d13e      	bne.n	800903e <__kernel_rem_pio2+0x2e2>
 8008fc0:	9000      	str	r0, [sp, #0]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	f7f7 fd99 	bl	8000b00 <__aeabi_dcmpeq>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f000 80b1 	beq.w	8009136 <__kernel_rem_pio2+0x3da>
 8008fd4:	1e74      	subs	r4, r6, #1
 8008fd6:	4623      	mov	r3, r4
 8008fd8:	2200      	movs	r2, #0
 8008fda:	9902      	ldr	r1, [sp, #8]
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	da5f      	bge.n	80090a0 <__kernel_rem_pio2+0x344>
 8008fe0:	2a00      	cmp	r2, #0
 8008fe2:	d074      	beq.n	80090ce <__kernel_rem_pio2+0x372>
 8008fe4:	ab0c      	add	r3, sp, #48	; 0x30
 8008fe6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008fea:	f1ab 0b18 	sub.w	fp, fp, #24
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 809f 	beq.w	8009132 <__kernel_rem_pio2+0x3d6>
 8008ff4:	465a      	mov	r2, fp
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	4914      	ldr	r1, [pc, #80]	; (800904c <__kernel_rem_pio2+0x2f0>)
 8008ffa:	f000 fce9 	bl	80099d0 <scalbn>
 8008ffe:	46a2      	mov	sl, r4
 8009000:	4606      	mov	r6, r0
 8009002:	460f      	mov	r7, r1
 8009004:	f04f 0800 	mov.w	r8, #0
 8009008:	ab70      	add	r3, sp, #448	; 0x1c0
 800900a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009050 <__kernel_rem_pio2+0x2f4>
 800900e:	00e5      	lsls	r5, r4, #3
 8009010:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8009014:	f1ba 0f00 	cmp.w	sl, #0
 8009018:	f280 80c3 	bge.w	80091a2 <__kernel_rem_pio2+0x446>
 800901c:	4626      	mov	r6, r4
 800901e:	2e00      	cmp	r6, #0
 8009020:	f2c0 80f5 	blt.w	800920e <__kernel_rem_pio2+0x4b2>
 8009024:	4b0d      	ldr	r3, [pc, #52]	; (800905c <__kernel_rem_pio2+0x300>)
 8009026:	f04f 0a00 	mov.w	sl, #0
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	ab70      	add	r3, sp, #448	; 0x1c0
 800902e:	f04f 0b00 	mov.w	fp, #0
 8009032:	f04f 0800 	mov.w	r8, #0
 8009036:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800903a:	1ba7      	subs	r7, r4, r6
 800903c:	e0db      	b.n	80091f6 <__kernel_rem_pio2+0x49a>
 800903e:	2302      	movs	r3, #2
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	e757      	b.n	8008ef4 <__kernel_rem_pio2+0x198>
 8009044:	08009fa0 	.word	0x08009fa0
 8009048:	40200000 	.word	0x40200000
 800904c:	3ff00000 	.word	0x3ff00000
 8009050:	3e700000 	.word	0x3e700000
 8009054:	41700000 	.word	0x41700000
 8009058:	3fe00000 	.word	0x3fe00000
 800905c:	08009f60 	.word	0x08009f60
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	b944      	cbnz	r4, 8009076 <__kernel_rem_pio2+0x31a>
 8009064:	b11b      	cbz	r3, 800906e <__kernel_rem_pio2+0x312>
 8009066:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	2301      	movs	r3, #1
 800906e:	461c      	mov	r4, r3
 8009070:	3201      	adds	r2, #1
 8009072:	3704      	adds	r7, #4
 8009074:	e745      	b.n	8008f02 <__kernel_rem_pio2+0x1a6>
 8009076:	1acb      	subs	r3, r1, r3
 8009078:	603b      	str	r3, [r7, #0]
 800907a:	4623      	mov	r3, r4
 800907c:	e7f7      	b.n	800906e <__kernel_rem_pio2+0x312>
 800907e:	1e72      	subs	r2, r6, #1
 8009080:	ab0c      	add	r3, sp, #48	; 0x30
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800908a:	a90c      	add	r1, sp, #48	; 0x30
 800908c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009090:	e745      	b.n	8008f1e <__kernel_rem_pio2+0x1c2>
 8009092:	1e72      	subs	r2, r6, #1
 8009094:	ab0c      	add	r3, sp, #48	; 0x30
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800909e:	e7f4      	b.n	800908a <__kernel_rem_pio2+0x32e>
 80090a0:	a90c      	add	r1, sp, #48	; 0x30
 80090a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	430a      	orrs	r2, r1
 80090aa:	e796      	b.n	8008fda <__kernel_rem_pio2+0x27e>
 80090ac:	3401      	adds	r4, #1
 80090ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	d0fa      	beq.n	80090ac <__kernel_rem_pio2+0x350>
 80090b6:	9b08      	ldr	r3, [sp, #32]
 80090b8:	f106 0801 	add.w	r8, r6, #1
 80090bc:	18f5      	adds	r5, r6, r3
 80090be:	ab20      	add	r3, sp, #128	; 0x80
 80090c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80090c4:	4434      	add	r4, r6
 80090c6:	4544      	cmp	r4, r8
 80090c8:	da04      	bge.n	80090d4 <__kernel_rem_pio2+0x378>
 80090ca:	4626      	mov	r6, r4
 80090cc:	e6bf      	b.n	8008e4e <__kernel_rem_pio2+0xf2>
 80090ce:	2401      	movs	r4, #1
 80090d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090d2:	e7ec      	b.n	80090ae <__kernel_rem_pio2+0x352>
 80090d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d6:	f04f 0900 	mov.w	r9, #0
 80090da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80090de:	f7f7 fa3d 	bl	800055c <__aeabi_i2d>
 80090e2:	2600      	movs	r6, #0
 80090e4:	2700      	movs	r7, #0
 80090e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e8:	e9c5 0100 	strd	r0, r1, [r5]
 80090ec:	3b08      	subs	r3, #8
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	9504      	str	r5, [sp, #16]
 80090f2:	9b07      	ldr	r3, [sp, #28]
 80090f4:	4599      	cmp	r9, r3
 80090f6:	dd05      	ble.n	8009104 <__kernel_rem_pio2+0x3a8>
 80090f8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80090fc:	f108 0801 	add.w	r8, r8, #1
 8009100:	3508      	adds	r5, #8
 8009102:	e7e0      	b.n	80090c6 <__kernel_rem_pio2+0x36a>
 8009104:	f8dd c010 	ldr.w	ip, [sp, #16]
 8009108:	9900      	ldr	r1, [sp, #0]
 800910a:	f109 0901 	add.w	r9, r9, #1
 800910e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009112:	9100      	str	r1, [sp, #0]
 8009114:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8009118:	f8cd c010 	str.w	ip, [sp, #16]
 800911c:	f7f7 fa88 	bl	8000630 <__aeabi_dmul>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 f8cc 	bl	80002c4 <__adddf3>
 800912c:	4606      	mov	r6, r0
 800912e:	460f      	mov	r7, r1
 8009130:	e7df      	b.n	80090f2 <__kernel_rem_pio2+0x396>
 8009132:	3c01      	subs	r4, #1
 8009134:	e756      	b.n	8008fe4 <__kernel_rem_pio2+0x288>
 8009136:	f1cb 0200 	rsb	r2, fp, #0
 800913a:	4640      	mov	r0, r8
 800913c:	4649      	mov	r1, r9
 800913e:	f000 fc47 	bl	80099d0 <scalbn>
 8009142:	2200      	movs	r2, #0
 8009144:	4ba4      	ldr	r3, [pc, #656]	; (80093d8 <__kernel_rem_pio2+0x67c>)
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	f7f7 fcf7 	bl	8000b3c <__aeabi_dcmpge>
 800914e:	b1f8      	cbz	r0, 8009190 <__kernel_rem_pio2+0x434>
 8009150:	2200      	movs	r2, #0
 8009152:	4ba2      	ldr	r3, [pc, #648]	; (80093dc <__kernel_rem_pio2+0x680>)
 8009154:	4620      	mov	r0, r4
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 fa6a 	bl	8000630 <__aeabi_dmul>
 800915c:	f7f7 fd18 	bl	8000b90 <__aeabi_d2iz>
 8009160:	4607      	mov	r7, r0
 8009162:	f7f7 f9fb 	bl	800055c <__aeabi_i2d>
 8009166:	2200      	movs	r2, #0
 8009168:	4b9b      	ldr	r3, [pc, #620]	; (80093d8 <__kernel_rem_pio2+0x67c>)
 800916a:	f7f7 fa61 	bl	8000630 <__aeabi_dmul>
 800916e:	460b      	mov	r3, r1
 8009170:	4602      	mov	r2, r0
 8009172:	4629      	mov	r1, r5
 8009174:	4620      	mov	r0, r4
 8009176:	f7f7 f8a3 	bl	80002c0 <__aeabi_dsub>
 800917a:	f7f7 fd09 	bl	8000b90 <__aeabi_d2iz>
 800917e:	1c74      	adds	r4, r6, #1
 8009180:	ab0c      	add	r3, sp, #48	; 0x30
 8009182:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009186:	f10b 0b18 	add.w	fp, fp, #24
 800918a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800918e:	e731      	b.n	8008ff4 <__kernel_rem_pio2+0x298>
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 fcfc 	bl	8000b90 <__aeabi_d2iz>
 8009198:	ab0c      	add	r3, sp, #48	; 0x30
 800919a:	4634      	mov	r4, r6
 800919c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80091a0:	e728      	b.n	8008ff4 <__kernel_rem_pio2+0x298>
 80091a2:	ab0c      	add	r3, sp, #48	; 0x30
 80091a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80091a8:	f7f7 f9d8 	bl	800055c <__aeabi_i2d>
 80091ac:	4632      	mov	r2, r6
 80091ae:	463b      	mov	r3, r7
 80091b0:	f7f7 fa3e 	bl	8000630 <__aeabi_dmul>
 80091b4:	4642      	mov	r2, r8
 80091b6:	e86b 0102 	strd	r0, r1, [fp], #-8
 80091ba:	464b      	mov	r3, r9
 80091bc:	4630      	mov	r0, r6
 80091be:	4639      	mov	r1, r7
 80091c0:	f7f7 fa36 	bl	8000630 <__aeabi_dmul>
 80091c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091c8:	4606      	mov	r6, r0
 80091ca:	460f      	mov	r7, r1
 80091cc:	e722      	b.n	8009014 <__kernel_rem_pio2+0x2b8>
 80091ce:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80091d2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80091d6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80091da:	f8cd c01c 	str.w	ip, [sp, #28]
 80091de:	f7f7 fa27 	bl	8000630 <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4650      	mov	r0, sl
 80091e8:	4659      	mov	r1, fp
 80091ea:	f7f7 f86b 	bl	80002c4 <__adddf3>
 80091ee:	4682      	mov	sl, r0
 80091f0:	468b      	mov	fp, r1
 80091f2:	f108 0801 	add.w	r8, r8, #1
 80091f6:	9b02      	ldr	r3, [sp, #8]
 80091f8:	4598      	cmp	r8, r3
 80091fa:	dc01      	bgt.n	8009200 <__kernel_rem_pio2+0x4a4>
 80091fc:	45b8      	cmp	r8, r7
 80091fe:	dde6      	ble.n	80091ce <__kernel_rem_pio2+0x472>
 8009200:	ab48      	add	r3, sp, #288	; 0x120
 8009202:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009206:	e9c7 ab00 	strd	sl, fp, [r7]
 800920a:	3e01      	subs	r6, #1
 800920c:	e707      	b.n	800901e <__kernel_rem_pio2+0x2c2>
 800920e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009210:	2b02      	cmp	r3, #2
 8009212:	dc09      	bgt.n	8009228 <__kernel_rem_pio2+0x4cc>
 8009214:	2b00      	cmp	r3, #0
 8009216:	dc32      	bgt.n	800927e <__kernel_rem_pio2+0x522>
 8009218:	d05a      	beq.n	80092d0 <__kernel_rem_pio2+0x574>
 800921a:	9b04      	ldr	r3, [sp, #16]
 800921c:	f003 0007 	and.w	r0, r3, #7
 8009220:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800922a:	2b03      	cmp	r3, #3
 800922c:	d1f5      	bne.n	800921a <__kernel_rem_pio2+0x4be>
 800922e:	ab48      	add	r3, sp, #288	; 0x120
 8009230:	441d      	add	r5, r3
 8009232:	46aa      	mov	sl, r5
 8009234:	46a3      	mov	fp, r4
 8009236:	f1bb 0f00 	cmp.w	fp, #0
 800923a:	dc76      	bgt.n	800932a <__kernel_rem_pio2+0x5ce>
 800923c:	46aa      	mov	sl, r5
 800923e:	46a3      	mov	fp, r4
 8009240:	f1bb 0f01 	cmp.w	fp, #1
 8009244:	f300 8090 	bgt.w	8009368 <__kernel_rem_pio2+0x60c>
 8009248:	2700      	movs	r7, #0
 800924a:	463e      	mov	r6, r7
 800924c:	2c01      	cmp	r4, #1
 800924e:	f300 80aa 	bgt.w	80093a6 <__kernel_rem_pio2+0x64a>
 8009252:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009256:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800925a:	9b00      	ldr	r3, [sp, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 80ac 	bne.w	80093ba <__kernel_rem_pio2+0x65e>
 8009262:	4603      	mov	r3, r0
 8009264:	462a      	mov	r2, r5
 8009266:	9806      	ldr	r0, [sp, #24]
 8009268:	e9c0 2300 	strd	r2, r3, [r0]
 800926c:	4622      	mov	r2, r4
 800926e:	460b      	mov	r3, r1
 8009270:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009274:	463a      	mov	r2, r7
 8009276:	4633      	mov	r3, r6
 8009278:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800927c:	e7cd      	b.n	800921a <__kernel_rem_pio2+0x4be>
 800927e:	2000      	movs	r0, #0
 8009280:	46a0      	mov	r8, r4
 8009282:	4601      	mov	r1, r0
 8009284:	ab48      	add	r3, sp, #288	; 0x120
 8009286:	441d      	add	r5, r3
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	da3a      	bge.n	8009304 <__kernel_rem_pio2+0x5a8>
 800928e:	9b00      	ldr	r3, [sp, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d03e      	beq.n	8009312 <__kernel_rem_pio2+0x5b6>
 8009294:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009298:	4602      	mov	r2, r0
 800929a:	462b      	mov	r3, r5
 800929c:	9d06      	ldr	r5, [sp, #24]
 800929e:	2601      	movs	r6, #1
 80092a0:	e9c5 2300 	strd	r2, r3, [r5]
 80092a4:	460b      	mov	r3, r1
 80092a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80092aa:	f7f7 f809 	bl	80002c0 <__aeabi_dsub>
 80092ae:	4684      	mov	ip, r0
 80092b0:	460f      	mov	r7, r1
 80092b2:	ad48      	add	r5, sp, #288	; 0x120
 80092b4:	42b4      	cmp	r4, r6
 80092b6:	f105 0508 	add.w	r5, r5, #8
 80092ba:	da2c      	bge.n	8009316 <__kernel_rem_pio2+0x5ba>
 80092bc:	9b00      	ldr	r3, [sp, #0]
 80092be:	b10b      	cbz	r3, 80092c4 <__kernel_rem_pio2+0x568>
 80092c0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80092c4:	4662      	mov	r2, ip
 80092c6:	463b      	mov	r3, r7
 80092c8:	9906      	ldr	r1, [sp, #24]
 80092ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80092ce:	e7a4      	b.n	800921a <__kernel_rem_pio2+0x4be>
 80092d0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80092d2:	ab48      	add	r3, sp, #288	; 0x120
 80092d4:	4637      	mov	r7, r6
 80092d6:	441d      	add	r5, r3
 80092d8:	2c00      	cmp	r4, #0
 80092da:	da09      	bge.n	80092f0 <__kernel_rem_pio2+0x594>
 80092dc:	9b00      	ldr	r3, [sp, #0]
 80092de:	b10b      	cbz	r3, 80092e4 <__kernel_rem_pio2+0x588>
 80092e0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80092e4:	4632      	mov	r2, r6
 80092e6:	463b      	mov	r3, r7
 80092e8:	9906      	ldr	r1, [sp, #24]
 80092ea:	e9c1 2300 	strd	r2, r3, [r1]
 80092ee:	e794      	b.n	800921a <__kernel_rem_pio2+0x4be>
 80092f0:	4630      	mov	r0, r6
 80092f2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f6 ffe4 	bl	80002c4 <__adddf3>
 80092fc:	3c01      	subs	r4, #1
 80092fe:	4606      	mov	r6, r0
 8009300:	460f      	mov	r7, r1
 8009302:	e7e9      	b.n	80092d8 <__kernel_rem_pio2+0x57c>
 8009304:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009308:	f7f6 ffdc 	bl	80002c4 <__adddf3>
 800930c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009310:	e7ba      	b.n	8009288 <__kernel_rem_pio2+0x52c>
 8009312:	460d      	mov	r5, r1
 8009314:	e7c0      	b.n	8009298 <__kernel_rem_pio2+0x53c>
 8009316:	4660      	mov	r0, ip
 8009318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800931c:	4639      	mov	r1, r7
 800931e:	f7f6 ffd1 	bl	80002c4 <__adddf3>
 8009322:	3601      	adds	r6, #1
 8009324:	4684      	mov	ip, r0
 8009326:	460f      	mov	r7, r1
 8009328:	e7c4      	b.n	80092b4 <__kernel_rem_pio2+0x558>
 800932a:	e9da 6700 	ldrd	r6, r7, [sl]
 800932e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009332:	4632      	mov	r2, r6
 8009334:	463b      	mov	r3, r7
 8009336:	4640      	mov	r0, r8
 8009338:	4649      	mov	r1, r9
 800933a:	f7f6 ffc3 	bl	80002c4 <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009346:	4640      	mov	r0, r8
 8009348:	4649      	mov	r1, r9
 800934a:	f7f6 ffb9 	bl	80002c0 <__aeabi_dsub>
 800934e:	4632      	mov	r2, r6
 8009350:	463b      	mov	r3, r7
 8009352:	f7f6 ffb7 	bl	80002c4 <__adddf3>
 8009356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800935e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009362:	e9ca 2300 	strd	r2, r3, [sl]
 8009366:	e766      	b.n	8009236 <__kernel_rem_pio2+0x4da>
 8009368:	e9da 8900 	ldrd	r8, r9, [sl]
 800936c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 ffa4 	bl	80002c4 <__adddf3>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f6 ff9a 	bl	80002c0 <__aeabi_dsub>
 800938c:	4642      	mov	r2, r8
 800938e:	464b      	mov	r3, r9
 8009390:	f7f6 ff98 	bl	80002c4 <__adddf3>
 8009394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009398:	e86a 0102 	strd	r0, r1, [sl], #-8
 800939c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093a0:	e9ca 2300 	strd	r2, r3, [sl]
 80093a4:	e74c      	b.n	8009240 <__kernel_rem_pio2+0x4e4>
 80093a6:	4638      	mov	r0, r7
 80093a8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80093ac:	4631      	mov	r1, r6
 80093ae:	f7f6 ff89 	bl	80002c4 <__adddf3>
 80093b2:	3c01      	subs	r4, #1
 80093b4:	4607      	mov	r7, r0
 80093b6:	460e      	mov	r6, r1
 80093b8:	e748      	b.n	800924c <__kernel_rem_pio2+0x4f0>
 80093ba:	9b06      	ldr	r3, [sp, #24]
 80093bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80093c0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80093c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80093c8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80093cc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80093d0:	601d      	str	r5, [r3, #0]
 80093d2:	615e      	str	r6, [r3, #20]
 80093d4:	e721      	b.n	800921a <__kernel_rem_pio2+0x4be>
 80093d6:	bf00      	nop
 80093d8:	41700000 	.word	0x41700000
 80093dc:	3e700000 	.word	0x3e700000

080093e0 <__kernel_sin>:
 80093e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	e9cd 2300 	strd	r2, r3, [sp]
 80093ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80093f2:	4682      	mov	sl, r0
 80093f4:	460c      	mov	r4, r1
 80093f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80093f8:	da03      	bge.n	8009402 <__kernel_sin+0x22>
 80093fa:	f7f7 fbc9 	bl	8000b90 <__aeabi_d2iz>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d050      	beq.n	80094a4 <__kernel_sin+0xc4>
 8009402:	4652      	mov	r2, sl
 8009404:	4623      	mov	r3, r4
 8009406:	4650      	mov	r0, sl
 8009408:	4621      	mov	r1, r4
 800940a:	f7f7 f911 	bl	8000630 <__aeabi_dmul>
 800940e:	4606      	mov	r6, r0
 8009410:	460f      	mov	r7, r1
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4650      	mov	r0, sl
 8009418:	4621      	mov	r1, r4
 800941a:	f7f7 f909 	bl	8000630 <__aeabi_dmul>
 800941e:	a33e      	add	r3, pc, #248	; (adr r3, 8009518 <__kernel_sin+0x138>)
 8009420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 f900 	bl	8000630 <__aeabi_dmul>
 8009430:	a33b      	add	r3, pc, #236	; (adr r3, 8009520 <__kernel_sin+0x140>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f6 ff43 	bl	80002c0 <__aeabi_dsub>
 800943a:	4632      	mov	r2, r6
 800943c:	463b      	mov	r3, r7
 800943e:	f7f7 f8f7 	bl	8000630 <__aeabi_dmul>
 8009442:	a339      	add	r3, pc, #228	; (adr r3, 8009528 <__kernel_sin+0x148>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f7f6 ff3c 	bl	80002c4 <__adddf3>
 800944c:	4632      	mov	r2, r6
 800944e:	463b      	mov	r3, r7
 8009450:	f7f7 f8ee 	bl	8000630 <__aeabi_dmul>
 8009454:	a336      	add	r3, pc, #216	; (adr r3, 8009530 <__kernel_sin+0x150>)
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f7f6 ff31 	bl	80002c0 <__aeabi_dsub>
 800945e:	4632      	mov	r2, r6
 8009460:	463b      	mov	r3, r7
 8009462:	f7f7 f8e5 	bl	8000630 <__aeabi_dmul>
 8009466:	a334      	add	r3, pc, #208	; (adr r3, 8009538 <__kernel_sin+0x158>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f7f6 ff2a 	bl	80002c4 <__adddf3>
 8009470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009474:	b9dd      	cbnz	r5, 80094ae <__kernel_sin+0xce>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4630      	mov	r0, r6
 800947c:	4639      	mov	r1, r7
 800947e:	f7f7 f8d7 	bl	8000630 <__aeabi_dmul>
 8009482:	a32f      	add	r3, pc, #188	; (adr r3, 8009540 <__kernel_sin+0x160>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f6 ff1a 	bl	80002c0 <__aeabi_dsub>
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	f7f7 f8ce 	bl	8000630 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4650      	mov	r0, sl
 800949a:	4621      	mov	r1, r4
 800949c:	f7f6 ff12 	bl	80002c4 <__adddf3>
 80094a0:	4682      	mov	sl, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	4650      	mov	r0, sl
 80094a6:	4621      	mov	r1, r4
 80094a8:	b006      	add	sp, #24
 80094aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ae:	2200      	movs	r2, #0
 80094b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094b4:	4b24      	ldr	r3, [pc, #144]	; (8009548 <__kernel_sin+0x168>)
 80094b6:	f7f7 f8bb 	bl	8000630 <__aeabi_dmul>
 80094ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094c2:	4640      	mov	r0, r8
 80094c4:	4649      	mov	r1, r9
 80094c6:	f7f7 f8b3 	bl	8000630 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094d2:	f7f6 fef5 	bl	80002c0 <__aeabi_dsub>
 80094d6:	4632      	mov	r2, r6
 80094d8:	463b      	mov	r3, r7
 80094da:	f7f7 f8a9 	bl	8000630 <__aeabi_dmul>
 80094de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e2:	f7f6 feed 	bl	80002c0 <__aeabi_dsub>
 80094e6:	a316      	add	r3, pc, #88	; (adr r3, 8009540 <__kernel_sin+0x160>)
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	4606      	mov	r6, r0
 80094ee:	460f      	mov	r7, r1
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	f7f7 f89c 	bl	8000630 <__aeabi_dmul>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4630      	mov	r0, r6
 80094fe:	4639      	mov	r1, r7
 8009500:	f7f6 fee0 	bl	80002c4 <__adddf3>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4650      	mov	r0, sl
 800950a:	4621      	mov	r1, r4
 800950c:	f7f6 fed8 	bl	80002c0 <__aeabi_dsub>
 8009510:	e7c6      	b.n	80094a0 <__kernel_sin+0xc0>
 8009512:	bf00      	nop
 8009514:	f3af 8000 	nop.w
 8009518:	5acfd57c 	.word	0x5acfd57c
 800951c:	3de5d93a 	.word	0x3de5d93a
 8009520:	8a2b9ceb 	.word	0x8a2b9ceb
 8009524:	3e5ae5e6 	.word	0x3e5ae5e6
 8009528:	57b1fe7d 	.word	0x57b1fe7d
 800952c:	3ec71de3 	.word	0x3ec71de3
 8009530:	19c161d5 	.word	0x19c161d5
 8009534:	3f2a01a0 	.word	0x3f2a01a0
 8009538:	1110f8a6 	.word	0x1110f8a6
 800953c:	3f811111 	.word	0x3f811111
 8009540:	55555549 	.word	0x55555549
 8009544:	3fc55555 	.word	0x3fc55555
 8009548:	3fe00000 	.word	0x3fe00000

0800954c <with_errno>:
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	4604      	mov	r4, r0
 8009550:	460d      	mov	r5, r1
 8009552:	4616      	mov	r6, r2
 8009554:	f000 fac2 	bl	8009adc <__errno>
 8009558:	4629      	mov	r1, r5
 800955a:	6006      	str	r6, [r0, #0]
 800955c:	4620      	mov	r0, r4
 800955e:	bd70      	pop	{r4, r5, r6, pc}

08009560 <xflow>:
 8009560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009562:	4615      	mov	r5, r2
 8009564:	461c      	mov	r4, r3
 8009566:	b180      	cbz	r0, 800958a <xflow+0x2a>
 8009568:	4610      	mov	r0, r2
 800956a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800956e:	e9cd 0100 	strd	r0, r1, [sp]
 8009572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009576:	4628      	mov	r0, r5
 8009578:	4621      	mov	r1, r4
 800957a:	f7f7 f859 	bl	8000630 <__aeabi_dmul>
 800957e:	2222      	movs	r2, #34	; 0x22
 8009580:	b003      	add	sp, #12
 8009582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009586:	f7ff bfe1 	b.w	800954c <with_errno>
 800958a:	4610      	mov	r0, r2
 800958c:	4619      	mov	r1, r3
 800958e:	e7ee      	b.n	800956e <xflow+0xe>

08009590 <__math_uflow>:
 8009590:	2200      	movs	r2, #0
 8009592:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009596:	f7ff bfe3 	b.w	8009560 <xflow>

0800959a <__math_oflow>:
 800959a:	2200      	movs	r2, #0
 800959c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80095a0:	f7ff bfde 	b.w	8009560 <xflow>
 80095a4:	0000      	movs	r0, r0
	...

080095a8 <atan>:
 80095a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	4bb6      	ldr	r3, [pc, #728]	; (8009888 <atan+0x2e0>)
 80095ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80095b2:	429e      	cmp	r6, r3
 80095b4:	4604      	mov	r4, r0
 80095b6:	460d      	mov	r5, r1
 80095b8:	468b      	mov	fp, r1
 80095ba:	dd17      	ble.n	80095ec <atan+0x44>
 80095bc:	4bb3      	ldr	r3, [pc, #716]	; (800988c <atan+0x2e4>)
 80095be:	429e      	cmp	r6, r3
 80095c0:	dc01      	bgt.n	80095c6 <atan+0x1e>
 80095c2:	d109      	bne.n	80095d8 <atan+0x30>
 80095c4:	b140      	cbz	r0, 80095d8 <atan+0x30>
 80095c6:	4622      	mov	r2, r4
 80095c8:	462b      	mov	r3, r5
 80095ca:	4620      	mov	r0, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	f7f6 fe79 	bl	80002c4 <__adddf3>
 80095d2:	4604      	mov	r4, r0
 80095d4:	460d      	mov	r5, r1
 80095d6:	e005      	b.n	80095e4 <atan+0x3c>
 80095d8:	f1bb 0f00 	cmp.w	fp, #0
 80095dc:	4cac      	ldr	r4, [pc, #688]	; (8009890 <atan+0x2e8>)
 80095de:	f300 8121 	bgt.w	8009824 <atan+0x27c>
 80095e2:	4dac      	ldr	r5, [pc, #688]	; (8009894 <atan+0x2ec>)
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	4baa      	ldr	r3, [pc, #680]	; (8009898 <atan+0x2f0>)
 80095ee:	429e      	cmp	r6, r3
 80095f0:	dc11      	bgt.n	8009616 <atan+0x6e>
 80095f2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80095f6:	429e      	cmp	r6, r3
 80095f8:	dc0a      	bgt.n	8009610 <atan+0x68>
 80095fa:	a38b      	add	r3, pc, #556	; (adr r3, 8009828 <atan+0x280>)
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fe60 	bl	80002c4 <__adddf3>
 8009604:	2200      	movs	r2, #0
 8009606:	4ba5      	ldr	r3, [pc, #660]	; (800989c <atan+0x2f4>)
 8009608:	f7f7 faa2 	bl	8000b50 <__aeabi_dcmpgt>
 800960c:	2800      	cmp	r0, #0
 800960e:	d1e9      	bne.n	80095e4 <atan+0x3c>
 8009610:	f04f 3aff 	mov.w	sl, #4294967295
 8009614:	e027      	b.n	8009666 <atan+0xbe>
 8009616:	f000 f951 	bl	80098bc <fabs>
 800961a:	4ba1      	ldr	r3, [pc, #644]	; (80098a0 <atan+0x2f8>)
 800961c:	4604      	mov	r4, r0
 800961e:	429e      	cmp	r6, r3
 8009620:	460d      	mov	r5, r1
 8009622:	f300 80b8 	bgt.w	8009796 <atan+0x1ee>
 8009626:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800962a:	429e      	cmp	r6, r3
 800962c:	f300 809c 	bgt.w	8009768 <atan+0x1c0>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	f7f6 fe46 	bl	80002c4 <__adddf3>
 8009638:	2200      	movs	r2, #0
 800963a:	4b98      	ldr	r3, [pc, #608]	; (800989c <atan+0x2f4>)
 800963c:	f7f6 fe40 	bl	80002c0 <__aeabi_dsub>
 8009640:	2200      	movs	r2, #0
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7f6 fe39 	bl	80002c4 <__adddf3>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4630      	mov	r0, r6
 8009658:	4639      	mov	r1, r7
 800965a:	f7f7 f913 	bl	8000884 <__aeabi_ddiv>
 800965e:	f04f 0a00 	mov.w	sl, #0
 8009662:	4604      	mov	r4, r0
 8009664:	460d      	mov	r5, r1
 8009666:	4622      	mov	r2, r4
 8009668:	462b      	mov	r3, r5
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f7f6 ffdf 	bl	8000630 <__aeabi_dmul>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4680      	mov	r8, r0
 8009678:	4689      	mov	r9, r1
 800967a:	f7f6 ffd9 	bl	8000630 <__aeabi_dmul>
 800967e:	a36c      	add	r3, pc, #432	; (adr r3, 8009830 <atan+0x288>)
 8009680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009684:	4606      	mov	r6, r0
 8009686:	460f      	mov	r7, r1
 8009688:	f7f6 ffd2 	bl	8000630 <__aeabi_dmul>
 800968c:	a36a      	add	r3, pc, #424	; (adr r3, 8009838 <atan+0x290>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	f7f6 fe17 	bl	80002c4 <__adddf3>
 8009696:	4632      	mov	r2, r6
 8009698:	463b      	mov	r3, r7
 800969a:	f7f6 ffc9 	bl	8000630 <__aeabi_dmul>
 800969e:	a368      	add	r3, pc, #416	; (adr r3, 8009840 <atan+0x298>)
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f7f6 fe0e 	bl	80002c4 <__adddf3>
 80096a8:	4632      	mov	r2, r6
 80096aa:	463b      	mov	r3, r7
 80096ac:	f7f6 ffc0 	bl	8000630 <__aeabi_dmul>
 80096b0:	a365      	add	r3, pc, #404	; (adr r3, 8009848 <atan+0x2a0>)
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f7f6 fe05 	bl	80002c4 <__adddf3>
 80096ba:	4632      	mov	r2, r6
 80096bc:	463b      	mov	r3, r7
 80096be:	f7f6 ffb7 	bl	8000630 <__aeabi_dmul>
 80096c2:	a363      	add	r3, pc, #396	; (adr r3, 8009850 <atan+0x2a8>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 fdfc 	bl	80002c4 <__adddf3>
 80096cc:	4632      	mov	r2, r6
 80096ce:	463b      	mov	r3, r7
 80096d0:	f7f6 ffae 	bl	8000630 <__aeabi_dmul>
 80096d4:	a360      	add	r3, pc, #384	; (adr r3, 8009858 <atan+0x2b0>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 fdf3 	bl	80002c4 <__adddf3>
 80096de:	4642      	mov	r2, r8
 80096e0:	464b      	mov	r3, r9
 80096e2:	f7f6 ffa5 	bl	8000630 <__aeabi_dmul>
 80096e6:	a35e      	add	r3, pc, #376	; (adr r3, 8009860 <atan+0x2b8>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	4680      	mov	r8, r0
 80096ee:	4689      	mov	r9, r1
 80096f0:	4630      	mov	r0, r6
 80096f2:	4639      	mov	r1, r7
 80096f4:	f7f6 ff9c 	bl	8000630 <__aeabi_dmul>
 80096f8:	a35b      	add	r3, pc, #364	; (adr r3, 8009868 <atan+0x2c0>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 fddf 	bl	80002c0 <__aeabi_dsub>
 8009702:	4632      	mov	r2, r6
 8009704:	463b      	mov	r3, r7
 8009706:	f7f6 ff93 	bl	8000630 <__aeabi_dmul>
 800970a:	a359      	add	r3, pc, #356	; (adr r3, 8009870 <atan+0x2c8>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fdd6 	bl	80002c0 <__aeabi_dsub>
 8009714:	4632      	mov	r2, r6
 8009716:	463b      	mov	r3, r7
 8009718:	f7f6 ff8a 	bl	8000630 <__aeabi_dmul>
 800971c:	a356      	add	r3, pc, #344	; (adr r3, 8009878 <atan+0x2d0>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 fdcd 	bl	80002c0 <__aeabi_dsub>
 8009726:	4632      	mov	r2, r6
 8009728:	463b      	mov	r3, r7
 800972a:	f7f6 ff81 	bl	8000630 <__aeabi_dmul>
 800972e:	a354      	add	r3, pc, #336	; (adr r3, 8009880 <atan+0x2d8>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	f7f6 fdc4 	bl	80002c0 <__aeabi_dsub>
 8009738:	4632      	mov	r2, r6
 800973a:	463b      	mov	r3, r7
 800973c:	f7f6 ff78 	bl	8000630 <__aeabi_dmul>
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	4640      	mov	r0, r8
 8009746:	4649      	mov	r1, r9
 8009748:	f7f6 fdbc 	bl	80002c4 <__adddf3>
 800974c:	4622      	mov	r2, r4
 800974e:	462b      	mov	r3, r5
 8009750:	f7f6 ff6e 	bl	8000630 <__aeabi_dmul>
 8009754:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009758:	4602      	mov	r2, r0
 800975a:	460b      	mov	r3, r1
 800975c:	d144      	bne.n	80097e8 <atan+0x240>
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f6 fdad 	bl	80002c0 <__aeabi_dsub>
 8009766:	e734      	b.n	80095d2 <atan+0x2a>
 8009768:	2200      	movs	r2, #0
 800976a:	4b4c      	ldr	r3, [pc, #304]	; (800989c <atan+0x2f4>)
 800976c:	f7f6 fda8 	bl	80002c0 <__aeabi_dsub>
 8009770:	2200      	movs	r2, #0
 8009772:	4606      	mov	r6, r0
 8009774:	460f      	mov	r7, r1
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	4b48      	ldr	r3, [pc, #288]	; (800989c <atan+0x2f4>)
 800977c:	f7f6 fda2 	bl	80002c4 <__adddf3>
 8009780:	4602      	mov	r2, r0
 8009782:	460b      	mov	r3, r1
 8009784:	4630      	mov	r0, r6
 8009786:	4639      	mov	r1, r7
 8009788:	f7f7 f87c 	bl	8000884 <__aeabi_ddiv>
 800978c:	f04f 0a01 	mov.w	sl, #1
 8009790:	4604      	mov	r4, r0
 8009792:	460d      	mov	r5, r1
 8009794:	e767      	b.n	8009666 <atan+0xbe>
 8009796:	4b43      	ldr	r3, [pc, #268]	; (80098a4 <atan+0x2fc>)
 8009798:	429e      	cmp	r6, r3
 800979a:	da1a      	bge.n	80097d2 <atan+0x22a>
 800979c:	2200      	movs	r2, #0
 800979e:	4b42      	ldr	r3, [pc, #264]	; (80098a8 <atan+0x300>)
 80097a0:	f7f6 fd8e 	bl	80002c0 <__aeabi_dsub>
 80097a4:	2200      	movs	r2, #0
 80097a6:	4606      	mov	r6, r0
 80097a8:	460f      	mov	r7, r1
 80097aa:	4620      	mov	r0, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	4b3e      	ldr	r3, [pc, #248]	; (80098a8 <atan+0x300>)
 80097b0:	f7f6 ff3e 	bl	8000630 <__aeabi_dmul>
 80097b4:	2200      	movs	r2, #0
 80097b6:	4b39      	ldr	r3, [pc, #228]	; (800989c <atan+0x2f4>)
 80097b8:	f7f6 fd84 	bl	80002c4 <__adddf3>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4630      	mov	r0, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	f7f7 f85e 	bl	8000884 <__aeabi_ddiv>
 80097c8:	f04f 0a02 	mov.w	sl, #2
 80097cc:	4604      	mov	r4, r0
 80097ce:	460d      	mov	r5, r1
 80097d0:	e749      	b.n	8009666 <atan+0xbe>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	2000      	movs	r0, #0
 80097d8:	4934      	ldr	r1, [pc, #208]	; (80098ac <atan+0x304>)
 80097da:	f7f7 f853 	bl	8000884 <__aeabi_ddiv>
 80097de:	f04f 0a03 	mov.w	sl, #3
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	e73e      	b.n	8009666 <atan+0xbe>
 80097e8:	4b31      	ldr	r3, [pc, #196]	; (80098b0 <atan+0x308>)
 80097ea:	4e32      	ldr	r6, [pc, #200]	; (80098b4 <atan+0x30c>)
 80097ec:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80097f0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80097f4:	e9da 2300 	ldrd	r2, r3, [sl]
 80097f8:	f7f6 fd62 	bl	80002c0 <__aeabi_dsub>
 80097fc:	4622      	mov	r2, r4
 80097fe:	462b      	mov	r3, r5
 8009800:	f7f6 fd5e 	bl	80002c0 <__aeabi_dsub>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	e9d6 0100 	ldrd	r0, r1, [r6]
 800980c:	f7f6 fd58 	bl	80002c0 <__aeabi_dsub>
 8009810:	f1bb 0f00 	cmp.w	fp, #0
 8009814:	4604      	mov	r4, r0
 8009816:	460d      	mov	r5, r1
 8009818:	f6bf aee4 	bge.w	80095e4 <atan+0x3c>
 800981c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009820:	461d      	mov	r5, r3
 8009822:	e6df      	b.n	80095e4 <atan+0x3c>
 8009824:	4d24      	ldr	r5, [pc, #144]	; (80098b8 <atan+0x310>)
 8009826:	e6dd      	b.n	80095e4 <atan+0x3c>
 8009828:	8800759c 	.word	0x8800759c
 800982c:	7e37e43c 	.word	0x7e37e43c
 8009830:	e322da11 	.word	0xe322da11
 8009834:	3f90ad3a 	.word	0x3f90ad3a
 8009838:	24760deb 	.word	0x24760deb
 800983c:	3fa97b4b 	.word	0x3fa97b4b
 8009840:	a0d03d51 	.word	0xa0d03d51
 8009844:	3fb10d66 	.word	0x3fb10d66
 8009848:	c54c206e 	.word	0xc54c206e
 800984c:	3fb745cd 	.word	0x3fb745cd
 8009850:	920083ff 	.word	0x920083ff
 8009854:	3fc24924 	.word	0x3fc24924
 8009858:	5555550d 	.word	0x5555550d
 800985c:	3fd55555 	.word	0x3fd55555
 8009860:	2c6a6c2f 	.word	0x2c6a6c2f
 8009864:	bfa2b444 	.word	0xbfa2b444
 8009868:	52defd9a 	.word	0x52defd9a
 800986c:	3fadde2d 	.word	0x3fadde2d
 8009870:	af749a6d 	.word	0xaf749a6d
 8009874:	3fb3b0f2 	.word	0x3fb3b0f2
 8009878:	fe231671 	.word	0xfe231671
 800987c:	3fbc71c6 	.word	0x3fbc71c6
 8009880:	9998ebc4 	.word	0x9998ebc4
 8009884:	3fc99999 	.word	0x3fc99999
 8009888:	440fffff 	.word	0x440fffff
 800988c:	7ff00000 	.word	0x7ff00000
 8009890:	54442d18 	.word	0x54442d18
 8009894:	bff921fb 	.word	0xbff921fb
 8009898:	3fdbffff 	.word	0x3fdbffff
 800989c:	3ff00000 	.word	0x3ff00000
 80098a0:	3ff2ffff 	.word	0x3ff2ffff
 80098a4:	40038000 	.word	0x40038000
 80098a8:	3ff80000 	.word	0x3ff80000
 80098ac:	bff00000 	.word	0xbff00000
 80098b0:	08009fd0 	.word	0x08009fd0
 80098b4:	08009fb0 	.word	0x08009fb0
 80098b8:	3ff921fb 	.word	0x3ff921fb

080098bc <fabs>:
 80098bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80098c0:	4770      	bx	lr

080098c2 <finite>:
 80098c2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80098c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80098ca:	0fc0      	lsrs	r0, r0, #31
 80098cc:	4770      	bx	lr
	...

080098d0 <floor>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80098d8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80098dc:	2e13      	cmp	r6, #19
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4607      	mov	r7, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	4605      	mov	r5, r0
 80098e8:	dc33      	bgt.n	8009952 <floor+0x82>
 80098ea:	2e00      	cmp	r6, #0
 80098ec:	da14      	bge.n	8009918 <floor+0x48>
 80098ee:	a334      	add	r3, pc, #208	; (adr r3, 80099c0 <floor+0xf0>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fce6 	bl	80002c4 <__adddf3>
 80098f8:	2200      	movs	r2, #0
 80098fa:	2300      	movs	r3, #0
 80098fc:	f7f7 f928 	bl	8000b50 <__aeabi_dcmpgt>
 8009900:	b138      	cbz	r0, 8009912 <floor+0x42>
 8009902:	2c00      	cmp	r4, #0
 8009904:	da58      	bge.n	80099b8 <floor+0xe8>
 8009906:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800990a:	431d      	orrs	r5, r3
 800990c:	d001      	beq.n	8009912 <floor+0x42>
 800990e:	2500      	movs	r5, #0
 8009910:	4c2d      	ldr	r4, [pc, #180]	; (80099c8 <floor+0xf8>)
 8009912:	4623      	mov	r3, r4
 8009914:	462f      	mov	r7, r5
 8009916:	e025      	b.n	8009964 <floor+0x94>
 8009918:	4a2c      	ldr	r2, [pc, #176]	; (80099cc <floor+0xfc>)
 800991a:	fa42 f806 	asr.w	r8, r2, r6
 800991e:	ea01 0208 	and.w	r2, r1, r8
 8009922:	4302      	orrs	r2, r0
 8009924:	d01e      	beq.n	8009964 <floor+0x94>
 8009926:	a326      	add	r3, pc, #152	; (adr r3, 80099c0 <floor+0xf0>)
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f7f6 fcca 	bl	80002c4 <__adddf3>
 8009930:	2200      	movs	r2, #0
 8009932:	2300      	movs	r3, #0
 8009934:	f7f7 f90c 	bl	8000b50 <__aeabi_dcmpgt>
 8009938:	2800      	cmp	r0, #0
 800993a:	d0ea      	beq.n	8009912 <floor+0x42>
 800993c:	2c00      	cmp	r4, #0
 800993e:	bfbe      	ittt	lt
 8009940:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009944:	fa43 f606 	asrlt.w	r6, r3, r6
 8009948:	19a4      	addlt	r4, r4, r6
 800994a:	2500      	movs	r5, #0
 800994c:	ea24 0408 	bic.w	r4, r4, r8
 8009950:	e7df      	b.n	8009912 <floor+0x42>
 8009952:	2e33      	cmp	r6, #51	; 0x33
 8009954:	dd0a      	ble.n	800996c <floor+0x9c>
 8009956:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800995a:	d103      	bne.n	8009964 <floor+0x94>
 800995c:	f7f6 fcb2 	bl	80002c4 <__adddf3>
 8009960:	4607      	mov	r7, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4638      	mov	r0, r7
 8009966:	4619      	mov	r1, r3
 8009968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009974:	fa22 f808 	lsr.w	r8, r2, r8
 8009978:	ea18 0f00 	tst.w	r8, r0
 800997c:	d0f2      	beq.n	8009964 <floor+0x94>
 800997e:	a310      	add	r3, pc, #64	; (adr r3, 80099c0 <floor+0xf0>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fc9e 	bl	80002c4 <__adddf3>
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	f7f7 f8e0 	bl	8000b50 <__aeabi_dcmpgt>
 8009990:	2800      	cmp	r0, #0
 8009992:	d0be      	beq.n	8009912 <floor+0x42>
 8009994:	2c00      	cmp	r4, #0
 8009996:	da02      	bge.n	800999e <floor+0xce>
 8009998:	2e14      	cmp	r6, #20
 800999a:	d103      	bne.n	80099a4 <floor+0xd4>
 800999c:	3401      	adds	r4, #1
 800999e:	ea25 0508 	bic.w	r5, r5, r8
 80099a2:	e7b6      	b.n	8009912 <floor+0x42>
 80099a4:	2301      	movs	r3, #1
 80099a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80099aa:	fa03 f606 	lsl.w	r6, r3, r6
 80099ae:	4435      	add	r5, r6
 80099b0:	42bd      	cmp	r5, r7
 80099b2:	bf38      	it	cc
 80099b4:	18e4      	addcc	r4, r4, r3
 80099b6:	e7f2      	b.n	800999e <floor+0xce>
 80099b8:	2500      	movs	r5, #0
 80099ba:	462c      	mov	r4, r5
 80099bc:	e7a9      	b.n	8009912 <floor+0x42>
 80099be:	bf00      	nop
 80099c0:	8800759c 	.word	0x8800759c
 80099c4:	7e37e43c 	.word	0x7e37e43c
 80099c8:	bff00000 	.word	0xbff00000
 80099cc:	000fffff 	.word	0x000fffff

080099d0 <scalbn>:
 80099d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	4617      	mov	r7, r2
 80099dc:	460b      	mov	r3, r1
 80099de:	b996      	cbnz	r6, 8009a06 <scalbn+0x36>
 80099e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80099e4:	4303      	orrs	r3, r0
 80099e6:	d039      	beq.n	8009a5c <scalbn+0x8c>
 80099e8:	4b33      	ldr	r3, [pc, #204]	; (8009ab8 <scalbn+0xe8>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	f7f6 fe20 	bl	8000630 <__aeabi_dmul>
 80099f0:	4b32      	ldr	r3, [pc, #200]	; (8009abc <scalbn+0xec>)
 80099f2:	4604      	mov	r4, r0
 80099f4:	429f      	cmp	r7, r3
 80099f6:	460d      	mov	r5, r1
 80099f8:	da0f      	bge.n	8009a1a <scalbn+0x4a>
 80099fa:	a32b      	add	r3, pc, #172	; (adr r3, 8009aa8 <scalbn+0xd8>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f7f6 fe16 	bl	8000630 <__aeabi_dmul>
 8009a04:	e006      	b.n	8009a14 <scalbn+0x44>
 8009a06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009a0a:	4296      	cmp	r6, r2
 8009a0c:	d10a      	bne.n	8009a24 <scalbn+0x54>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	f7f6 fc58 	bl	80002c4 <__adddf3>
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	e020      	b.n	8009a5c <scalbn+0x8c>
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a20:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009a24:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009a28:	19b9      	adds	r1, r7, r6
 8009a2a:	4291      	cmp	r1, r2
 8009a2c:	dd0e      	ble.n	8009a4c <scalbn+0x7c>
 8009a2e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009a32:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009a36:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009a3a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009a3e:	4820      	ldr	r0, [pc, #128]	; (8009ac0 <scalbn+0xf0>)
 8009a40:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009a44:	a31a      	add	r3, pc, #104	; (adr r3, 8009ab0 <scalbn+0xe0>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	e7d9      	b.n	8009a00 <scalbn+0x30>
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	dd08      	ble.n	8009a62 <scalbn+0x92>
 8009a50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a62:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009a66:	da12      	bge.n	8009a8e <scalbn+0xbe>
 8009a68:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a6c:	429f      	cmp	r7, r3
 8009a6e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009a72:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009a76:	dcdc      	bgt.n	8009a32 <scalbn+0x62>
 8009a78:	a30b      	add	r3, pc, #44	; (adr r3, 8009aa8 <scalbn+0xd8>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009a82:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009a86:	480f      	ldr	r0, [pc, #60]	; (8009ac4 <scalbn+0xf4>)
 8009a88:	f041 011f 	orr.w	r1, r1, #31
 8009a8c:	e7b8      	b.n	8009a00 <scalbn+0x30>
 8009a8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a92:	3136      	adds	r1, #54	; 0x36
 8009a94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	4629      	mov	r1, r5
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	4b09      	ldr	r3, [pc, #36]	; (8009ac8 <scalbn+0xf8>)
 8009aa4:	e7ac      	b.n	8009a00 <scalbn+0x30>
 8009aa6:	bf00      	nop
 8009aa8:	c2f8f359 	.word	0xc2f8f359
 8009aac:	01a56e1f 	.word	0x01a56e1f
 8009ab0:	8800759c 	.word	0x8800759c
 8009ab4:	7e37e43c 	.word	0x7e37e43c
 8009ab8:	43500000 	.word	0x43500000
 8009abc:	ffff3cb0 	.word	0xffff3cb0
 8009ac0:	8800759c 	.word	0x8800759c
 8009ac4:	c2f8f359 	.word	0xc2f8f359
 8009ac8:	3c900000 	.word	0x3c900000

08009acc <abort>:
 8009acc:	2006      	movs	r0, #6
 8009ace:	b508      	push	{r3, lr}
 8009ad0:	f000 f90a 	bl	8009ce8 <raise>
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	f7fa f8d6 	bl	8003c86 <_exit>
	...

08009adc <__errno>:
 8009adc:	4b01      	ldr	r3, [pc, #4]	; (8009ae4 <__errno+0x8>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20000018 	.word	0x20000018

08009ae8 <__libc_init_array>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	2600      	movs	r6, #0
 8009aec:	4d0c      	ldr	r5, [pc, #48]	; (8009b20 <__libc_init_array+0x38>)
 8009aee:	4c0d      	ldr	r4, [pc, #52]	; (8009b24 <__libc_init_array+0x3c>)
 8009af0:	1b64      	subs	r4, r4, r5
 8009af2:	10a4      	asrs	r4, r4, #2
 8009af4:	42a6      	cmp	r6, r4
 8009af6:	d109      	bne.n	8009b0c <__libc_init_array+0x24>
 8009af8:	f000 f920 	bl	8009d3c <_init>
 8009afc:	2600      	movs	r6, #0
 8009afe:	4d0a      	ldr	r5, [pc, #40]	; (8009b28 <__libc_init_array+0x40>)
 8009b00:	4c0a      	ldr	r4, [pc, #40]	; (8009b2c <__libc_init_array+0x44>)
 8009b02:	1b64      	subs	r4, r4, r5
 8009b04:	10a4      	asrs	r4, r4, #2
 8009b06:	42a6      	cmp	r6, r4
 8009b08:	d105      	bne.n	8009b16 <__libc_init_array+0x2e>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b10:	4798      	blx	r3
 8009b12:	3601      	adds	r6, #1
 8009b14:	e7ee      	b.n	8009af4 <__libc_init_array+0xc>
 8009b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1a:	4798      	blx	r3
 8009b1c:	3601      	adds	r6, #1
 8009b1e:	e7f2      	b.n	8009b06 <__libc_init_array+0x1e>
 8009b20:	08009ff0 	.word	0x08009ff0
 8009b24:	08009ff0 	.word	0x08009ff0
 8009b28:	08009ff0 	.word	0x08009ff0
 8009b2c:	08009ff4 	.word	0x08009ff4

08009b30 <malloc>:
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <malloc+0xc>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f000 b82b 	b.w	8009b90 <_malloc_r>
 8009b3a:	bf00      	nop
 8009b3c:	20000018 	.word	0x20000018

08009b40 <memset>:
 8009b40:	4603      	mov	r3, r0
 8009b42:	4402      	add	r2, r0
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d100      	bne.n	8009b4a <memset+0xa>
 8009b48:	4770      	bx	lr
 8009b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4e:	e7f9      	b.n	8009b44 <memset+0x4>

08009b50 <sbrk_aligned>:
 8009b50:	b570      	push	{r4, r5, r6, lr}
 8009b52:	4e0e      	ldr	r6, [pc, #56]	; (8009b8c <sbrk_aligned+0x3c>)
 8009b54:	460c      	mov	r4, r1
 8009b56:	6831      	ldr	r1, [r6, #0]
 8009b58:	4605      	mov	r5, r0
 8009b5a:	b911      	cbnz	r1, 8009b62 <sbrk_aligned+0x12>
 8009b5c:	f000 f88c 	bl	8009c78 <_sbrk_r>
 8009b60:	6030      	str	r0, [r6, #0]
 8009b62:	4621      	mov	r1, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 f887 	bl	8009c78 <_sbrk_r>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d00a      	beq.n	8009b84 <sbrk_aligned+0x34>
 8009b6e:	1cc4      	adds	r4, r0, #3
 8009b70:	f024 0403 	bic.w	r4, r4, #3
 8009b74:	42a0      	cmp	r0, r4
 8009b76:	d007      	beq.n	8009b88 <sbrk_aligned+0x38>
 8009b78:	1a21      	subs	r1, r4, r0
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f87c 	bl	8009c78 <_sbrk_r>
 8009b80:	3001      	adds	r0, #1
 8009b82:	d101      	bne.n	8009b88 <sbrk_aligned+0x38>
 8009b84:	f04f 34ff 	mov.w	r4, #4294967295
 8009b88:	4620      	mov	r0, r4
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	200002a4 	.word	0x200002a4

08009b90 <_malloc_r>:
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	1ccd      	adds	r5, r1, #3
 8009b96:	f025 0503 	bic.w	r5, r5, #3
 8009b9a:	3508      	adds	r5, #8
 8009b9c:	2d0c      	cmp	r5, #12
 8009b9e:	bf38      	it	cc
 8009ba0:	250c      	movcc	r5, #12
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	db01      	blt.n	8009bac <_malloc_r+0x1c>
 8009ba8:	42a9      	cmp	r1, r5
 8009baa:	d905      	bls.n	8009bb8 <_malloc_r+0x28>
 8009bac:	230c      	movs	r3, #12
 8009bae:	2600      	movs	r6, #0
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb8:	4e2e      	ldr	r6, [pc, #184]	; (8009c74 <_malloc_r+0xe4>)
 8009bba:	f000 f8b1 	bl	8009d20 <__malloc_lock>
 8009bbe:	6833      	ldr	r3, [r6, #0]
 8009bc0:	461c      	mov	r4, r3
 8009bc2:	bb34      	cbnz	r4, 8009c12 <_malloc_r+0x82>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f7ff ffc2 	bl	8009b50 <sbrk_aligned>
 8009bcc:	1c43      	adds	r3, r0, #1
 8009bce:	4604      	mov	r4, r0
 8009bd0:	d14d      	bne.n	8009c6e <_malloc_r+0xde>
 8009bd2:	6834      	ldr	r4, [r6, #0]
 8009bd4:	4626      	mov	r6, r4
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	d140      	bne.n	8009c5c <_malloc_r+0xcc>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4638      	mov	r0, r7
 8009be0:	eb04 0803 	add.w	r8, r4, r3
 8009be4:	f000 f848 	bl	8009c78 <_sbrk_r>
 8009be8:	4580      	cmp	r8, r0
 8009bea:	d13a      	bne.n	8009c62 <_malloc_r+0xd2>
 8009bec:	6821      	ldr	r1, [r4, #0]
 8009bee:	3503      	adds	r5, #3
 8009bf0:	1a6d      	subs	r5, r5, r1
 8009bf2:	f025 0503 	bic.w	r5, r5, #3
 8009bf6:	3508      	adds	r5, #8
 8009bf8:	2d0c      	cmp	r5, #12
 8009bfa:	bf38      	it	cc
 8009bfc:	250c      	movcc	r5, #12
 8009bfe:	4638      	mov	r0, r7
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7ff ffa5 	bl	8009b50 <sbrk_aligned>
 8009c06:	3001      	adds	r0, #1
 8009c08:	d02b      	beq.n	8009c62 <_malloc_r+0xd2>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	442b      	add	r3, r5
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	e00e      	b.n	8009c30 <_malloc_r+0xa0>
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	1b52      	subs	r2, r2, r5
 8009c16:	d41e      	bmi.n	8009c56 <_malloc_r+0xc6>
 8009c18:	2a0b      	cmp	r2, #11
 8009c1a:	d916      	bls.n	8009c4a <_malloc_r+0xba>
 8009c1c:	1961      	adds	r1, r4, r5
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	6025      	str	r5, [r4, #0]
 8009c22:	bf18      	it	ne
 8009c24:	6059      	strne	r1, [r3, #4]
 8009c26:	6863      	ldr	r3, [r4, #4]
 8009c28:	bf08      	it	eq
 8009c2a:	6031      	streq	r1, [r6, #0]
 8009c2c:	5162      	str	r2, [r4, r5]
 8009c2e:	604b      	str	r3, [r1, #4]
 8009c30:	4638      	mov	r0, r7
 8009c32:	f104 060b 	add.w	r6, r4, #11
 8009c36:	f000 f879 	bl	8009d2c <__malloc_unlock>
 8009c3a:	f026 0607 	bic.w	r6, r6, #7
 8009c3e:	1d23      	adds	r3, r4, #4
 8009c40:	1af2      	subs	r2, r6, r3
 8009c42:	d0b6      	beq.n	8009bb2 <_malloc_r+0x22>
 8009c44:	1b9b      	subs	r3, r3, r6
 8009c46:	50a3      	str	r3, [r4, r2]
 8009c48:	e7b3      	b.n	8009bb2 <_malloc_r+0x22>
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	bf0c      	ite	eq
 8009c50:	6032      	streq	r2, [r6, #0]
 8009c52:	605a      	strne	r2, [r3, #4]
 8009c54:	e7ec      	b.n	8009c30 <_malloc_r+0xa0>
 8009c56:	4623      	mov	r3, r4
 8009c58:	6864      	ldr	r4, [r4, #4]
 8009c5a:	e7b2      	b.n	8009bc2 <_malloc_r+0x32>
 8009c5c:	4634      	mov	r4, r6
 8009c5e:	6876      	ldr	r6, [r6, #4]
 8009c60:	e7b9      	b.n	8009bd6 <_malloc_r+0x46>
 8009c62:	230c      	movs	r3, #12
 8009c64:	4638      	mov	r0, r7
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	f000 f860 	bl	8009d2c <__malloc_unlock>
 8009c6c:	e7a1      	b.n	8009bb2 <_malloc_r+0x22>
 8009c6e:	6025      	str	r5, [r4, #0]
 8009c70:	e7de      	b.n	8009c30 <_malloc_r+0xa0>
 8009c72:	bf00      	nop
 8009c74:	200002a0 	.word	0x200002a0

08009c78 <_sbrk_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4d05      	ldr	r5, [pc, #20]	; (8009c94 <_sbrk_r+0x1c>)
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4608      	mov	r0, r1
 8009c82:	602b      	str	r3, [r5, #0]
 8009c84:	f7fa f80a 	bl	8003c9c <_sbrk>
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	d102      	bne.n	8009c92 <_sbrk_r+0x1a>
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	b103      	cbz	r3, 8009c92 <_sbrk_r+0x1a>
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	bd38      	pop	{r3, r4, r5, pc}
 8009c94:	200002a8 	.word	0x200002a8

08009c98 <_raise_r>:
 8009c98:	291f      	cmp	r1, #31
 8009c9a:	b538      	push	{r3, r4, r5, lr}
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	460d      	mov	r5, r1
 8009ca0:	d904      	bls.n	8009cac <_raise_r+0x14>
 8009ca2:	2316      	movs	r3, #22
 8009ca4:	6003      	str	r3, [r0, #0]
 8009ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cae:	b112      	cbz	r2, 8009cb6 <_raise_r+0x1e>
 8009cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cb4:	b94b      	cbnz	r3, 8009cca <_raise_r+0x32>
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 f830 	bl	8009d1c <_getpid_r>
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cc6:	f000 b817 	b.w	8009cf8 <_kill_r>
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d00a      	beq.n	8009ce4 <_raise_r+0x4c>
 8009cce:	1c59      	adds	r1, r3, #1
 8009cd0:	d103      	bne.n	8009cda <_raise_r+0x42>
 8009cd2:	2316      	movs	r3, #22
 8009cd4:	6003      	str	r3, [r0, #0]
 8009cd6:	2001      	movs	r0, #1
 8009cd8:	e7e7      	b.n	8009caa <_raise_r+0x12>
 8009cda:	2400      	movs	r4, #0
 8009cdc:	4628      	mov	r0, r5
 8009cde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ce2:	4798      	blx	r3
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e7e0      	b.n	8009caa <_raise_r+0x12>

08009ce8 <raise>:
 8009ce8:	4b02      	ldr	r3, [pc, #8]	; (8009cf4 <raise+0xc>)
 8009cea:	4601      	mov	r1, r0
 8009cec:	6818      	ldr	r0, [r3, #0]
 8009cee:	f7ff bfd3 	b.w	8009c98 <_raise_r>
 8009cf2:	bf00      	nop
 8009cf4:	20000018 	.word	0x20000018

08009cf8 <_kill_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	4d06      	ldr	r5, [pc, #24]	; (8009d18 <_kill_r+0x20>)
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	4611      	mov	r1, r2
 8009d04:	602b      	str	r3, [r5, #0]
 8009d06:	f7f9 ffae 	bl	8003c66 <_kill>
 8009d0a:	1c43      	adds	r3, r0, #1
 8009d0c:	d102      	bne.n	8009d14 <_kill_r+0x1c>
 8009d0e:	682b      	ldr	r3, [r5, #0]
 8009d10:	b103      	cbz	r3, 8009d14 <_kill_r+0x1c>
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	bd38      	pop	{r3, r4, r5, pc}
 8009d16:	bf00      	nop
 8009d18:	200002a8 	.word	0x200002a8

08009d1c <_getpid_r>:
 8009d1c:	f7f9 bf9c 	b.w	8003c58 <_getpid>

08009d20 <__malloc_lock>:
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__malloc_lock+0x8>)
 8009d22:	f000 b809 	b.w	8009d38 <__retarget_lock_acquire_recursive>
 8009d26:	bf00      	nop
 8009d28:	200002ac 	.word	0x200002ac

08009d2c <__malloc_unlock>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	; (8009d34 <__malloc_unlock+0x8>)
 8009d2e:	f000 b804 	b.w	8009d3a <__retarget_lock_release_recursive>
 8009d32:	bf00      	nop
 8009d34:	200002ac 	.word	0x200002ac

08009d38 <__retarget_lock_acquire_recursive>:
 8009d38:	4770      	bx	lr

08009d3a <__retarget_lock_release_recursive>:
 8009d3a:	4770      	bx	lr

08009d3c <_init>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	bf00      	nop
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr

08009d48 <_fini>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	bf00      	nop
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr
